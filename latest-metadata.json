{
  "magicNumber": 1635018093,
  "metadata": {
    "tag": "v14",
    "value": {
      "lookup": [
        {
          "id": 0,
          "type": {
            "path": [
              "sp_core",
              "crypto",
              "AccountId32"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 1,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 32,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 2,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "primitive",
              "value": {
                "tag": "u8"
              }
            },
            "docs": []
          }
        },
        {
          "id": 3,
          "type": {
            "path": [
              "frame_system",
              "AccountInfo"
            ],
            "params": [
              {
                "name": "Index",
                "type": 4
              },
              {
                "name": "AccountData",
                "type": 5
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "nonce",
                  "type": 4,
                  "typeName": "Index",
                  "docs": []
                },
                {
                  "name": "consumers",
                  "type": 4,
                  "typeName": "RefCount",
                  "docs": []
                },
                {
                  "name": "providers",
                  "type": 4,
                  "typeName": "RefCount",
                  "docs": []
                },
                {
                  "name": "sufficients",
                  "type": 4,
                  "typeName": "RefCount",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 5,
                  "typeName": "AccountData",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 4,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "primitive",
              "value": {
                "tag": "u32"
              }
            },
            "docs": []
          }
        },
        {
          "id": 5,
          "type": {
            "path": [
              "pallet_balances",
              "types",
              "AccountData"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "free",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "reserved",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "frozen",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "flags",
                  "type": 7,
                  "typeName": "ExtraFlags",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 6,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "primitive",
              "value": {
                "tag": "u128"
              }
            },
            "docs": []
          }
        },
        {
          "id": 7,
          "type": {
            "path": [
              "pallet_balances",
              "types",
              "ExtraFlags"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 6,
                  "typeName": "u128",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 8,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "PerDispatchClass"
            ],
            "params": [
              {
                "name": "T",
                "type": 9
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "normal",
                  "type": 9,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "operational",
                  "type": 9,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "mandatory",
                  "type": 9,
                  "typeName": "T",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 9,
          "type": {
            "path": [
              "sp_weights",
              "weight_v2",
              "Weight"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "ref_time",
                  "type": 10,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "proof_size",
                  "type": 10,
                  "typeName": "u64",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 10,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "compact",
              "value": 11
            },
            "docs": []
          }
        },
        {
          "id": 11,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "primitive",
              "value": {
                "tag": "u64"
              }
            },
            "docs": []
          }
        },
        {
          "id": 12,
          "type": {
            "path": [
              "primitive_types",
              "H256"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 13,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 2
            },
            "docs": []
          }
        },
        {
          "id": 14,
          "type": {
            "path": [
              "sp_runtime",
              "generic",
              "digest",
              "Digest"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "logs",
                  "type": 15,
                  "typeName": "Vec<DigestItem>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 15,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 16
            },
            "docs": []
          }
        },
        {
          "id": 16,
          "type": {
            "path": [
              "sp_runtime",
              "generic",
              "digest",
              "DigestItem"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "PreRuntime",
                  "fields": [
                    {
                      "type": 17,
                      "typeName": "ConsensusEngineId",
                      "docs": []
                    },
                    {
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Consensus",
                  "fields": [
                    {
                      "type": 17,
                      "typeName": "ConsensusEngineId",
                      "docs": []
                    },
                    {
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Seal",
                  "fields": [
                    {
                      "type": 17,
                      "typeName": "ConsensusEngineId",
                      "docs": []
                    },
                    {
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Other",
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "RuntimeEnvironmentUpdated",
                  "fields": [],
                  "index": 8,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 17,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 4,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 18,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 19
            },
            "docs": []
          }
        },
        {
          "id": 19,
          "type": {
            "path": [
              "frame_system",
              "EventRecord"
            ],
            "params": [
              {
                "name": "E",
                "type": 20
              },
              {
                "name": "T",
                "type": 12
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "phase",
                  "type": 479,
                  "typeName": "Phase",
                  "docs": []
                },
                {
                  "name": "event",
                  "type": 20,
                  "typeName": "E",
                  "docs": []
                },
                {
                  "name": "topics",
                  "type": 480,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 20,
          "type": {
            "path": [
              "polkadot_runtime",
              "RuntimeEvent"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "System",
                  "fields": [
                    {
                      "type": 21,
                      "typeName": "frame_system::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Scheduler",
                  "fields": [
                    {
                      "type": 30,
                      "typeName": "pallet_scheduler::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Preimage",
                  "fields": [
                    {
                      "type": 35,
                      "typeName": "pallet_preimage::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Indices",
                  "fields": [
                    {
                      "type": 36,
                      "typeName": "pallet_indices::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Balances",
                  "fields": [
                    {
                      "type": 37,
                      "typeName": "pallet_balances::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "TransactionPayment",
                  "fields": [
                    {
                      "type": 39,
                      "typeName": "pallet_transaction_payment::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Staking",
                  "fields": [
                    {
                      "type": 40,
                      "typeName": "pallet_staking::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Offences",
                  "fields": [
                    {
                      "type": 46,
                      "typeName": "pallet_offences::Event",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Session",
                  "fields": [
                    {
                      "type": 48,
                      "typeName": "pallet_session::Event",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "Grandpa",
                  "fields": [
                    {
                      "type": 49,
                      "typeName": "pallet_grandpa::Event",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ImOnline",
                  "fields": [
                    {
                      "type": 54,
                      "typeName": "pallet_im_online::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Democracy",
                  "fields": [
                    {
                      "type": 63,
                      "typeName": "pallet_democracy::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Council",
                  "fields": [
                    {
                      "type": 68,
                      "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "TechnicalCommittee",
                  "fields": [
                    {
                      "type": 69,
                      "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "PhragmenElection",
                  "fields": [
                    {
                      "type": 70,
                      "typeName": "pallet_elections_phragmen::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "TechnicalMembership",
                  "fields": [
                    {
                      "type": 73,
                      "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance1>",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "Treasury",
                  "fields": [
                    {
                      "type": 74,
                      "typeName": "pallet_treasury::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "ConvictionVoting",
                  "fields": [
                    {
                      "type": 75,
                      "typeName": "pallet_conviction_voting::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Referenda",
                  "fields": [
                    {
                      "type": 76,
                      "typeName": "pallet_referenda::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Whitelist",
                  "fields": [
                    {
                      "type": 441,
                      "typeName": "pallet_whitelist::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Claims",
                  "fields": [
                    {
                      "type": 446,
                      "typeName": "claims::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Vesting",
                  "fields": [
                    {
                      "type": 447,
                      "typeName": "pallet_vesting::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "Utility",
                  "fields": [
                    {
                      "type": 448,
                      "typeName": "pallet_utility::Event",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "Identity",
                  "fields": [
                    {
                      "type": 449,
                      "typeName": "pallet_identity::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "Proxy",
                  "fields": [
                    {
                      "type": 450,
                      "typeName": "pallet_proxy::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "Multisig",
                  "fields": [
                    {
                      "type": 451,
                      "typeName": "pallet_multisig::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "Bounties",
                  "fields": [
                    {
                      "type": 452,
                      "typeName": "pallet_bounties::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "ChildBounties",
                  "fields": [
                    {
                      "type": 453,
                      "typeName": "pallet_child_bounties::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "Tips",
                  "fields": [
                    {
                      "type": 454,
                      "typeName": "pallet_tips::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "ElectionProviderMultiPhase",
                  "fields": [
                    {
                      "type": 455,
                      "typeName": "pallet_election_provider_multi_phase::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "VoterList",
                  "fields": [
                    {
                      "type": 459,
                      "typeName": "pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>",
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "NominationPools",
                  "fields": [
                    {
                      "type": 460,
                      "typeName": "pallet_nomination_pools::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 39,
                  "docs": []
                },
                {
                  "name": "FastUnstake",
                  "fields": [
                    {
                      "type": 461,
                      "typeName": "pallet_fast_unstake::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 40,
                  "docs": []
                },
                {
                  "name": "ParaInclusion",
                  "fields": [
                    {
                      "type": 462,
                      "typeName": "parachains_inclusion::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 53,
                  "docs": []
                },
                {
                  "name": "Paras",
                  "fields": [
                    {
                      "type": 466,
                      "typeName": "parachains_paras::Event",
                      "docs": []
                    }
                  ],
                  "index": 56,
                  "docs": []
                },
                {
                  "name": "Hrmp",
                  "fields": [
                    {
                      "type": 467,
                      "typeName": "parachains_hrmp::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 60,
                  "docs": []
                },
                {
                  "name": "ParasDisputes",
                  "fields": [
                    {
                      "type": 468,
                      "typeName": "parachains_disputes::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 62,
                  "docs": []
                },
                {
                  "name": "Registrar",
                  "fields": [
                    {
                      "type": 471,
                      "typeName": "paras_registrar::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 70,
                  "docs": []
                },
                {
                  "name": "Slots",
                  "fields": [
                    {
                      "type": 472,
                      "typeName": "slots::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 71,
                  "docs": []
                },
                {
                  "name": "Auctions",
                  "fields": [
                    {
                      "type": 473,
                      "typeName": "auctions::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 72,
                  "docs": []
                },
                {
                  "name": "Crowdloan",
                  "fields": [
                    {
                      "type": 474,
                      "typeName": "crowdloan::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 73,
                  "docs": []
                },
                {
                  "name": "XcmPallet",
                  "fields": [
                    {
                      "type": 475,
                      "typeName": "pallet_xcm::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 99,
                  "docs": []
                },
                {
                  "name": "MessageQueue",
                  "fields": [
                    {
                      "type": 477,
                      "typeName": "pallet_message_queue::Event<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 100,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 21,
          "type": {
            "path": [
              "frame_system",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "ExtrinsicSuccess",
                  "fields": [
                    {
                      "name": "dispatch_info",
                      "type": 22,
                      "typeName": "DispatchInfo",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "An extrinsic completed successfully."
                  ]
                },
                {
                  "name": "ExtrinsicFailed",
                  "fields": [
                    {
                      "name": "dispatch_error",
                      "type": 25,
                      "typeName": "DispatchError",
                      "docs": []
                    },
                    {
                      "name": "dispatch_info",
                      "type": 22,
                      "typeName": "DispatchInfo",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An extrinsic failed."
                  ]
                },
                {
                  "name": "CodeUpdated",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "`:code` was updated."
                  ]
                },
                {
                  "name": "NewAccount",
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A new account was created."
                  ]
                },
                {
                  "name": "KilledAccount",
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "An account was reaped."
                  ]
                },
                {
                  "name": "Remarked",
                  "fields": [
                    {
                      "name": "sender",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "On on-chain remark happened."
                  ]
                }
              ]
            },
            "docs": [
              "Event for the System pallet."
            ]
          }
        },
        {
          "id": 22,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "DispatchInfo"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "weight",
                  "type": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "class",
                  "type": 23,
                  "typeName": "DispatchClass",
                  "docs": []
                },
                {
                  "name": "pays_fee",
                  "type": 24,
                  "typeName": "Pays",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 23,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "DispatchClass"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Normal",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Operational",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Mandatory",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 24,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "Pays"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Yes",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "No",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 25,
          "type": {
            "path": [
              "sp_runtime",
              "DispatchError"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Other",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "CannotLookup",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "BadOrigin",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Module",
                  "fields": [
                    {
                      "type": 26,
                      "typeName": "ModuleError",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "ConsumerRemaining",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "NoProviders",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "TooManyConsumers",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Token",
                  "fields": [
                    {
                      "type": 27,
                      "typeName": "TokenError",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Arithmetic",
                  "fields": [
                    {
                      "type": 28,
                      "typeName": "ArithmeticError",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Transactional",
                  "fields": [
                    {
                      "type": 29,
                      "typeName": "TransactionalError",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "Exhausted",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Corruption",
                  "fields": [],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "Unavailable",
                  "fields": [],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "RootNotAllowed",
                  "fields": [],
                  "index": 13,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 26,
          "type": {
            "path": [
              "sp_runtime",
              "ModuleError"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "error",
                  "type": 17,
                  "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 27,
          "type": {
            "path": [
              "sp_runtime",
              "TokenError"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "FundsUnavailable",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "OnlyProvider",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "BelowMinimum",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "CannotCreate",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "UnknownAsset",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Frozen",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Unsupported",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "CannotCreateHold",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "NotExpendable",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Blocked",
                  "fields": [],
                  "index": 9,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 28,
          "type": {
            "path": [
              "sp_arithmetic",
              "ArithmeticError"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Underflow",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Overflow",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "DivisionByZero",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 29,
          "type": {
            "path": [
              "sp_runtime",
              "TransactionalError"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "LimitReached",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NoLayer",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 30,
          "type": {
            "path": [
              "pallet_scheduler",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Scheduled",
                  "fields": [
                    {
                      "name": "when",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Scheduled some task."
                  ]
                },
                {
                  "name": "Canceled",
                  "fields": [
                    {
                      "name": "when",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Canceled some task."
                  ]
                },
                {
                  "name": "Dispatched",
                  "fields": [
                    {
                      "name": "task",
                      "type": 31,
                      "typeName": "TaskAddress<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "type": 32,
                      "typeName": "Option<TaskName>",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "type": 33,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Dispatched some task."
                  ]
                },
                {
                  "name": "CallUnavailable",
                  "fields": [
                    {
                      "name": "task",
                      "type": 31,
                      "typeName": "TaskAddress<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "type": 32,
                      "typeName": "Option<TaskName>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "The call for the provided hash was not found so the task has been aborted."
                  ]
                },
                {
                  "name": "PeriodicFailed",
                  "fields": [
                    {
                      "name": "task",
                      "type": 31,
                      "typeName": "TaskAddress<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "type": 32,
                      "typeName": "Option<TaskName>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "The given task was unable to be renewed since the agenda is full at that block."
                  ]
                },
                {
                  "name": "PermanentlyOverweight",
                  "fields": [
                    {
                      "name": "task",
                      "type": 31,
                      "typeName": "TaskAddress<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "type": 32,
                      "typeName": "Option<TaskName>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "The given task can never be executed since it is overweight."
                  ]
                }
              ]
            },
            "docs": [
              "Events type."
            ]
          }
        },
        {
          "id": 31,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                4,
                4
              ]
            },
            "docs": []
          }
        },
        {
          "id": 32,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 1
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 1,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 33,
          "type": {
            "path": [
              "Result"
            ],
            "params": [
              {
                "name": "T",
                "type": 34
              },
              {
                "name": "E",
                "type": 25
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Ok",
                  "fields": [
                    {
                      "type": 34,
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Err",
                  "fields": [
                    {
                      "type": 25,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 34,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": []
            },
            "docs": []
          }
        },
        {
          "id": 35,
          "type": {
            "path": [
              "pallet_preimage",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Noted",
                  "fields": [
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A preimage has been noted."
                  ]
                },
                {
                  "name": "Requested",
                  "fields": [
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A preimage has been requested."
                  ]
                },
                {
                  "name": "Cleared",
                  "fields": [
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A preimage has ben cleared."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 36,
          "type": {
            "path": [
              "pallet_indices",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "IndexAssigned",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "T::AccountIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A account index was assigned."
                  ]
                },
                {
                  "name": "IndexFreed",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "T::AccountIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A account index has been freed up (unassigned)."
                  ]
                },
                {
                  "name": "IndexFrozen",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "T::AccountIndex",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A account index has been frozen to its current account ID."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 37,
          "type": {
            "path": [
              "pallet_balances",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Endowed",
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "free_balance",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "An account was created with some free balance."
                  ]
                },
                {
                  "name": "DustLost",
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                    "resulting in an outright loss."
                  ]
                },
                {
                  "name": "Transfer",
                  "fields": [
                    {
                      "name": "from",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Transfer succeeded."
                  ]
                },
                {
                  "name": "BalanceSet",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A balance was set by root."
                  ]
                },
                {
                  "name": "Reserved",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Some balance was reserved (moved from free to reserved)."
                  ]
                },
                {
                  "name": "Unreserved",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Some balance was unreserved (moved from reserved to free)."
                  ]
                },
                {
                  "name": "ReserveRepatriated",
                  "fields": [
                    {
                      "name": "from",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": "destination_status",
                      "type": 38,
                      "typeName": "Status",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Some balance was moved from the reserve of the first account to the second account.",
                    "Final argument indicates the destination balance type."
                  ]
                },
                {
                  "name": "Deposit",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Some amount was deposited (e.g. for transaction fees)."
                  ]
                },
                {
                  "name": "Withdraw",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Some amount was withdrawn from the account (e.g. for transaction fees)."
                  ]
                },
                {
                  "name": "Slashed",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Some amount was removed from the account (e.g. for misbehavior)."
                  ]
                },
                {
                  "name": "Minted",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Some amount was minted into an account."
                  ]
                },
                {
                  "name": "Burned",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Some amount was burned from an account."
                  ]
                },
                {
                  "name": "Suspended",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "Some amount was suspended from an account (it can be restored later)."
                  ]
                },
                {
                  "name": "Restored",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "Some amount was restored into an account."
                  ]
                },
                {
                  "name": "Upgraded",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "An account was upgraded."
                  ]
                },
                {
                  "name": "Issued",
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Total issuance was increased by `amount`, creating a credit to be balanced."
                  ]
                },
                {
                  "name": "Rescinded",
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": [
                    "Total issuance was decreased by `amount`, creating a debt to be balanced."
                  ]
                },
                {
                  "name": "Locked",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": [
                    "Some balance was locked."
                  ]
                },
                {
                  "name": "Unlocked",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "Some balance was unlocked."
                  ]
                },
                {
                  "name": "Frozen",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": [
                    "Some balance was frozen."
                  ]
                },
                {
                  "name": "Thawed",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": [
                    "Some balance was thawed."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 38,
          "type": {
            "path": [
              "frame_support",
              "traits",
              "tokens",
              "misc",
              "BalanceStatus"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Free",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Reserved",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 39,
          "type": {
            "path": [
              "pallet_transaction_payment",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "TransactionFeePaid",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "actual_fee",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "tip",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                    "has been paid by `who`."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 40,
          "type": {
            "path": [
              "pallet_staking",
              "pallet",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "EraPaid",
                  "fields": [
                    {
                      "name": "era_index",
                      "type": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    },
                    {
                      "name": "validator_payout",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "remainder",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "The era payout has been set; the first balance is the validator-payout; the second is",
                    "the remainder from the maximum amount of reward."
                  ]
                },
                {
                  "name": "Rewarded",
                  "fields": [
                    {
                      "name": "stash",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "The nominator has been rewarded by this amount."
                  ]
                },
                {
                  "name": "Slashed",
                  "fields": [
                    {
                      "name": "staker",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A staker (validator or nominator) has been slashed by the given amount."
                  ]
                },
                {
                  "name": "SlashReported",
                  "fields": [
                    {
                      "name": "validator",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "fraction",
                      "type": 41,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "slash_era",
                      "type": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A slash for the given validator, for the given percentage of their stake, at the given",
                    "era as been reported."
                  ]
                },
                {
                  "name": "OldSlashingReportDiscarded",
                  "fields": [
                    {
                      "name": "session_index",
                      "type": 4,
                      "typeName": "SessionIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "An old slashing report from a prior era was discarded because it could",
                    "not be processed."
                  ]
                },
                {
                  "name": "StakersElected",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "A new set of stakers was elected."
                  ]
                },
                {
                  "name": "Bonded",
                  "fields": [
                    {
                      "name": "stash",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "An account has bonded this amount. \\[stash, amount\\]",
                    "",
                    "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                    "it will not be emitted for staking rewards when they are added to stake."
                  ]
                },
                {
                  "name": "Unbonded",
                  "fields": [
                    {
                      "name": "stash",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "An account has unbonded this amount."
                  ]
                },
                {
                  "name": "Withdrawn",
                  "fields": [
                    {
                      "name": "stash",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                    "from the unlocking queue."
                  ]
                },
                {
                  "name": "Kicked",
                  "fields": [
                    {
                      "name": "nominator",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "stash",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "A nominator has been kicked from a validator."
                  ]
                },
                {
                  "name": "StakingElectionFailed",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The election failed. No new era is planned."
                  ]
                },
                {
                  "name": "Chilled",
                  "fields": [
                    {
                      "name": "stash",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "An account has stopped participating as either a validator or nominator."
                  ]
                },
                {
                  "name": "PayoutStarted",
                  "fields": [
                    {
                      "name": "era_index",
                      "type": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    },
                    {
                      "name": "validator_stash",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "The stakers' rewards are getting paid."
                  ]
                },
                {
                  "name": "ValidatorPrefsSet",
                  "fields": [
                    {
                      "name": "stash",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "prefs",
                      "type": 42,
                      "typeName": "ValidatorPrefs",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "A validator has set their preferences."
                  ]
                },
                {
                  "name": "ForceEra",
                  "fields": [
                    {
                      "name": "mode",
                      "type": 45,
                      "typeName": "Forcing",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "A new force era mode was set."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 41,
          "type": {
            "path": [
              "sp_arithmetic",
              "per_things",
              "Perbill"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 42,
          "type": {
            "path": [
              "pallet_staking",
              "ValidatorPrefs"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "commission",
                  "type": 43,
                  "typeName": "Perbill",
                  "docs": []
                },
                {
                  "name": "blocked",
                  "type": 44,
                  "typeName": "bool",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 43,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "compact",
              "value": 41
            },
            "docs": []
          }
        },
        {
          "id": 44,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "primitive",
              "value": {
                "tag": "bool"
              }
            },
            "docs": []
          }
        },
        {
          "id": 45,
          "type": {
            "path": [
              "pallet_staking",
              "Forcing"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NotForcing",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ForceNew",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ForceNone",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "ForceAlways",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 46,
          "type": {
            "path": [
              "pallet_offences",
              "pallet",
              "Event"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Offence",
                  "fields": [
                    {
                      "name": "kind",
                      "type": 47,
                      "typeName": "Kind",
                      "docs": []
                    },
                    {
                      "name": "timeslot",
                      "type": 13,
                      "typeName": "OpaqueTimeSlot",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "There is an offence reported of the given `kind` happened at the `session_index` and",
                    "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
                    "\\[kind, timeslot\\]."
                  ]
                }
              ]
            },
            "docs": [
              "Events type."
            ]
          }
        },
        {
          "id": 47,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 16,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 48,
          "type": {
            "path": [
              "pallet_session",
              "pallet",
              "Event"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NewSession",
                  "fields": [
                    {
                      "name": "session_index",
                      "type": 4,
                      "typeName": "SessionIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "New session has happened. Note that the argument is the session index, not the",
                    "block number as the type might suggest."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 49,
          "type": {
            "path": [
              "pallet_grandpa",
              "pallet",
              "Event"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NewAuthorities",
                  "fields": [
                    {
                      "name": "authority_set",
                      "type": 50,
                      "typeName": "AuthorityList",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "New authority set has been applied."
                  ]
                },
                {
                  "name": "Paused",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Current authority set has been paused."
                  ]
                },
                {
                  "name": "Resumed",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Current authority set has been resumed."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 50,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 51
            },
            "docs": []
          }
        },
        {
          "id": 51,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                52,
                11
              ]
            },
            "docs": []
          }
        },
        {
          "id": 52,
          "type": {
            "path": [
              "sp_consensus_grandpa",
              "app",
              "Public"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 53,
                  "typeName": "ed25519::Public",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 53,
          "type": {
            "path": [
              "sp_core",
              "ed25519",
              "Public"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 54,
          "type": {
            "path": [
              "pallet_im_online",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "HeartbeatReceived",
                  "fields": [
                    {
                      "name": "authority_id",
                      "type": 55,
                      "typeName": "T::AuthorityId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A new heartbeat was received from `AuthorityId`."
                  ]
                },
                {
                  "name": "AllGood",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "At the end of the session, no offence was committed."
                  ]
                },
                {
                  "name": "SomeOffline",
                  "fields": [
                    {
                      "name": "offline",
                      "type": 57,
                      "typeName": "Vec<IdentificationTuple<T>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "At the end of the session, at least one validator was found to be offline."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 55,
          "type": {
            "path": [
              "pallet_im_online",
              "sr25519",
              "app_sr25519",
              "Public"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 56,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 56,
          "type": {
            "path": [
              "sp_core",
              "sr25519",
              "Public"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 57,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 58
            },
            "docs": []
          }
        },
        {
          "id": 58,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                0,
                59
              ]
            },
            "docs": []
          }
        },
        {
          "id": 59,
          "type": {
            "path": [
              "pallet_staking",
              "Exposure"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "total",
                  "type": 60,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "own",
                  "type": 60,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "others",
                  "type": 61,
                  "typeName": "Vec<IndividualExposure<AccountId, Balance>>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 60,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "compact",
              "value": 6
            },
            "docs": []
          }
        },
        {
          "id": 61,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 62
            },
            "docs": []
          }
        },
        {
          "id": 62,
          "type": {
            "path": [
              "pallet_staking",
              "IndividualExposure"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 60,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 63,
          "type": {
            "path": [
              "pallet_democracy",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Proposed",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "type": 4,
                      "typeName": "PropIndex",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A motion has been proposed by a public account."
                  ]
                },
                {
                  "name": "Tabled",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "type": 4,
                      "typeName": "PropIndex",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A public proposal has been tabled for referendum vote."
                  ]
                },
                {
                  "name": "ExternalTabled",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "An external proposal has been tabled."
                  ]
                },
                {
                  "name": "Started",
                  "fields": [
                    {
                      "name": "ref_index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "type": 64,
                      "typeName": "VoteThreshold",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A referendum has begun."
                  ]
                },
                {
                  "name": "Passed",
                  "fields": [
                    {
                      "name": "ref_index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A proposal has been approved by referendum."
                  ]
                },
                {
                  "name": "NotPassed",
                  "fields": [
                    {
                      "name": "ref_index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A proposal has been rejected by referendum."
                  ]
                },
                {
                  "name": "Cancelled",
                  "fields": [
                    {
                      "name": "ref_index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "A referendum has been cancelled."
                  ]
                },
                {
                  "name": "Delegated",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "An account has delegated their vote to another account."
                  ]
                },
                {
                  "name": "Undelegated",
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "An account has cancelled a previous delegation operation."
                  ]
                },
                {
                  "name": "Vetoed",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "until",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "An external proposal has been vetoed."
                  ]
                },
                {
                  "name": "Blacklisted",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "H256",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "A proposal_hash has been blacklisted permanently."
                  ]
                },
                {
                  "name": "Voted",
                  "fields": [
                    {
                      "name": "voter",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "ref_index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    },
                    {
                      "name": "vote",
                      "type": 65,
                      "typeName": "AccountVote<BalanceOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "An account has voted in a referendum"
                  ]
                },
                {
                  "name": "Seconded",
                  "fields": [
                    {
                      "name": "seconder",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "prop_index",
                      "type": 4,
                      "typeName": "PropIndex",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "An account has secconded a proposal"
                  ]
                },
                {
                  "name": "ProposalCanceled",
                  "fields": [
                    {
                      "name": "prop_index",
                      "type": 4,
                      "typeName": "PropIndex",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "A proposal got canceled."
                  ]
                },
                {
                  "name": "MetadataSet",
                  "fields": [
                    {
                      "name": "owner",
                      "type": 67,
                      "typeName": "MetadataOwner",
                      "docs": [
                        "Metadata owner."
                      ]
                    },
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "PreimageHash",
                      "docs": [
                        "Preimage hash."
                      ]
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Metadata for a proposal or a referendum has been set."
                  ]
                },
                {
                  "name": "MetadataCleared",
                  "fields": [
                    {
                      "name": "owner",
                      "type": 67,
                      "typeName": "MetadataOwner",
                      "docs": [
                        "Metadata owner."
                      ]
                    },
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "PreimageHash",
                      "docs": [
                        "Preimage hash."
                      ]
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Metadata for a proposal or a referendum has been cleared."
                  ]
                },
                {
                  "name": "MetadataTransferred",
                  "fields": [
                    {
                      "name": "prev_owner",
                      "type": 67,
                      "typeName": "MetadataOwner",
                      "docs": [
                        "Previous metadata owner."
                      ]
                    },
                    {
                      "name": "owner",
                      "type": 67,
                      "typeName": "MetadataOwner",
                      "docs": [
                        "New metadata owner."
                      ]
                    },
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "PreimageHash",
                      "docs": [
                        "Preimage hash."
                      ]
                    }
                  ],
                  "index": 16,
                  "docs": [
                    "Metadata has been transferred to new owner."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 64,
          "type": {
            "path": [
              "pallet_democracy",
              "vote_threshold",
              "VoteThreshold"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "SuperMajorityApprove",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "SuperMajorityAgainst",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "SimpleMajority",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 65,
          "type": {
            "path": [
              "pallet_democracy",
              "vote",
              "AccountVote"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Standard",
                  "fields": [
                    {
                      "name": "vote",
                      "type": 66,
                      "typeName": "Vote",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Split",
                  "fields": [
                    {
                      "name": "aye",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "nay",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 66,
          "type": {
            "path": [
              "pallet_democracy",
              "vote",
              "Vote"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 67,
          "type": {
            "path": [
              "pallet_democracy",
              "types",
              "MetadataOwner"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "External",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Proposal",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "PropIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Referendum",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 68,
          "type": {
            "path": [
              "pallet_collective",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Proposed",
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proposal_index",
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A motion (given hash) has been proposed (by given account) with a threshold (given",
                    "`MemberCount`)."
                  ]
                },
                {
                  "name": "Voted",
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "voted",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "yes",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "no",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A motion (given hash) has been voted on by given account, leaving",
                    "a tally (yes votes and no votes given respectively as `MemberCount`)."
                  ]
                },
                {
                  "name": "Approved",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A motion was approved by the required threshold."
                  ]
                },
                {
                  "name": "Disapproved",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A motion was not approved by the required threshold."
                  ]
                },
                {
                  "name": "Executed",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "type": 33,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A motion was executed; result will be `Ok` if it returned without error."
                  ]
                },
                {
                  "name": "MemberExecuted",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "type": 33,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A single member did some action; result will be `Ok` if it returned without error."
                  ]
                },
                {
                  "name": "Closed",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "yes",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "no",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "A proposal was closed because its threshold was reached or after its duration was up."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 69,
          "type": {
            "path": [
              "pallet_collective",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Proposed",
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proposal_index",
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A motion (given hash) has been proposed (by given account) with a threshold (given",
                    "`MemberCount`)."
                  ]
                },
                {
                  "name": "Voted",
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "voted",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "yes",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "no",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A motion (given hash) has been voted on by given account, leaving",
                    "a tally (yes votes and no votes given respectively as `MemberCount`)."
                  ]
                },
                {
                  "name": "Approved",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A motion was approved by the required threshold."
                  ]
                },
                {
                  "name": "Disapproved",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A motion was not approved by the required threshold."
                  ]
                },
                {
                  "name": "Executed",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "type": 33,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A motion was executed; result will be `Ok` if it returned without error."
                  ]
                },
                {
                  "name": "MemberExecuted",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "type": 33,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A single member did some action; result will be `Ok` if it returned without error."
                  ]
                },
                {
                  "name": "Closed",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "yes",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "no",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "A proposal was closed because its threshold was reached or after its duration was up."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 70,
          "type": {
            "path": [
              "pallet_elections_phragmen",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NewTerm",
                  "fields": [
                    {
                      "name": "new_members",
                      "type": 71,
                      "typeName": "Vec<(<T as frame_system::Config>::AccountId, BalanceOf<T>)>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A new term with new_members. This indicates that enough candidates existed to run",
                    "the election, not that enough have has been elected. The inner value must be examined",
                    "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond",
                    "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
                    "begin with."
                  ]
                },
                {
                  "name": "EmptyTerm",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "No (or not enough) candidates existed for this round. This is different from",
                    "`NewTerm(\\[\\])`. See the description of `NewTerm`."
                  ]
                },
                {
                  "name": "ElectionError",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Internal error happened while trying to perform election."
                  ]
                },
                {
                  "name": "MemberKicked",
                  "fields": [
                    {
                      "name": "member",
                      "type": 0,
                      "typeName": "<T as frame_system::Config>::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A member has been removed. This should always be followed by either `NewTerm` or",
                    "`EmptyTerm`."
                  ]
                },
                {
                  "name": "Renounced",
                  "fields": [
                    {
                      "name": "candidate",
                      "type": 0,
                      "typeName": "<T as frame_system::Config>::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Someone has renounced their candidacy."
                  ]
                },
                {
                  "name": "CandidateSlashed",
                  "fields": [
                    {
                      "name": "candidate",
                      "type": 0,
                      "typeName": "<T as frame_system::Config>::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A candidate was slashed by amount due to failing to obtain a seat as member or",
                    "runner-up.",
                    "",
                    "Note that old members and runners-up are also candidates."
                  ]
                },
                {
                  "name": "SeatHolderSlashed",
                  "fields": [
                    {
                      "name": "seat_holder",
                      "type": 0,
                      "typeName": "<T as frame_system::Config>::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "A seat holder was slashed by amount by being forcefully removed from the set."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 71,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 72
            },
            "docs": []
          }
        },
        {
          "id": 72,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                0,
                6
              ]
            },
            "docs": []
          }
        },
        {
          "id": 73,
          "type": {
            "path": [
              "pallet_membership",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "MemberAdded",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The given member was added; see the transaction for who."
                  ]
                },
                {
                  "name": "MemberRemoved",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The given member was removed; see the transaction for who."
                  ]
                },
                {
                  "name": "MembersSwapped",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Two members were swapped; see the transaction for who."
                  ]
                },
                {
                  "name": "MembersReset",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The membership was reset; see the transaction for who the new set is."
                  ]
                },
                {
                  "name": "KeyChanged",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "One of the members' keys changed."
                  ]
                },
                {
                  "name": "Dummy",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Phantom member, never used."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 74,
          "type": {
            "path": [
              "pallet_treasury",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Proposed",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "New proposal."
                  ]
                },
                {
                  "name": "Spending",
                  "fields": [
                    {
                      "name": "budget_remaining",
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "We have ended a spend period and will now allocate funds."
                  ]
                },
                {
                  "name": "Awarded",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "award",
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Some funds have been allocated."
                  ]
                },
                {
                  "name": "Rejected",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "slashed",
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A proposal was rejected; funds were slashed."
                  ]
                },
                {
                  "name": "Burnt",
                  "fields": [
                    {
                      "name": "burnt_funds",
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Some of our funds have been burnt."
                  ]
                },
                {
                  "name": "Rollover",
                  "fields": [
                    {
                      "name": "rollover_balance",
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Spending has finished; this is the amount that rolls over until next spend."
                  ]
                },
                {
                  "name": "Deposit",
                  "fields": [
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Some funds have been deposited."
                  ]
                },
                {
                  "name": "SpendApproved",
                  "fields": [
                    {
                      "name": "proposal_index",
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "A new spend proposal has been approved."
                  ]
                },
                {
                  "name": "UpdatedInactive",
                  "fields": [
                    {
                      "name": "reactivated",
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "deactivated",
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "The inactive funds of the pallet have been updated."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 75,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Delegated",
                  "fields": [
                    {
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "An account has delegated their vote to another account. \\[who, target\\]"
                  ]
                },
                {
                  "name": "Undelegated",
                  "fields": [
                    {
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An \\[account\\] has cancelled a previous delegation operation."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 76,
          "type": {
            "path": [
              "pallet_referenda",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Submitted",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "track",
                      "type": 77,
                      "typeName": "TrackIdOf<T, I>",
                      "docs": [
                        "The track (and by extension proposal dispatch origin) of this referendum."
                      ]
                    },
                    {
                      "name": "proposal",
                      "type": 78,
                      "typeName": "BoundedCallOf<T, I>",
                      "docs": [
                        "The proposal for the referendum."
                      ]
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A referendum has been submitted."
                  ]
                },
                {
                  "name": "DecisionDepositPlaced",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": [
                        "The account who placed the deposit."
                      ]
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": [
                        "The amount placed by the account."
                      ]
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "The decision deposit has been placed."
                  ]
                },
                {
                  "name": "DecisionDepositRefunded",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": [
                        "The account who placed the deposit."
                      ]
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": [
                        "The amount placed by the account."
                      ]
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "The decision deposit has been refunded."
                  ]
                },
                {
                  "name": "DepositSlashed",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": [
                        "The account who placed the deposit."
                      ]
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": [
                        "The amount placed by the account."
                      ]
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A deposit has been slashaed."
                  ]
                },
                {
                  "name": "DecisionStarted",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "track",
                      "type": 77,
                      "typeName": "TrackIdOf<T, I>",
                      "docs": [
                        "The track (and by extension proposal dispatch origin) of this referendum."
                      ]
                    },
                    {
                      "name": "proposal",
                      "type": 78,
                      "typeName": "BoundedCallOf<T, I>",
                      "docs": [
                        "The proposal for the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "type": 440,
                      "typeName": "T::Tally",
                      "docs": [
                        "The current tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A referendum has moved into the deciding phase."
                  ]
                },
                {
                  "name": "ConfirmStarted",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "ConfirmAborted",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Confirmed",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "type": 440,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "A referendum has ended its confirmation phase and is ready for approval."
                  ]
                },
                {
                  "name": "Approved",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "A referendum has been approved and its proposal has been scheduled."
                  ]
                },
                {
                  "name": "Rejected",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "type": 440,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "A proposal has been rejected by referendum."
                  ]
                },
                {
                  "name": "TimedOut",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "type": 440,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "A referendum has been timed out without being decided."
                  ]
                },
                {
                  "name": "Cancelled",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "type": 440,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "A referendum has been cancelled."
                  ]
                },
                {
                  "name": "Killed",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "tally",
                      "type": 440,
                      "typeName": "T::Tally",
                      "docs": [
                        "The final tally of votes in this referendum."
                      ]
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "A referendum has been killed."
                  ]
                },
                {
                  "name": "SubmissionDepositRefunded",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": [
                        "The account who placed the deposit."
                      ]
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": [
                        "The amount placed by the account."
                      ]
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "The submission deposit has been refunded."
                  ]
                },
                {
                  "name": "MetadataSet",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "PreimageHash",
                      "docs": [
                        "Preimage hash."
                      ]
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Metadata for a referendum has been set."
                  ]
                },
                {
                  "name": "MetadataCleared",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": [
                        "Index of the referendum."
                      ]
                    },
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "PreimageHash",
                      "docs": [
                        "Preimage hash."
                      ]
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Metadata for a referendum has been cleared."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 77,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "primitive",
              "value": {
                "tag": "u16"
              }
            },
            "docs": []
          }
        },
        {
          "id": 78,
          "type": {
            "path": [
              "frame_support",
              "traits",
              "preimages",
              "Bounded"
            ],
            "params": [
              {
                "name": "T",
                "type": 79
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Legacy",
                  "fields": [
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "Hash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Inline",
                  "fields": [
                    {
                      "type": 439,
                      "typeName": "BoundedInline",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Lookup",
                  "fields": [
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "Hash",
                      "docs": []
                    },
                    {
                      "name": "len",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 79,
          "type": {
            "path": [
              "polkadot_runtime",
              "RuntimeCall"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "System",
                  "fields": [
                    {
                      "type": 80,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Scheduler",
                  "fields": [
                    {
                      "type": 84,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Preimage",
                  "fields": [
                    {
                      "type": 86,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Babe",
                  "fields": [
                    {
                      "type": 87,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Timestamp",
                  "fields": [
                    {
                      "type": 98,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Indices",
                  "fields": [
                    {
                      "type": 99,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Balances",
                  "fields": [
                    {
                      "type": 103,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Staking",
                  "fields": [
                    {
                      "type": 105,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Session",
                  "fields": [
                    {
                      "type": 114,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "Grandpa",
                  "fields": [
                    {
                      "type": 119,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ImOnline",
                  "fields": [
                    {
                      "type": 131,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Democracy",
                  "fields": [
                    {
                      "type": 139,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Council",
                  "fields": [
                    {
                      "type": 143,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "TechnicalCommittee",
                  "fields": [
                    {
                      "type": 145,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "PhragmenElection",
                  "fields": [
                    {
                      "type": 146,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PhragmenElection, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "TechnicalMembership",
                  "fields": [
                    {
                      "type": 148,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalMembership, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "Treasury",
                  "fields": [
                    {
                      "type": 149,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "ConvictionVoting",
                  "fields": [
                    {
                      "type": 150,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ConvictionVoting, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Referenda",
                  "fields": [
                    {
                      "type": 155,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Referenda, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Whitelist",
                  "fields": [
                    {
                      "type": 173,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Whitelist, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Claims",
                  "fields": [
                    {
                      "type": 174,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Claims, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Vesting",
                  "fields": [
                    {
                      "type": 182,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "Utility",
                  "fields": [
                    {
                      "type": 184,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "Identity",
                  "fields": [
                    {
                      "type": 186,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "Proxy",
                  "fields": [
                    {
                      "type": 227,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "Multisig",
                  "fields": [
                    {
                      "type": 230,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "Bounties",
                  "fields": [
                    {
                      "type": 233,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "ChildBounties",
                  "fields": [
                    {
                      "type": 234,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ChildBounties, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "Tips",
                  "fields": [
                    {
                      "type": 235,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tips, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "ElectionProviderMultiPhase",
                  "fields": [
                    {
                      "type": 236,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "VoterList",
                  "fields": [
                    {
                      "type": 295,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VoterList, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "NominationPools",
                  "fields": [
                    {
                      "type": 296,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NominationPools, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 39,
                  "docs": []
                },
                {
                  "name": "FastUnstake",
                  "fields": [
                    {
                      "type": 307,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FastUnstake, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 40,
                  "docs": []
                },
                {
                  "name": "Configuration",
                  "fields": [
                    {
                      "type": 308,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Configuration, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 51,
                  "docs": []
                },
                {
                  "name": "ParasShared",
                  "fields": [
                    {
                      "type": 315,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasShared, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 52,
                  "docs": []
                },
                {
                  "name": "ParaInclusion",
                  "fields": [
                    {
                      "type": 316,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInclusion, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 53,
                  "docs": []
                },
                {
                  "name": "ParaInherent",
                  "fields": [
                    {
                      "type": 317,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInherent, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 54,
                  "docs": []
                },
                {
                  "name": "Paras",
                  "fields": [
                    {
                      "type": 351,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Paras, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 56,
                  "docs": []
                },
                {
                  "name": "Initializer",
                  "fields": [
                    {
                      "type": 353,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Initializer, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 57,
                  "docs": []
                },
                {
                  "name": "Hrmp",
                  "fields": [
                    {
                      "type": 354,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Hrmp, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 60,
                  "docs": []
                },
                {
                  "name": "ParasDisputes",
                  "fields": [
                    {
                      "type": 356,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasDisputes, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 62,
                  "docs": []
                },
                {
                  "name": "ParasSlashing",
                  "fields": [
                    {
                      "type": 357,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasSlashing, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 63,
                  "docs": []
                },
                {
                  "name": "Registrar",
                  "fields": [
                    {
                      "type": 361,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Registrar, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 70,
                  "docs": []
                },
                {
                  "name": "Slots",
                  "fields": [
                    {
                      "type": 362,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Slots, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 71,
                  "docs": []
                },
                {
                  "name": "Auctions",
                  "fields": [
                    {
                      "type": 363,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Auctions, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 72,
                  "docs": []
                },
                {
                  "name": "Crowdloan",
                  "fields": [
                    {
                      "type": 365,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Crowdloan, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 73,
                  "docs": []
                },
                {
                  "name": "XcmPallet",
                  "fields": [
                    {
                      "type": 373,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmPallet, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 99,
                  "docs": []
                },
                {
                  "name": "MessageQueue",
                  "fields": [
                    {
                      "type": 436,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageQueue, Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 100,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 80,
          "type": {
            "path": [
              "frame_system",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "remark",
                  "fields": [
                    {
                      "name": "remark",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Make some on-chain remark.",
                    "",
                    "- `O(1)`"
                  ]
                },
                {
                  "name": "set_heap_pages",
                  "fields": [
                    {
                      "name": "pages",
                      "type": 11,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Set the number of pages in the WebAssembly environment's heap."
                  ]
                },
                {
                  "name": "set_code",
                  "fields": [
                    {
                      "name": "code",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Set the new runtime code."
                  ]
                },
                {
                  "name": "set_code_without_checks",
                  "fields": [
                    {
                      "name": "code",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Set the new runtime code without doing any checks of the given `code`."
                  ]
                },
                {
                  "name": "set_storage",
                  "fields": [
                    {
                      "name": "items",
                      "type": 81,
                      "typeName": "Vec<KeyValue>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Set some items of storage."
                  ]
                },
                {
                  "name": "kill_storage",
                  "fields": [
                    {
                      "name": "keys",
                      "type": 83,
                      "typeName": "Vec<Key>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Kill some items from storage."
                  ]
                },
                {
                  "name": "kill_prefix",
                  "fields": [
                    {
                      "name": "prefix",
                      "type": 13,
                      "typeName": "Key",
                      "docs": []
                    },
                    {
                      "name": "subkeys",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Kill all storage items with a key that starts with the given prefix.",
                    "",
                    "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                    "the prefix we are removing to accurately calculate the weight of this function."
                  ]
                },
                {
                  "name": "remark_with_event",
                  "fields": [
                    {
                      "name": "remark",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Make some on-chain remark and emit event."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 81,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 82
            },
            "docs": []
          }
        },
        {
          "id": 82,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                13,
                13
              ]
            },
            "docs": []
          }
        },
        {
          "id": 83,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 13
            },
            "docs": []
          }
        },
        {
          "id": 84,
          "type": {
            "path": [
              "pallet_scheduler",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "schedule",
                  "fields": [
                    {
                      "name": "when",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 85,
                      "typeName": "Option<schedule::Period<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 79,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Anonymously schedule a task."
                  ]
                },
                {
                  "name": "cancel",
                  "fields": [
                    {
                      "name": "when",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Cancel an anonymously scheduled task."
                  ]
                },
                {
                  "name": "schedule_named",
                  "fields": [
                    {
                      "name": "id",
                      "type": 1,
                      "typeName": "TaskName",
                      "docs": []
                    },
                    {
                      "name": "when",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 85,
                      "typeName": "Option<schedule::Period<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 79,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Schedule a named task."
                  ]
                },
                {
                  "name": "cancel_named",
                  "fields": [
                    {
                      "name": "id",
                      "type": 1,
                      "typeName": "TaskName",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Cancel a named scheduled task."
                  ]
                },
                {
                  "name": "schedule_after",
                  "fields": [
                    {
                      "name": "after",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 85,
                      "typeName": "Option<schedule::Period<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 79,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Anonymously schedule a task after a delay."
                  ]
                },
                {
                  "name": "schedule_named_after",
                  "fields": [
                    {
                      "name": "id",
                      "type": 1,
                      "typeName": "TaskName",
                      "docs": []
                    },
                    {
                      "name": "after",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "maybe_periodic",
                      "type": 85,
                      "typeName": "Option<schedule::Period<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "priority",
                      "type": 2,
                      "typeName": "schedule::Priority",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 79,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Schedule a named task after a delay."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 85,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 31
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 31,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 86,
          "type": {
            "path": [
              "pallet_preimage",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "note_preimage",
                  "fields": [
                    {
                      "name": "bytes",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Register a preimage on-chain.",
                    "",
                    "If the preimage was previously requested, no fees or deposits are taken for providing",
                    "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
                  ]
                },
                {
                  "name": "unnote_preimage",
                  "fields": [
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Clear an unrequested preimage from the runtime storage.",
                    "",
                    "If `len` is provided, then it will be a much cheaper operation.",
                    "",
                    "- `hash`: The hash of the preimage to be removed from the store.",
                    "- `len`: The length of the preimage of `hash`."
                  ]
                },
                {
                  "name": "request_preimage",
                  "fields": [
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Request a preimage be uploaded to the chain without paying any fees or deposits.",
                    "",
                    "If the preimage requests has already been provided on-chain, we unreserve any deposit",
                    "a user may have paid, and take the control of the preimage out of their hands."
                  ]
                },
                {
                  "name": "unrequest_preimage",
                  "fields": [
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Clear a previously made request for a preimage.",
                    "",
                    "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 87,
          "type": {
            "path": [
              "pallet_babe",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "report_equivocation",
                  "fields": [
                    {
                      "name": "equivocation_proof",
                      "type": 88,
                      "typeName": "Box<EquivocationProof<T::Header>>",
                      "docs": []
                    },
                    {
                      "name": "key_owner_proof",
                      "type": 94,
                      "typeName": "T::KeyOwnerProof",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Report authority equivocation/misbehavior. This method will verify",
                    "the equivocation proof and validate the given key ownership proof",
                    "against the extracted offender. If both are valid, the offence will",
                    "be reported."
                  ]
                },
                {
                  "name": "report_equivocation_unsigned",
                  "fields": [
                    {
                      "name": "equivocation_proof",
                      "type": 88,
                      "typeName": "Box<EquivocationProof<T::Header>>",
                      "docs": []
                    },
                    {
                      "name": "key_owner_proof",
                      "type": 94,
                      "typeName": "T::KeyOwnerProof",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Report authority equivocation/misbehavior. This method will verify",
                    "the equivocation proof and validate the given key ownership proof",
                    "against the extracted offender. If both are valid, the offence will",
                    "be reported.",
                    "This extrinsic must be called unsigned and it is expected that only",
                    "block authors will call it (validated in `ValidateUnsigned`), as such",
                    "if the block author is defined it will be defined as the equivocation",
                    "reporter."
                  ]
                },
                {
                  "name": "plan_config_change",
                  "fields": [
                    {
                      "name": "config",
                      "type": 95,
                      "typeName": "NextConfigDescriptor",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Plan an epoch config change. The epoch config change is recorded and will be enacted on",
                    "the next call to `enact_epoch_change`. The config will be activated one epoch after.",
                    "Multiple calls to this method will replace any existing planned config change that had",
                    "not been enacted yet."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 88,
          "type": {
            "path": [
              "sp_consensus_slots",
              "EquivocationProof"
            ],
            "params": [
              {
                "name": "Header",
                "type": 89
              },
              {
                "name": "Id",
                "type": 92
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "offender",
                  "type": 92,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "slot",
                  "type": 93,
                  "typeName": "Slot",
                  "docs": []
                },
                {
                  "name": "first_header",
                  "type": 89,
                  "typeName": "Header",
                  "docs": []
                },
                {
                  "name": "second_header",
                  "type": 89,
                  "typeName": "Header",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 89,
          "type": {
            "path": [
              "sp_runtime",
              "generic",
              "header",
              "Header"
            ],
            "params": [
              {
                "name": "Number",
                "type": 4
              },
              {
                "name": "Hash",
                "type": 90
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "parent_hash",
                  "type": 12,
                  "typeName": "Hash::Output",
                  "docs": []
                },
                {
                  "name": "number",
                  "type": 91,
                  "typeName": "Number",
                  "docs": []
                },
                {
                  "name": "state_root",
                  "type": 12,
                  "typeName": "Hash::Output",
                  "docs": []
                },
                {
                  "name": "extrinsics_root",
                  "type": 12,
                  "typeName": "Hash::Output",
                  "docs": []
                },
                {
                  "name": "digest",
                  "type": 14,
                  "typeName": "Digest",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 90,
          "type": {
            "path": [
              "sp_runtime",
              "traits",
              "BlakeTwo256"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": []
            },
            "docs": []
          }
        },
        {
          "id": 91,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "compact",
              "value": 4
            },
            "docs": []
          }
        },
        {
          "id": 92,
          "type": {
            "path": [
              "sp_consensus_babe",
              "app",
              "Public"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 56,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 93,
          "type": {
            "path": [
              "sp_consensus_slots",
              "Slot"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 94,
          "type": {
            "path": [
              "sp_session",
              "MembershipProof"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "session",
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "trie_nodes",
                  "type": 83,
                  "typeName": "Vec<Vec<u8>>",
                  "docs": []
                },
                {
                  "name": "validator_count",
                  "type": 4,
                  "typeName": "ValidatorCount",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 95,
          "type": {
            "path": [
              "sp_consensus_babe",
              "digests",
              "NextConfigDescriptor"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "V1",
                  "fields": [
                    {
                      "name": "c",
                      "type": 96,
                      "typeName": "(u64, u64)",
                      "docs": []
                    },
                    {
                      "name": "allowed_slots",
                      "type": 97,
                      "typeName": "AllowedSlots",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 96,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                11,
                11
              ]
            },
            "docs": []
          }
        },
        {
          "id": 97,
          "type": {
            "path": [
              "sp_consensus_babe",
              "AllowedSlots"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "PrimarySlots",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "PrimaryAndSecondaryPlainSlots",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "PrimaryAndSecondaryVRFSlots",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 98,
          "type": {
            "path": [
              "pallet_timestamp",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "set",
                  "fields": [
                    {
                      "name": "now",
                      "type": 10,
                      "typeName": "T::Moment",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the current time.",
                    "",
                    "This call should be invoked exactly once per block. It will panic at the finalization",
                    "phase, if this call hasn't been invoked by that time.",
                    "",
                    "The timestamp should be greater than the previous one by the amount specified by",
                    "`MinimumPeriod`.",
                    "",
                    "The dispatch origin for this call must be `Inherent`.",
                    "",
                    "## Complexity",
                    "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                    "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                    "  `on_finalize`)",
                    "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 99,
          "type": {
            "path": [
              "pallet_indices",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "claim",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "T::AccountIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Assign an previously unassigned index.",
                    "",
                    "Payment: `Deposit` is reserved from the sender account.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `index`: the index to be claimed. This must not be in use.",
                    "",
                    "Emits `IndexAssigned` if successful.",
                    "",
                    "## Complexity",
                    "- `O(1)`."
                  ]
                },
                {
                  "name": "transfer",
                  "fields": [
                    {
                      "name": "new",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "T::AccountIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Assign an index already owned by the sender to another account. The balance reservation",
                    "is effectively transferred to the new account.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `index`: the index to be re-assigned. This must be owned by the sender.",
                    "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                    "",
                    "Emits `IndexAssigned` if successful.",
                    "",
                    "## Complexity",
                    "- `O(1)`."
                  ]
                },
                {
                  "name": "free",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "T::AccountIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Free up an index owned by the sender.",
                    "",
                    "Payment: Any previous deposit placed for the index is unreserved in the sender account.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must own the index.",
                    "",
                    "- `index`: the index to be freed. This must be owned by the sender.",
                    "",
                    "Emits `IndexFreed` if successful.",
                    "",
                    "## Complexity",
                    "- `O(1)`."
                  ]
                },
                {
                  "name": "force_transfer",
                  "fields": [
                    {
                      "name": "new",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "T::AccountIndex",
                      "docs": []
                    },
                    {
                      "name": "freeze",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Force an index to an account. This doesn't require a deposit. If the index is already",
                    "held, then any deposit is reimbursed to its current owner.",
                    "",
                    "The dispatch origin for this call must be _Root_.",
                    "",
                    "- `index`: the index to be (re-)assigned.",
                    "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                    "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",
                    "",
                    "Emits `IndexAssigned` if successful.",
                    "",
                    "## Complexity",
                    "- `O(1)`."
                  ]
                },
                {
                  "name": "freeze",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "T::AccountIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Freeze an index so it will always point to the sender account. This consumes the",
                    "deposit.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the signing account must have a",
                    "non-frozen account `index`.",
                    "",
                    "- `index`: the index to be frozen in place.",
                    "",
                    "Emits `IndexFrozen` if successful.",
                    "",
                    "## Complexity",
                    "- `O(1)`."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 100,
          "type": {
            "path": [
              "sp_runtime",
              "multiaddress",
              "MultiAddress"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "AccountIndex",
                "type": 34
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Id",
                  "fields": [
                    {
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Index",
                  "fields": [
                    {
                      "type": 101,
                      "typeName": "AccountIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Raw",
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Address32",
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Address20",
                  "fields": [
                    {
                      "type": 102,
                      "typeName": "[u8; 20]",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 101,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "compact",
              "value": 34
            },
            "docs": []
          }
        },
        {
          "id": 102,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 20,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 103,
          "type": {
            "path": [
              "pallet_balances",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "transfer_allow_death",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 60,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Transfer some liquid free balance to another account.",
                    "",
                    "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
                    "If the sender's account is below the existential deposit as a result",
                    "of the transfer, the account will be reaped.",
                    "",
                    "The dispatch origin for this call must be `Signed` by the transactor."
                  ]
                },
                {
                  "name": "set_balance_deprecated",
                  "fields": [
                    {
                      "name": "who",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "new_free",
                      "type": 60,
                      "typeName": "T::Balance",
                      "docs": []
                    },
                    {
                      "name": "old_reserved",
                      "type": 60,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Set the regular balance of a given account; it also takes a reserved balance but this",
                    "must be the same as the account's current reserved balance.",
                    "",
                    "The dispatch origin for this call is `root`.",
                    "",
                    "WARNING: This call is DEPRECATED! Use `force_set_balance` instead."
                  ]
                },
                {
                  "name": "force_transfer",
                  "fields": [
                    {
                      "name": "source",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 60,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
                    "may be specified."
                  ]
                },
                {
                  "name": "transfer_keep_alive",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 60,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
                    "kill the origin account.",
                    "",
                    "99% of the time you want [`transfer_allow_death`] instead.",
                    "",
                    "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
                  ]
                },
                {
                  "name": "transfer_all",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "keep_alive",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Transfer the entire transferable balance from the caller account.",
                    "",
                    "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                    "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                    "transferred by this function. To ensure that this function results in a killed account,",
                    "you might need to prepare the account by removing any reference counters, storage",
                    "deposits, etc...",
                    "",
                    "The dispatch origin of this call must be Signed.",
                    "",
                    "- `dest`: The recipient of the transfer.",
                    "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                    "  of the funds the account has, causing the sender account to be killed (false), or",
                    "  transfer everything except at least the existential deposit, which will guarantee to",
                    "  keep the sender account alive (true)."
                  ]
                },
                {
                  "name": "force_unreserve",
                  "fields": [
                    {
                      "name": "who",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Unreserve some balance from a user by force.",
                    "",
                    "Can only be called by ROOT."
                  ]
                },
                {
                  "name": "upgrade_accounts",
                  "fields": [
                    {
                      "name": "who",
                      "type": 104,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Upgrade a specified account.",
                    "",
                    "- `origin`: Must be `Signed`.",
                    "- `who`: The account to be upgraded.",
                    "",
                    "This will waive the transaction fee if at least all but 10% of the accounts needed to",
                    "be upgraded. (We let some not have to be upgraded just in order to allow for the",
                    "possibililty of churn)."
                  ]
                },
                {
                  "name": "transfer",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 60,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Alias for `transfer_allow_death`, provided only for name-wise compatibility.",
                    "",
                    "WARNING: DEPRECATED! Will be released in approximately 3 months."
                  ]
                },
                {
                  "name": "force_set_balance",
                  "fields": [
                    {
                      "name": "who",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "new_free",
                      "type": 60,
                      "typeName": "T::Balance",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Set the regular balance of a given account.",
                    "",
                    "The dispatch origin for this call is `root`."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 104,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 0
            },
            "docs": []
          }
        },
        {
          "id": 105,
          "type": {
            "path": [
              "pallet_staking",
              "pallet",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "bond",
                  "fields": [
                    {
                      "name": "value",
                      "type": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "payee",
                      "type": 106,
                      "typeName": "RewardDestination<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                    "be the account that controls it.",
                    "",
                    "`value` must be more than the `minimum_balance` specified by `T::Currency`.",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the stash account.",
                    "",
                    "Emits `Bonded`.",
                    "## Complexity",
                    "- Independent of the arguments. Moderate complexity.",
                    "- O(1).",
                    "- Three extra DB entries.",
                    "",
                    "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
                    "unless the `origin` falls below _existential deposit_ and gets removed as dust."
                  ]
                },
                {
                  "name": "bond_extra",
                  "fields": [
                    {
                      "name": "max_additional",
                      "type": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                    "for staking.",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                    "",
                    "Use this if there are additional funds in your stash account that you wish to bond.",
                    "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose",
                    "any limitation on the amount that can be added.",
                    "",
                    "Emits `Bonded`.",
                    "",
                    "## Complexity",
                    "- Independent of the arguments. Insignificant complexity.",
                    "- O(1)."
                  ]
                },
                {
                  "name": "unbond",
                  "fields": [
                    {
                      "name": "value",
                      "type": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                    "period ends. If this leaves an amount actively bonded less than",
                    "T::Currency::minimum_balance(), then it is increased to the full amount.",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                    "",
                    "Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
                    "the funds out of management ready for transfer.",
                    "",
                    "No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)",
                    "can co-exists at the same time. If there are no unlocking chunks slots available",
                    "[`Call::withdraw_unbonded`] is called to remove some of the chunks (if possible).",
                    "",
                    "If a user encounters the `InsufficientBond` error when calling this extrinsic,",
                    "they should call `chill` first in order to free up their bonded funds.",
                    "",
                    "Emits `Unbonded`.",
                    "",
                    "See also [`Call::withdraw_unbonded`]."
                  ]
                },
                {
                  "name": "withdraw_unbonded",
                  "fields": [
                    {
                      "name": "num_slashing_spans",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Remove any unlocked chunks from the `unlocking` queue from our management.",
                    "",
                    "This essentially frees up that balance to be used by the stash account to do",
                    "whatever it wants.",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the controller.",
                    "",
                    "Emits `Withdrawn`.",
                    "",
                    "See also [`Call::unbond`].",
                    "",
                    "## Complexity",
                    "O(S) where S is the number of slashing spans to remove",
                    "NOTE: Weight annotation is the kill scenario, we refund otherwise."
                  ]
                },
                {
                  "name": "validate",
                  "fields": [
                    {
                      "name": "prefs",
                      "type": 42,
                      "typeName": "ValidatorPrefs",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Declare the desire to validate for the origin controller.",
                    "",
                    "Effects will be felt at the beginning of the next era.",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the controller, not the stash."
                  ]
                },
                {
                  "name": "nominate",
                  "fields": [
                    {
                      "name": "targets",
                      "type": 107,
                      "typeName": "Vec<AccountIdLookupOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Declare the desire to nominate `targets` for the origin controller.",
                    "",
                    "Effects will be felt at the beginning of the next era.",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                    "",
                    "## Complexity",
                    "- The transaction's complexity is proportional to the size of `targets` (N)",
                    "which is capped at CompactAssignments::LIMIT (T::MaxNominations).",
                    "- Both the reads and writes follow a similar pattern."
                  ]
                },
                {
                  "name": "chill",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Declare no desire to either validate or nominate.",
                    "",
                    "Effects will be felt at the beginning of the next era.",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                    "",
                    "## Complexity",
                    "- Independent of the arguments. Insignificant complexity.",
                    "- Contains one read.",
                    "- Writes are limited to the `origin` account key."
                  ]
                },
                {
                  "name": "set_payee",
                  "fields": [
                    {
                      "name": "payee",
                      "type": 106,
                      "typeName": "RewardDestination<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "(Re-)set the payment target for a controller.",
                    "",
                    "Effects will be felt instantly (as soon as this function is completed successfully).",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                    "",
                    "## Complexity",
                    "- O(1)",
                    "- Independent of the arguments. Insignificant complexity.",
                    "- Contains a limited number of reads.",
                    "- Writes are limited to the `origin` account key.",
                    "---------"
                  ]
                },
                {
                  "name": "set_controller",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "(Re-)sets the controller of a stash to the stash itself. This function previously",
                    "accepted a `controller` argument to set the controller to an account other than the",
                    "stash itself. This functionality has now been removed, now only setting the controller",
                    "to the stash, if it is not already.",
                    "",
                    "Effects will be felt instantly (as soon as this function is completed successfully).",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                    "",
                    "## Complexity",
                    "O(1)",
                    "- Independent of the arguments. Insignificant complexity.",
                    "- Contains a limited number of reads.",
                    "- Writes are limited to the `origin` account key."
                  ]
                },
                {
                  "name": "set_validator_count",
                  "fields": [
                    {
                      "name": "new",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Sets the ideal number of validators.",
                    "",
                    "The dispatch origin must be Root.",
                    "",
                    "## Complexity",
                    "O(1)"
                  ]
                },
                {
                  "name": "increase_validator_count",
                  "fields": [
                    {
                      "name": "additional",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Increments the ideal number of validators upto maximum of",
                    "`ElectionProviderBase::MaxWinners`.",
                    "",
                    "The dispatch origin must be Root.",
                    "",
                    "## Complexity",
                    "Same as [`Self::set_validator_count`]."
                  ]
                },
                {
                  "name": "scale_validator_count",
                  "fields": [
                    {
                      "name": "factor",
                      "type": 108,
                      "typeName": "Percent",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Scale up the ideal number of validators by a factor upto maximum of",
                    "`ElectionProviderBase::MaxWinners`.",
                    "",
                    "The dispatch origin must be Root.",
                    "",
                    "## Complexity",
                    "Same as [`Self::set_validator_count`]."
                  ]
                },
                {
                  "name": "force_no_eras",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Force there to be no new eras indefinitely.",
                    "",
                    "The dispatch origin must be Root.",
                    "",
                    "# Warning",
                    "",
                    "The election process starts multiple blocks before the end of the era.",
                    "Thus the election process may be ongoing when this is called. In this case the",
                    "election will continue until the next era is triggered.",
                    "",
                    "## Complexity",
                    "- No arguments.",
                    "- Weight: O(1)"
                  ]
                },
                {
                  "name": "force_new_era",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "Force there to be a new era at the end of the next session. After this, it will be",
                    "reset to normal (non-forced) behaviour.",
                    "",
                    "The dispatch origin must be Root.",
                    "",
                    "# Warning",
                    "",
                    "The election process starts multiple blocks before the end of the era.",
                    "If this is called just before a new era is triggered, the election process may not",
                    "have enough blocks to get a result.",
                    "",
                    "## Complexity",
                    "- No arguments.",
                    "- Weight: O(1)"
                  ]
                },
                {
                  "name": "set_invulnerables",
                  "fields": [
                    {
                      "name": "invulnerables",
                      "type": 104,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Set the validators who cannot be slashed (if any).",
                    "",
                    "The dispatch origin must be Root."
                  ]
                },
                {
                  "name": "force_unstake",
                  "fields": [
                    {
                      "name": "stash",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "num_slashing_spans",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Force a current staker to become completely unstaked, immediately.",
                    "",
                    "The dispatch origin must be Root."
                  ]
                },
                {
                  "name": "force_new_era_always",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "Force there to be a new era at the end of sessions indefinitely.",
                    "",
                    "The dispatch origin must be Root.",
                    "",
                    "# Warning",
                    "",
                    "The election process starts multiple blocks before the end of the era.",
                    "If this is called just before a new era is triggered, the election process may not",
                    "have enough blocks to get a result."
                  ]
                },
                {
                  "name": "cancel_deferred_slash",
                  "fields": [
                    {
                      "name": "era",
                      "type": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    },
                    {
                      "name": "slash_indices",
                      "type": 109,
                      "typeName": "Vec<u32>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": [
                    "Cancel enactment of a deferred slash.",
                    "",
                    "Can be called by the `T::AdminOrigin`.",
                    "",
                    "Parameters: era and indices of the slashes for that era to kill."
                  ]
                },
                {
                  "name": "payout_stakers",
                  "fields": [
                    {
                      "name": "validator_stash",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "era",
                      "type": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "Pay out all the stakers behind a single validator for a single era.",
                    "",
                    "- `validator_stash` is the stash account of the validator. Their nominators, up to",
                    "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
                    "- `era` may be any era between `[current_era - history_depth; current_era]`.",
                    "",
                    "The origin of this call must be _Signed_. Any account can call this function, even if",
                    "it is not one of the stakers.",
                    "",
                    "## Complexity",
                    "- At most O(MaxNominatorRewardedPerValidator)."
                  ]
                },
                {
                  "name": "rebond",
                  "fields": [
                    {
                      "name": "value",
                      "type": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": [
                    "Rebond a portion of the stash scheduled to be unlocked.",
                    "",
                    "The dispatch origin must be signed by the controller.",
                    "",
                    "## Complexity",
                    "- Time complexity: O(L), where L is unlocking chunks",
                    "- Bounded by `MaxUnlockingChunks`."
                  ]
                },
                {
                  "name": "reap_stash",
                  "fields": [
                    {
                      "name": "stash",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "num_slashing_spans",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": [
                    "Remove all data structures concerning a staker/stash once it is at a state where it can",
                    "be considered `dust` in the staking system. The requirements are:",
                    "",
                    "1. the `total_balance` of the stash is below existential deposit.",
                    "2. or, the `ledger.total` of the stash is below existential deposit.",
                    "",
                    "The former can happen in cases like a slash; the latter when a fully unbonded account",
                    "is still receiving staking rewards in `RewardDestination::Staked`.",
                    "",
                    "It can be called by anyone, as long as `stash` meets the above requirements.",
                    "",
                    "Refunds the transaction fees upon successful execution."
                  ]
                },
                {
                  "name": "kick",
                  "fields": [
                    {
                      "name": "who",
                      "type": 107,
                      "typeName": "Vec<AccountIdLookupOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": [
                    "Remove the given nominations from the calling validator.",
                    "",
                    "Effects will be felt at the beginning of the next era.",
                    "",
                    "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                    "",
                    "- `who`: A list of nominator stash accounts who are nominating this validator which",
                    "  should no longer be nominating this validator.",
                    "",
                    "Note: Making this call only makes sense if you first set the validator preferences to",
                    "block any further nominations."
                  ]
                },
                {
                  "name": "set_staking_configs",
                  "fields": [
                    {
                      "name": "min_nominator_bond",
                      "type": 110,
                      "typeName": "ConfigOp<BalanceOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "min_validator_bond",
                      "type": 110,
                      "typeName": "ConfigOp<BalanceOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "max_nominator_count",
                      "type": 111,
                      "typeName": "ConfigOp<u32>",
                      "docs": []
                    },
                    {
                      "name": "max_validator_count",
                      "type": 111,
                      "typeName": "ConfigOp<u32>",
                      "docs": []
                    },
                    {
                      "name": "chill_threshold",
                      "type": 112,
                      "typeName": "ConfigOp<Percent>",
                      "docs": []
                    },
                    {
                      "name": "min_commission",
                      "type": 113,
                      "typeName": "ConfigOp<Perbill>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": [
                    "Update the various staking configurations .",
                    "",
                    "* `min_nominator_bond`: The minimum active bond needed to be a nominator.",
                    "* `min_validator_bond`: The minimum active bond needed to be a validator.",
                    "* `max_nominator_count`: The max number of users who can be a nominator at once. When",
                    "  set to `None`, no limit is enforced.",
                    "* `max_validator_count`: The max number of users who can be a validator at once. When",
                    "  set to `None`, no limit is enforced.",
                    "* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which",
                    "  should be filled in order for the `chill_other` transaction to work.",
                    "* `min_commission`: The minimum amount of commission that each validators must maintain.",
                    "  This is checked only upon calling `validate`. Existing validators are not affected.",
                    "",
                    "RuntimeOrigin must be Root to call this function.",
                    "",
                    "NOTE: Existing nominators and validators will not be affected by this update.",
                    "to kick people under the new limits, `chill_other` should be called."
                  ]
                },
                {
                  "name": "chill_other",
                  "fields": [
                    {
                      "name": "controller",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": [
                    "Declare a `controller` to stop participating as either a validator or nominator.",
                    "",
                    "Effects will be felt at the beginning of the next era.",
                    "",
                    "The dispatch origin for this call must be _Signed_, but can be called by anyone.",
                    "",
                    "If the caller is the same as the controller being targeted, then no further checks are",
                    "enforced, and this function behaves just like `chill`.",
                    "",
                    "If the caller is different than the controller being targeted, the following conditions",
                    "must be met:",
                    "",
                    "* `controller` must belong to a nominator who has become non-decodable,",
                    "",
                    "Or:",
                    "",
                    "* A `ChillThreshold` must be set and checked which defines how close to the max",
                    "  nominators or validators we must reach before users can start chilling one-another.",
                    "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine",
                    "  how close we are to the threshold.",
                    "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines",
                    "  if this is a person that should be chilled because they have not met the threshold",
                    "  bond required.",
                    "",
                    "This can be helpful if bond requirements are updated, and we need to remove old users",
                    "who do not satisfy these requirements."
                  ]
                },
                {
                  "name": "force_apply_min_commission",
                  "fields": [
                    {
                      "name": "validator_stash",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": [
                    "Force a validator to have at least the minimum commission. This will not affect a",
                    "validator who already has a commission greater than or equal to the minimum. Any account",
                    "can call this."
                  ]
                },
                {
                  "name": "set_min_commission",
                  "fields": [
                    {
                      "name": "new",
                      "type": 41,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": [
                    "Sets the minimum amount of commission that each validators must maintain.",
                    "",
                    "This call has lower privilege requirements than `set_staking_config` and can be called",
                    "by the `T::AdminOrigin`. Root can always call this."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 106,
          "type": {
            "path": [
              "pallet_staking",
              "RewardDestination"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Staked",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Stash",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Controller",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Account",
                  "fields": [
                    {
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "None",
                  "fields": [],
                  "index": 4,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 107,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 100
            },
            "docs": []
          }
        },
        {
          "id": 108,
          "type": {
            "path": [
              "sp_arithmetic",
              "per_things",
              "Percent"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 109,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 4
            },
            "docs": []
          }
        },
        {
          "id": 110,
          "type": {
            "path": [
              "pallet_staking",
              "pallet",
              "pallet",
              "ConfigOp"
            ],
            "params": [
              {
                "name": "T",
                "type": 6
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 111,
          "type": {
            "path": [
              "pallet_staking",
              "pallet",
              "pallet",
              "ConfigOp"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 112,
          "type": {
            "path": [
              "pallet_staking",
              "pallet",
              "pallet",
              "ConfigOp"
            ],
            "params": [
              {
                "name": "T",
                "type": 108
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "type": 108,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 113,
          "type": {
            "path": [
              "pallet_staking",
              "pallet",
              "pallet",
              "ConfigOp"
            ],
            "params": [
              {
                "name": "T",
                "type": 41
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "type": 41,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 114,
          "type": {
            "path": [
              "pallet_session",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "set_keys",
                  "fields": [
                    {
                      "name": "keys",
                      "type": 115,
                      "typeName": "T::Keys",
                      "docs": []
                    },
                    {
                      "name": "proof",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Sets the session key(s) of the function caller to `keys`.",
                    "Allows an account to set its session key prior to becoming a validator.",
                    "This doesn't take effect until the next session.",
                    "",
                    "The dispatch origin of this function must be signed.",
                    "",
                    "## Complexity",
                    "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
                    "  fixed."
                  ]
                },
                {
                  "name": "purge_keys",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Removes any session key(s) of the function caller.",
                    "",
                    "This doesn't take effect until the next session.",
                    "",
                    "The dispatch origin of this function must be Signed and the account must be either be",
                    "convertible to a validator ID using the chain's typical addressing system (this usually",
                    "means being a controller account) or directly convertible into a validator ID (which",
                    "usually means being a stash account).",
                    "",
                    "## Complexity",
                    "- `O(1)` in number of key types. Actual cost depends on the number of length of",
                    "  `T::Keys::key_ids()` which is fixed."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 115,
          "type": {
            "path": [
              "polkadot_runtime",
              "SessionKeys"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "grandpa",
                  "type": 52,
                  "typeName": "<Grandpa as $crate::BoundToRuntimeAppPublic>::Public",
                  "docs": []
                },
                {
                  "name": "babe",
                  "type": 92,
                  "typeName": "<Babe as $crate::BoundToRuntimeAppPublic>::Public",
                  "docs": []
                },
                {
                  "name": "im_online",
                  "type": 55,
                  "typeName": "<ImOnline as $crate::BoundToRuntimeAppPublic>::Public",
                  "docs": []
                },
                {
                  "name": "para_validator",
                  "type": 116,
                  "typeName": "<Initializer as $crate::BoundToRuntimeAppPublic>::Public",
                  "docs": []
                },
                {
                  "name": "para_assignment",
                  "type": 117,
                  "typeName": "<ParaSessionInfo as $crate::BoundToRuntimeAppPublic>::Public",
                  "docs": []
                },
                {
                  "name": "authority_discovery",
                  "type": 118,
                  "typeName": "<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 116,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "validator_app",
              "Public"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 56,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 117,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "assignment_app",
              "Public"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 56,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 118,
          "type": {
            "path": [
              "sp_authority_discovery",
              "app",
              "Public"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 56,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 119,
          "type": {
            "path": [
              "pallet_grandpa",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "report_equivocation",
                  "fields": [
                    {
                      "name": "equivocation_proof",
                      "type": 120,
                      "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "key_owner_proof",
                      "type": 94,
                      "typeName": "T::KeyOwnerProof",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Report voter equivocation/misbehavior. This method will verify the",
                    "equivocation proof and validate the given key ownership proof",
                    "against the extracted offender. If both are valid, the offence",
                    "will be reported."
                  ]
                },
                {
                  "name": "report_equivocation_unsigned",
                  "fields": [
                    {
                      "name": "equivocation_proof",
                      "type": 120,
                      "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "key_owner_proof",
                      "type": 94,
                      "typeName": "T::KeyOwnerProof",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Report voter equivocation/misbehavior. This method will verify the",
                    "equivocation proof and validate the given key ownership proof",
                    "against the extracted offender. If both are valid, the offence",
                    "will be reported.",
                    "",
                    "This extrinsic must be called unsigned and it is expected that only",
                    "block authors will call it (validated in `ValidateUnsigned`), as such",
                    "if the block author is defined it will be defined as the equivocation",
                    "reporter."
                  ]
                },
                {
                  "name": "note_stalled",
                  "fields": [
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "best_finalized_block_number",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Note that the current authority set of the GRANDPA finality gadget has stalled.",
                    "",
                    "This will trigger a forced authority set change at the beginning of the next session, to",
                    "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume",
                    "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.",
                    "The block production rate (which may be slowed down because of finality lagging) should",
                    "be taken into account when choosing the `delay`. The GRANDPA voters based on the new",
                    "authority will start voting on top of `best_finalized_block_number` for new finalized",
                    "blocks. `best_finalized_block_number` should be the highest of the latest finalized",
                    "block of all validators of the new authority set.",
                    "",
                    "Only callable by root."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 120,
          "type": {
            "path": [
              "sp_consensus_grandpa",
              "EquivocationProof"
            ],
            "params": [
              {
                "name": "H",
                "type": 12
              },
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "set_id",
                  "type": 11,
                  "typeName": "SetId",
                  "docs": []
                },
                {
                  "name": "equivocation",
                  "type": 121,
                  "typeName": "Equivocation<H, N>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 121,
          "type": {
            "path": [
              "sp_consensus_grandpa",
              "Equivocation"
            ],
            "params": [
              {
                "name": "H",
                "type": 12
              },
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Prevote",
                  "fields": [
                    {
                      "type": 122,
                      "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Precommit",
                  "fields": [
                    {
                      "type": 128,
                      "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 122,
          "type": {
            "path": [
              "finality_grandpa",
              "Equivocation"
            ],
            "params": [
              {
                "name": "Id",
                "type": 52
              },
              {
                "name": "V",
                "type": 123
              },
              {
                "name": "S",
                "type": 124
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "round_number",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "identity",
                  "type": 52,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "first",
                  "type": 127,
                  "typeName": "(V, S)",
                  "docs": []
                },
                {
                  "name": "second",
                  "type": 127,
                  "typeName": "(V, S)",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 123,
          "type": {
            "path": [
              "finality_grandpa",
              "Prevote"
            ],
            "params": [
              {
                "name": "H",
                "type": 12
              },
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "target_hash",
                  "type": 12,
                  "typeName": "H",
                  "docs": []
                },
                {
                  "name": "target_number",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 124,
          "type": {
            "path": [
              "sp_consensus_grandpa",
              "app",
              "Signature"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 125,
                  "typeName": "ed25519::Signature",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 125,
          "type": {
            "path": [
              "sp_core",
              "ed25519",
              "Signature"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 126,
                  "typeName": "[u8; 64]",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 126,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 64,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 127,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                123,
                124
              ]
            },
            "docs": []
          }
        },
        {
          "id": 128,
          "type": {
            "path": [
              "finality_grandpa",
              "Equivocation"
            ],
            "params": [
              {
                "name": "Id",
                "type": 52
              },
              {
                "name": "V",
                "type": 129
              },
              {
                "name": "S",
                "type": 124
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "round_number",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "identity",
                  "type": 52,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "first",
                  "type": 130,
                  "typeName": "(V, S)",
                  "docs": []
                },
                {
                  "name": "second",
                  "type": 130,
                  "typeName": "(V, S)",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 129,
          "type": {
            "path": [
              "finality_grandpa",
              "Precommit"
            ],
            "params": [
              {
                "name": "H",
                "type": 12
              },
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "target_hash",
                  "type": 12,
                  "typeName": "H",
                  "docs": []
                },
                {
                  "name": "target_number",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 130,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                129,
                124
              ]
            },
            "docs": []
          }
        },
        {
          "id": 131,
          "type": {
            "path": [
              "pallet_im_online",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "heartbeat",
                  "fields": [
                    {
                      "name": "heartbeat",
                      "type": 132,
                      "typeName": "Heartbeat<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "signature",
                      "type": 137,
                      "typeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "## Complexity:",
                    "- `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is length of",
                    "  `heartbeat.network_state.external_address`",
                    "  - `O(K)`: decoding of length `K`",
                    "  - `O(E)`: decoding/encoding of length `E`"
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 132,
          "type": {
            "path": [
              "pallet_im_online",
              "Heartbeat"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "block_number",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "network_state",
                  "type": 133,
                  "typeName": "OpaqueNetworkState",
                  "docs": []
                },
                {
                  "name": "session_index",
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "authority_index",
                  "type": 4,
                  "typeName": "AuthIndex",
                  "docs": []
                },
                {
                  "name": "validators_len",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 133,
          "type": {
            "path": [
              "sp_core",
              "offchain",
              "OpaqueNetworkState"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "peer_id",
                  "type": 134,
                  "typeName": "OpaquePeerId",
                  "docs": []
                },
                {
                  "name": "external_addresses",
                  "type": 135,
                  "typeName": "Vec<OpaqueMultiaddr>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 134,
          "type": {
            "path": [
              "sp_core",
              "OpaquePeerId"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 135,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 136
            },
            "docs": []
          }
        },
        {
          "id": 136,
          "type": {
            "path": [
              "sp_core",
              "offchain",
              "OpaqueMultiaddr"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 137,
          "type": {
            "path": [
              "pallet_im_online",
              "sr25519",
              "app_sr25519",
              "Signature"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 138,
                  "typeName": "sr25519::Signature",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 138,
          "type": {
            "path": [
              "sp_core",
              "sr25519",
              "Signature"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 126,
                  "typeName": "[u8; 64]",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 139,
          "type": {
            "path": [
              "pallet_democracy",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "propose",
                  "fields": [
                    {
                      "name": "proposal",
                      "type": 78,
                      "typeName": "BoundedCallOf<T>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Propose a sensitive action to be taken.",
                    "",
                    "The dispatch origin of this call must be _Signed_ and the sender must",
                    "have funds to cover the deposit.",
                    "",
                    "- `proposal_hash`: The hash of the proposal preimage.",
                    "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
                    "",
                    "Emits `Proposed`."
                  ]
                },
                {
                  "name": "second",
                  "fields": [
                    {
                      "name": "proposal",
                      "type": 91,
                      "typeName": "PropIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Signals agreement with a particular proposal.",
                    "",
                    "The dispatch origin of this call must be _Signed_ and the sender",
                    "must have funds to cover the deposit, equal to the original deposit.",
                    "",
                    "- `proposal`: The index of the proposal to second."
                  ]
                },
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "ref_index",
                      "type": 91,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    },
                    {
                      "name": "vote",
                      "type": 65,
                      "typeName": "AccountVote<BalanceOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                    "otherwise it is a vote to keep the status quo.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `ref_index`: The index of the referendum to vote for.",
                    "- `vote`: The vote configuration."
                  ]
                },
                {
                  "name": "emergency_cancel",
                  "fields": [
                    {
                      "name": "ref_index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                    "referendum.",
                    "",
                    "The dispatch origin of this call must be `CancellationOrigin`.",
                    "",
                    "-`ref_index`: The index of the referendum to cancel.",
                    "",
                    "Weight: `O(1)`."
                  ]
                },
                {
                  "name": "external_propose",
                  "fields": [
                    {
                      "name": "proposal",
                      "type": 78,
                      "typeName": "BoundedCallOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Schedule a referendum to be tabled once it is legal to schedule an external",
                    "referendum.",
                    "",
                    "The dispatch origin of this call must be `ExternalOrigin`.",
                    "",
                    "- `proposal_hash`: The preimage hash of the proposal."
                  ]
                },
                {
                  "name": "external_propose_majority",
                  "fields": [
                    {
                      "name": "proposal",
                      "type": 78,
                      "typeName": "BoundedCallOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                    "an external referendum.",
                    "",
                    "The dispatch of this call must be `ExternalMajorityOrigin`.",
                    "",
                    "- `proposal_hash`: The preimage hash of the proposal.",
                    "",
                    "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                    "pre-scheduled `external_propose` call.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "external_propose_default",
                  "fields": [
                    {
                      "name": "proposal",
                      "type": 78,
                      "typeName": "BoundedCallOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                    "schedule an external referendum.",
                    "",
                    "The dispatch of this call must be `ExternalDefaultOrigin`.",
                    "",
                    "- `proposal_hash`: The preimage hash of the proposal.",
                    "",
                    "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                    "pre-scheduled `external_propose` call.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "fast_track",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "voting_period",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Schedule the currently externally-proposed majority-carries referendum to be tabled",
                    "immediately. If there is no externally-proposed referendum currently, or if there is one",
                    "but it is not a majority-carries referendum then it fails.",
                    "",
                    "The dispatch of this call must be `FastTrackOrigin`.",
                    "",
                    "- `proposal_hash`: The hash of the current external proposal.",
                    "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
                    "\tMust be always greater than zero.",
                    "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.",
                    "- `delay`: The number of block after voting has ended in approval and this should be",
                    "  enacted. This doesn't have a minimum amount.",
                    "",
                    "Emits `Started`.",
                    "",
                    "Weight: `O(1)`"
                  ]
                },
                {
                  "name": "veto_external",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "H256",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Veto and blacklist the external proposal hash.",
                    "",
                    "The dispatch origin of this call must be `VetoOrigin`.",
                    "",
                    "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
                    "",
                    "Emits `Vetoed`.",
                    "",
                    "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
                  ]
                },
                {
                  "name": "cancel_referendum",
                  "fields": [
                    {
                      "name": "ref_index",
                      "type": 91,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Remove a referendum.",
                    "",
                    "The dispatch origin of this call must be _Root_.",
                    "",
                    "- `ref_index`: The index of the referendum to cancel.",
                    "",
                    "# Weight: `O(1)`."
                  ]
                },
                {
                  "name": "delegate",
                  "fields": [
                    {
                      "name": "to",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "conviction",
                      "type": 140,
                      "typeName": "Conviction",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Delegate the voting power (with some given conviction) of the sending account.",
                    "",
                    "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                    "time appropriate for the conviction's lock period.",
                    "",
                    "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                    "  - be delegating already; or",
                    "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                    "    through `reap_vote` or `unvote`).",
                    "",
                    "- `to`: The account whose voting the `target` account's voting power will follow.",
                    "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                    "  account is undelegated, the funds will be locked for the corresponding period.",
                    "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                    "  be more than the account's current balance.",
                    "",
                    "Emits `Delegated`.",
                    "",
                    "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                    "  voted on. Weight is charged as if maximum votes."
                  ]
                },
                {
                  "name": "undelegate",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "Undelegate the voting power of the sending account.",
                    "",
                    "Tokens may be unlocked following once an amount of time consistent with the lock period",
                    "of the conviction with which the delegation was issued.",
                    "",
                    "The dispatch origin of this call must be _Signed_ and the signing account must be",
                    "currently delegating.",
                    "",
                    "Emits `Undelegated`.",
                    "",
                    "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                    "  voted on. Weight is charged as if maximum votes."
                  ]
                },
                {
                  "name": "clear_public_proposals",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Clears all public proposals.",
                    "",
                    "The dispatch origin of this call must be _Root_.",
                    "",
                    "Weight: `O(1)`."
                  ]
                },
                {
                  "name": "unlock",
                  "fields": [
                    {
                      "name": "target",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "Unlock tokens that have an expired lock.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `target`: The account to remove the lock on.",
                    "",
                    "Weight: `O(R)` with R number of vote of target."
                  ]
                },
                {
                  "name": "remove_vote",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Remove a vote for a referendum.",
                    "",
                    "If:",
                    "- the referendum was cancelled, or",
                    "- the referendum is ongoing, or",
                    "- the referendum has ended such that",
                    "  - the vote of the account was in opposition to the result; or",
                    "  - there was no conviction to the account's vote; or",
                    "  - the account made a split vote",
                    "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                    "funds being available.",
                    "",
                    "If, however, the referendum has ended and:",
                    "- it finished corresponding to the vote of the account, and",
                    "- the account made a standard vote with conviction, and",
                    "- the lock period of the conviction is not over",
                    "...then the lock will be aggregated into the overall account's lock, which may involve",
                    "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                    "of both the amount locked and the time is it locked for).",
                    "",
                    "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                    "registered for referendum `index`.",
                    "",
                    "- `index`: The index of referendum of the vote to be removed.",
                    "",
                    "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                    "  Weight is calculated for the maximum number of vote."
                  ]
                },
                {
                  "name": "remove_other_vote",
                  "fields": [
                    {
                      "name": "target",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Remove a vote for a referendum.",
                    "",
                    "If the `target` is equal to the signer, then this function is exactly equivalent to",
                    "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                    "either because the referendum was cancelled, because the voter lost the referendum or",
                    "because the conviction period is over.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `target`: The account of the vote to be removed; this account must have voted for",
                    "  referendum `index`.",
                    "- `index`: The index of referendum of the vote to be removed.",
                    "",
                    "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                    "  Weight is calculated for the maximum number of vote."
                  ]
                },
                {
                  "name": "blacklist",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "name": "maybe_ref_index",
                      "type": 141,
                      "typeName": "Option<ReferendumIndex>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": [
                    "Permanently place a proposal into the blacklist. This prevents it from ever being",
                    "proposed again.",
                    "",
                    "If called on a queued public or external proposal, then this will result in it being",
                    "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
                    "then it will be cancelled.",
                    "",
                    "The dispatch origin of this call must be `BlacklistOrigin`.",
                    "",
                    "- `proposal_hash`: The proposal hash to blacklist permanently.",
                    "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
                    "cancelled.",
                    "",
                    "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
                    "  reasonable value)."
                  ]
                },
                {
                  "name": "cancel_proposal",
                  "fields": [
                    {
                      "name": "prop_index",
                      "type": 91,
                      "typeName": "PropIndex",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": [
                    "Remove a proposal.",
                    "",
                    "The dispatch origin of this call must be `CancelProposalOrigin`.",
                    "",
                    "- `prop_index`: The index of the proposal to cancel.",
                    "",
                    "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
                  ]
                },
                {
                  "name": "set_metadata",
                  "fields": [
                    {
                      "name": "owner",
                      "type": 67,
                      "typeName": "MetadataOwner",
                      "docs": []
                    },
                    {
                      "name": "maybe_hash",
                      "type": 142,
                      "typeName": "Option<PreimageHash>",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "Set or clear a metadata of a proposal or a referendum.",
                    "",
                    "Parameters:",
                    "- `origin`: Must correspond to the `MetadataOwner`.",
                    "    - `ExternalOrigin` for an external proposal with the `SuperMajorityApprove`",
                    "      threshold.",
                    "    - `ExternalDefaultOrigin` for an external proposal with the `SuperMajorityAgainst`",
                    "      threshold.",
                    "    - `ExternalMajorityOrigin` for an external proposal with the `SimpleMajority`",
                    "      threshold.",
                    "    - `Signed` by a creator for a public proposal.",
                    "    - `Signed` to clear a metadata for a finished referendum.",
                    "    - `Root` to set a metadata for an ongoing referendum.",
                    "- `owner`: an identifier of a metadata owner.",
                    "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 140,
          "type": {
            "path": [
              "pallet_democracy",
              "conviction",
              "Conviction"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Locked1x",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Locked2x",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Locked3x",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Locked4x",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Locked5x",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Locked6x",
                  "fields": [],
                  "index": 6,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 141,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 4,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 142,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 12
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 12,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 143,
          "type": {
            "path": [
              "pallet_collective",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "set_members",
                  "fields": [
                    {
                      "name": "new_members",
                      "type": 104,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "prime",
                      "type": 144,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "old_count",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the collective's membership.",
                    "",
                    "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                    "- `prime`: The prime member whose vote sets the default.",
                    "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                    "  weight estimation.",
                    "",
                    "The dispatch of this call must be `SetMembersOrigin`.",
                    "",
                    "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                    "      the weight estimations rely on it to estimate dispatchable weight.",
                    "",
                    "# WARNING:",
                    "",
                    "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                    "implementation of the trait [`ChangeMembers`].",
                    "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                    "with other logic managing the member set.",
                    "",
                    "## Complexity:",
                    "- `O(MP + N)` where:",
                    "  - `M` old-members-count (code- and governance-bounded)",
                    "  - `N` new-members-count (code- and governance-bounded)",
                    "  - `P` proposals-count (code-bounded)"
                  ]
                },
                {
                  "name": "execute",
                  "fields": [
                    {
                      "name": "proposal",
                      "type": 79,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Dispatch a proposal from a member using the `Member` origin.",
                    "",
                    "Origin must be a member of the collective.",
                    "",
                    "## Complexity:",
                    "- `O(B + M + P)` where:",
                    "- `B` is `proposal` size in bytes (length-fee-bounded)",
                    "- `M` members-count (code-bounded)",
                    "- `P` complexity of dispatching `proposal`"
                  ]
                },
                {
                  "name": "propose",
                  "fields": [
                    {
                      "name": "threshold",
                      "type": 91,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "proposal",
                      "type": 79,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Add a new proposal to either be voted on or executed directly.",
                    "",
                    "Requires the sender to be member.",
                    "",
                    "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                    "or put up for voting.",
                    "",
                    "## Complexity",
                    "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - branching is influenced by `threshold` where:",
                    "    - `P1` is proposal execution complexity (`threshold < 2`)",
                    "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"
                  ]
                },
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "proposal",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 91,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "approve",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Add an aye or nay vote for the sender to the given proposal.",
                    "",
                    "Requires the sender to be a member.",
                    "",
                    "Transaction fees will be waived if the member is voting on any particular proposal",
                    "for the first time and the call is successful. Subsequent vote changes will charge a",
                    "fee.",
                    "## Complexity",
                    "- `O(M)` where `M` is members-count (code- and governance-bounded)"
                  ]
                },
                {
                  "name": "disapprove_proposal",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                    "state.",
                    "",
                    "Must be called by the Root origin.",
                    "",
                    "Parameters:",
                    "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                    "",
                    "## Complexity",
                    "O(P) where P is the number of max proposals"
                  ]
                },
                {
                  "name": "close",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 91,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "proposal_weight_bound",
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Close a vote that is either approved, disapproved or whose voting period has ended.",
                    "",
                    "May be called by any signed account in order to finish voting and close the proposal.",
                    "",
                    "If called before the end of the voting period it will only close the vote if it is",
                    "has enough votes to be approved or disapproved.",
                    "",
                    "If called after the end of the voting period abstentions are counted as rejections",
                    "unless there is a prime member set and the prime member cast an approval.",
                    "",
                    "If the close operation completes successfully with disapproval, the transaction fee will",
                    "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                    "",
                    "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                    "proposal.",
                    "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                    "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                    "",
                    "## Complexity",
                    "- `O(B + M + P1 + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - `P1` is the complexity of `proposal` preimage.",
                    "  - `P2` is proposal-count (code-bounded)"
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 144,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 0,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 145,
          "type": {
            "path": [
              "pallet_collective",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "set_members",
                  "fields": [
                    {
                      "name": "new_members",
                      "type": 104,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "prime",
                      "type": 144,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "old_count",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the collective's membership.",
                    "",
                    "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                    "- `prime`: The prime member whose vote sets the default.",
                    "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                    "  weight estimation.",
                    "",
                    "The dispatch of this call must be `SetMembersOrigin`.",
                    "",
                    "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                    "      the weight estimations rely on it to estimate dispatchable weight.",
                    "",
                    "# WARNING:",
                    "",
                    "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                    "implementation of the trait [`ChangeMembers`].",
                    "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                    "with other logic managing the member set.",
                    "",
                    "## Complexity:",
                    "- `O(MP + N)` where:",
                    "  - `M` old-members-count (code- and governance-bounded)",
                    "  - `N` new-members-count (code- and governance-bounded)",
                    "  - `P` proposals-count (code-bounded)"
                  ]
                },
                {
                  "name": "execute",
                  "fields": [
                    {
                      "name": "proposal",
                      "type": 79,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Dispatch a proposal from a member using the `Member` origin.",
                    "",
                    "Origin must be a member of the collective.",
                    "",
                    "## Complexity:",
                    "- `O(B + M + P)` where:",
                    "- `B` is `proposal` size in bytes (length-fee-bounded)",
                    "- `M` members-count (code-bounded)",
                    "- `P` complexity of dispatching `proposal`"
                  ]
                },
                {
                  "name": "propose",
                  "fields": [
                    {
                      "name": "threshold",
                      "type": 91,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "proposal",
                      "type": 79,
                      "typeName": "Box<<T as Config<I>>::Proposal>",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Add a new proposal to either be voted on or executed directly.",
                    "",
                    "Requires the sender to be member.",
                    "",
                    "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                    "or put up for voting.",
                    "",
                    "## Complexity",
                    "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - branching is influenced by `threshold` where:",
                    "    - `P1` is proposal execution complexity (`threshold < 2`)",
                    "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"
                  ]
                },
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "proposal",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 91,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "approve",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Add an aye or nay vote for the sender to the given proposal.",
                    "",
                    "Requires the sender to be a member.",
                    "",
                    "Transaction fees will be waived if the member is voting on any particular proposal",
                    "for the first time and the call is successful. Subsequent vote changes will charge a",
                    "fee.",
                    "## Complexity",
                    "- `O(M)` where `M` is members-count (code- and governance-bounded)"
                  ]
                },
                {
                  "name": "disapprove_proposal",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                    "state.",
                    "",
                    "Must be called by the Root origin.",
                    "",
                    "Parameters:",
                    "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                    "",
                    "## Complexity",
                    "O(P) where P is the number of max proposals"
                  ]
                },
                {
                  "name": "close",
                  "fields": [
                    {
                      "name": "proposal_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 91,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "proposal_weight_bound",
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "length_bound",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Close a vote that is either approved, disapproved or whose voting period has ended.",
                    "",
                    "May be called by any signed account in order to finish voting and close the proposal.",
                    "",
                    "If called before the end of the voting period it will only close the vote if it is",
                    "has enough votes to be approved or disapproved.",
                    "",
                    "If called after the end of the voting period abstentions are counted as rejections",
                    "unless there is a prime member set and the prime member cast an approval.",
                    "",
                    "If the close operation completes successfully with disapproval, the transaction fee will",
                    "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                    "",
                    "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                    "proposal.",
                    "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                    "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                    "",
                    "## Complexity",
                    "- `O(B + M + P1 + P2)` where:",
                    "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                    "  - `M` is members-count (code- and governance-bounded)",
                    "  - `P1` is the complexity of `proposal` preimage.",
                    "  - `P2` is proposal-count (code-bounded)"
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 146,
          "type": {
            "path": [
              "pallet_elections_phragmen",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "votes",
                      "type": 104,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Vote for a set of candidates for the upcoming round of election. This can be called to",
                    "set the initial votes, or update already existing votes.",
                    "",
                    "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is",
                    "reserved. The deposit is based on the number of votes and can be updated over time.",
                    "",
                    "The `votes` should:",
                    "  - not be empty.",
                    "  - be less than the number of possible candidates. Note that all current members and",
                    "    runners-up are also automatically candidates for the next round.",
                    "",
                    "If `value` is more than `who`'s free balance, then the maximum of the two is used.",
                    "",
                    "The dispatch origin of this call must be signed.",
                    "",
                    "### Warning",
                    "",
                    "It is the responsibility of the caller to **NOT** place all of their balance into the",
                    "lock and keep some for further operations."
                  ]
                },
                {
                  "name": "remove_voter",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Remove `origin` as a voter.",
                    "",
                    "This removes the lock and returns the deposit.",
                    "",
                    "The dispatch origin of this call must be signed and be a voter."
                  ]
                },
                {
                  "name": "submit_candidacy",
                  "fields": [
                    {
                      "name": "candidate_count",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Submit oneself for candidacy. A fixed amount of deposit is recorded.",
                    "",
                    "All candidates are wiped at the end of the term. They either become a member/runner-up,",
                    "or leave the system while their deposit is slashed.",
                    "",
                    "The dispatch origin of this call must be signed.",
                    "",
                    "### Warning",
                    "",
                    "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]",
                    "to get their deposit back. Losing the spot in an election will always lead to a slash.",
                    "",
                    "The number of current candidates must be provided as witness data.",
                    "## Complexity",
                    "O(C + log(C)) where C is candidate_count."
                  ]
                },
                {
                  "name": "renounce_candidacy",
                  "fields": [
                    {
                      "name": "renouncing",
                      "type": 147,
                      "typeName": "Renouncing",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Renounce one's intention to be a candidate for the next election round. 3 potential",
                    "outcomes exist:",
                    "",
                    "- `origin` is a candidate and not elected in any set. In this case, the deposit is",
                    "  unreserved, returned and origin is removed as a candidate.",
                    "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and",
                    "  origin is removed as a runner-up.",
                    "- `origin` is a current member. In this case, the deposit is unreserved and origin is",
                    "  removed as a member, consequently not being a candidate for the next round anymore.",
                    "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they",
                    "  are immediately used. If the prime is renouncing, then no prime will exist until the",
                    "  next round.",
                    "",
                    "The dispatch origin of this call must be signed, and have one of the above roles.",
                    "The type of renouncing must be provided as witness data.",
                    "",
                    "## Complexity",
                    "  - Renouncing::Candidate(count): O(count + log(count))",
                    "  - Renouncing::Member: O(1)",
                    "  - Renouncing::RunnerUp: O(1)"
                  ]
                },
                {
                  "name": "remove_member",
                  "fields": [
                    {
                      "name": "who",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "slash_bond",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "rerun_election",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Remove a particular member from the set. This is effective immediately and the bond of",
                    "the outgoing member is slashed.",
                    "",
                    "If a runner-up is available, then the best runner-up will be removed and replaces the",
                    "outgoing member. Otherwise, if `rerun_election` is `true`, a new phragmen election is",
                    "started, else, nothing happens.",
                    "",
                    "If `slash_bond` is set to true, the bond of the member being removed is slashed. Else,",
                    "it is returned.",
                    "",
                    "The dispatch origin of this call must be root.",
                    "",
                    "Note that this does not affect the designated block number of the next election.",
                    "",
                    "## Complexity",
                    "- Check details of remove_and_replace_member() and do_phragmen()."
                  ]
                },
                {
                  "name": "clean_defunct_voters",
                  "fields": [
                    {
                      "name": "num_voters",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "num_defunct",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The",
                    "deposit of the removed voters are returned.",
                    "",
                    "This is an root function to be used only for cleaning the state.",
                    "",
                    "The dispatch origin of this call must be root.",
                    "",
                    "## Complexity",
                    "- Check is_defunct_voter() details."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 147,
          "type": {
            "path": [
              "pallet_elections_phragmen",
              "Renouncing"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Member",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "RunnerUp",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Candidate",
                  "fields": [
                    {
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 148,
          "type": {
            "path": [
              "pallet_membership",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "add_member",
                  "fields": [
                    {
                      "name": "who",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Add a member `who` to the set.",
                    "",
                    "May only be called from `T::AddOrigin`."
                  ]
                },
                {
                  "name": "remove_member",
                  "fields": [
                    {
                      "name": "who",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Remove a member `who` from the set.",
                    "",
                    "May only be called from `T::RemoveOrigin`."
                  ]
                },
                {
                  "name": "swap_member",
                  "fields": [
                    {
                      "name": "remove",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "add",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Swap out one member `remove` for another `add`.",
                    "",
                    "May only be called from `T::SwapOrigin`.",
                    "",
                    "Prime membership is *not* passed from `remove` to `add`, if extant."
                  ]
                },
                {
                  "name": "reset_members",
                  "fields": [
                    {
                      "name": "members",
                      "type": 104,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Change the membership to a new set, disregarding the existing membership. Be nice and",
                    "pass `members` pre-sorted.",
                    "",
                    "May only be called from `T::ResetOrigin`."
                  ]
                },
                {
                  "name": "change_key",
                  "fields": [
                    {
                      "name": "new",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Swap out the sending member for some other key `new`.",
                    "",
                    "May only be called from `Signed` origin of a current member.",
                    "",
                    "Prime membership is passed from the origin account to `new`, if extant."
                  ]
                },
                {
                  "name": "set_prime",
                  "fields": [
                    {
                      "name": "who",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Set the prime member. Must be a current member.",
                    "",
                    "May only be called from `T::PrimeOrigin`."
                  ]
                },
                {
                  "name": "clear_prime",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Remove the prime member if it exists.",
                    "",
                    "May only be called from `T::PrimeOrigin`."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 149,
          "type": {
            "path": [
              "pallet_treasury",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "propose_spend",
                  "fields": [
                    {
                      "name": "value",
                      "type": 60,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Put forward a suggestion for spending. A deposit proportional to the value",
                    "is reserved and slashed if the proposal is rejected. It is returned once the",
                    "proposal is awarded.",
                    "",
                    "## Complexity",
                    "- O(1)"
                  ]
                },
                {
                  "name": "reject_proposal",
                  "fields": [
                    {
                      "name": "proposal_id",
                      "type": 91,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Reject a proposed spend. The original deposit will be slashed.",
                    "",
                    "May only be called from `T::RejectOrigin`.",
                    "",
                    "## Complexity",
                    "- O(1)"
                  ]
                },
                {
                  "name": "approve_proposal",
                  "fields": [
                    {
                      "name": "proposal_id",
                      "type": 91,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                    "and the original deposit will be returned.",
                    "",
                    "May only be called from `T::ApproveOrigin`.",
                    "",
                    "## Complexity",
                    " - O(1)."
                  ]
                },
                {
                  "name": "spend",
                  "fields": [
                    {
                      "name": "amount",
                      "type": 60,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Propose and approve a spend of treasury funds.",
                    "",
                    "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.",
                    "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                    "- `beneficiary`: The destination account for the transfer.",
                    "",
                    "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
                    "beneficiary."
                  ]
                },
                {
                  "name": "remove_approval",
                  "fields": [
                    {
                      "name": "proposal_id",
                      "type": 91,
                      "typeName": "ProposalIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Force a previously approved proposal to be removed from the approval queue.",
                    "The original deposit will no longer be returned.",
                    "",
                    "May only be called from `T::RejectOrigin`.",
                    "- `proposal_id`: The index of a proposal",
                    "",
                    "## Complexity",
                    "- O(A) where `A` is the number of approvals",
                    "",
                    "Errors:",
                    "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,",
                    "i.e., the proposal has not been approved. This could also mean the proposal does not",
                    "exist altogether, thus there is no way it would have been approved in the first place."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 150,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "vote",
                  "fields": [
                    {
                      "name": "poll_index",
                      "type": 91,
                      "typeName": "PollIndexOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "vote",
                      "type": 151,
                      "typeName": "AccountVote<BalanceOf<T, I>>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;",
                    "otherwise it is a vote to keep the status quo.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `poll_index`: The index of the poll to vote for.",
                    "- `vote`: The vote configuration.",
                    "",
                    "Weight: `O(R)` where R is the number of polls the voter has voted on."
                  ]
                },
                {
                  "name": "delegate",
                  "fields": [
                    {
                      "name": "class",
                      "type": 77,
                      "typeName": "ClassOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "conviction",
                      "type": 153,
                      "typeName": "Conviction",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Delegate the voting power (with some given conviction) of the sending account for a",
                    "particular class of polls.",
                    "",
                    "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                    "time appropriate for the conviction's lock period.",
                    "",
                    "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                    "  - be delegating already; or",
                    "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                    "    through `reap_vote` or `unvote`).",
                    "",
                    "- `to`: The account whose voting the `target` account's voting power will follow.",
                    "- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls",
                    "  to this function are required.",
                    "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                    "  account is undelegated, the funds will be locked for the corresponding period.",
                    "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                    "  be more than the account's current balance.",
                    "",
                    "Emits `Delegated`.",
                    "",
                    "Weight: `O(R)` where R is the number of polls the voter delegating to has",
                    "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
                  ]
                },
                {
                  "name": "undelegate",
                  "fields": [
                    {
                      "name": "class",
                      "type": 77,
                      "typeName": "ClassOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Undelegate the voting power of the sending account for a particular class of polls.",
                    "",
                    "Tokens may be unlocked following once an amount of time consistent with the lock period",
                    "of the conviction with which the delegation was issued has passed.",
                    "",
                    "The dispatch origin of this call must be _Signed_ and the signing account must be",
                    "currently delegating.",
                    "",
                    "- `class`: The class of polls to remove the delegation from.",
                    "",
                    "Emits `Undelegated`.",
                    "",
                    "Weight: `O(R)` where R is the number of polls the voter delegating to has",
                    "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
                  ]
                },
                {
                  "name": "unlock",
                  "fields": [
                    {
                      "name": "class",
                      "type": 77,
                      "typeName": "ClassOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Remove the lock caused by prior voting/delegating which has expired within a particular",
                    "class.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `class`: The class of polls to unlock.",
                    "- `target`: The account to remove the lock on.",
                    "",
                    "Weight: `O(R)` with R number of vote of target."
                  ]
                },
                {
                  "name": "remove_vote",
                  "fields": [
                    {
                      "name": "class",
                      "type": 154,
                      "typeName": "Option<ClassOf<T, I>>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "PollIndexOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Remove a vote for a poll.",
                    "",
                    "If:",
                    "- the poll was cancelled, or",
                    "- the poll is ongoing, or",
                    "- the poll has ended such that",
                    "  - the vote of the account was in opposition to the result; or",
                    "  - there was no conviction to the account's vote; or",
                    "  - the account made a split vote",
                    "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                    "funds being available.",
                    "",
                    "If, however, the poll has ended and:",
                    "- it finished corresponding to the vote of the account, and",
                    "- the account made a standard vote with conviction, and",
                    "- the lock period of the conviction is not over",
                    "...then the lock will be aggregated into the overall account's lock, which may involve",
                    "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                    "of both the amount locked and the time is it locked for).",
                    "",
                    "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                    "registered for poll `index`.",
                    "",
                    "- `index`: The index of poll of the vote to be removed.",
                    "- `class`: Optional parameter, if given it indicates the class of the poll. For polls",
                    "  which have finished or are cancelled, this must be `Some`.",
                    "",
                    "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                    "  Weight is calculated for the maximum number of vote."
                  ]
                },
                {
                  "name": "remove_other_vote",
                  "fields": [
                    {
                      "name": "target",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "class",
                      "type": 77,
                      "typeName": "ClassOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "PollIndexOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Remove a vote for a poll.",
                    "",
                    "If the `target` is equal to the signer, then this function is exactly equivalent to",
                    "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                    "either because the poll was cancelled, because the voter lost the poll or",
                    "because the conviction period is over.",
                    "",
                    "The dispatch origin of this call must be _Signed_.",
                    "",
                    "- `target`: The account of the vote to be removed; this account must have voted for poll",
                    "  `index`.",
                    "- `index`: The index of poll of the vote to be removed.",
                    "- `class`: The class of the poll.",
                    "",
                    "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                    "  Weight is calculated for the maximum number of vote."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 151,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "vote",
              "AccountVote"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Standard",
                  "fields": [
                    {
                      "name": "vote",
                      "type": 152,
                      "typeName": "Vote",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Split",
                  "fields": [
                    {
                      "name": "aye",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "nay",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "SplitAbstain",
                  "fields": [
                    {
                      "name": "aye",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "nay",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "abstain",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 152,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "vote",
              "Vote"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 153,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "conviction",
              "Conviction"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Locked1x",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Locked2x",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Locked3x",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Locked4x",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Locked5x",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Locked6x",
                  "fields": [],
                  "index": 6,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 154,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 77
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 77,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 155,
          "type": {
            "path": [
              "pallet_referenda",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "submit",
                  "fields": [
                    {
                      "name": "proposal_origin",
                      "type": 156,
                      "typeName": "Box<PalletsOriginOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "proposal",
                      "type": 78,
                      "typeName": "BoundedCallOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "enactment_moment",
                      "type": 172,
                      "typeName": "DispatchTime<T::BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Propose a referendum on a privileged action.",
                    "",
                    "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
                    "  available.",
                    "- `proposal_origin`: The origin from which the proposal should be executed.",
                    "- `proposal`: The proposal.",
                    "- `enactment_moment`: The moment that the proposal should be enacted.",
                    "",
                    "Emits `Submitted`."
                  ]
                },
                {
                  "name": "place_decision_deposit",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Post the Decision Deposit for a referendum.",
                    "",
                    "- `origin`: must be `Signed` and the account must have funds available for the",
                    "  referendum's track's Decision Deposit.",
                    "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
                    "  posted.",
                    "",
                    "Emits `DecisionDepositPlaced`."
                  ]
                },
                {
                  "name": "refund_decision_deposit",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Refund the Decision Deposit for a closed referendum back to the depositor.",
                    "",
                    "- `origin`: must be `Signed` or `Root`.",
                    "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
                    "  refunded.",
                    "",
                    "Emits `DecisionDepositRefunded`."
                  ]
                },
                {
                  "name": "cancel",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Cancel an ongoing referendum.",
                    "",
                    "- `origin`: must be the `CancelOrigin`.",
                    "- `index`: The index of the referendum to be cancelled.",
                    "",
                    "Emits `Cancelled`."
                  ]
                },
                {
                  "name": "kill",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Cancel an ongoing referendum and slash the deposits.",
                    "",
                    "- `origin`: must be the `KillOrigin`.",
                    "- `index`: The index of the referendum to be cancelled.",
                    "",
                    "Emits `Killed` and `DepositSlashed`."
                  ]
                },
                {
                  "name": "nudge_referendum",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Advance a referendum onto its next logical state. Only used internally.",
                    "",
                    "- `origin`: must be `Root`.",
                    "- `index`: the referendum to be advanced."
                  ]
                },
                {
                  "name": "one_fewer_deciding",
                  "fields": [
                    {
                      "name": "track",
                      "type": 77,
                      "typeName": "TrackIdOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Advance a track onto its next logical state. Only used internally.",
                    "",
                    "- `origin`: must be `Root`.",
                    "- `track`: the track to be advanced.",
                    "",
                    "Action item for when there is now one fewer referendum in the deciding phase and the",
                    "`DecidingCount` is not yet updated. This means that we should either:",
                    "- begin deciding another referendum (and leave `DecidingCount` alone); or",
                    "- decrement `DecidingCount`."
                  ]
                },
                {
                  "name": "refund_submission_deposit",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Refund the Submission Deposit for a closed referendum back to the depositor.",
                    "",
                    "- `origin`: must be `Signed` or `Root`.",
                    "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
                    "  refunded.",
                    "",
                    "Emits `SubmissionDepositRefunded`."
                  ]
                },
                {
                  "name": "set_metadata",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ReferendumIndex",
                      "docs": []
                    },
                    {
                      "name": "maybe_hash",
                      "type": 142,
                      "typeName": "Option<PreimageHash>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Set or clear metadata of a referendum.",
                    "",
                    "Parameters:",
                    "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
                    "  metadata of a finished referendum.",
                    "- `index`:  The index of a referendum to set or clear metadata for.",
                    "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 156,
          "type": {
            "path": [
              "polkadot_runtime",
              "OriginCaller"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "system",
                  "fields": [
                    {
                      "type": 157,
                      "typeName": "frame_system::Origin<Runtime>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Council",
                  "fields": [
                    {
                      "type": 158,
                      "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "TechnicalCommittee",
                  "fields": [
                    {
                      "type": 159,
                      "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "Origins",
                  "fields": [
                    {
                      "type": 160,
                      "typeName": "pallet_custom_origins::Origin",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "ParachainsOrigin",
                  "fields": [
                    {
                      "type": 161,
                      "typeName": "parachains_origin::Origin",
                      "docs": []
                    }
                  ],
                  "index": 50,
                  "docs": []
                },
                {
                  "name": "XcmPallet",
                  "fields": [
                    {
                      "type": 163,
                      "typeName": "pallet_xcm::Origin",
                      "docs": []
                    }
                  ],
                  "index": 99,
                  "docs": []
                },
                {
                  "name": "Void",
                  "fields": [
                    {
                      "type": 171,
                      "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 157,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "RawOrigin"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Root",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Signed",
                  "fields": [
                    {
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "None",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 158,
          "type": {
            "path": [
              "pallet_collective",
              "RawOrigin"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Members",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Member",
                  "fields": [
                    {
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "_Phantom",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 159,
          "type": {
            "path": [
              "pallet_collective",
              "RawOrigin"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Members",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Member",
                  "fields": [
                    {
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "_Phantom",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 160,
          "type": {
            "path": [
              "polkadot_runtime",
              "governance",
              "origins",
              "pallet_custom_origins",
              "Origin"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "StakingAdmin",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Treasurer",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "FellowshipAdmin",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "GeneralAdmin",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "AuctionAdmin",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "LeaseAdmin",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "ReferendumCanceller",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "ReferendumKiller",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "SmallTipper",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "BigTipper",
                  "fields": [],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "SmallSpender",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "MediumSpender",
                  "fields": [],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "BigSpender",
                  "fields": [],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "WhitelistedCaller",
                  "fields": [],
                  "index": 13,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 161,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "origin",
              "pallet",
              "Origin"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Parachain",
                  "fields": [
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 162,
          "type": {
            "path": [
              "polkadot_parachain",
              "primitives",
              "Id"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 163,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "Origin"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Xcm",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Response",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 164,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multilocation",
              "MultiLocation"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "parents",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "interior",
                  "type": 165,
                  "typeName": "Junctions",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 165,
          "type": {
            "path": [
              "xcm",
              "v3",
              "junctions",
              "Junctions"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Here",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "X1",
                  "fields": [
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "X2",
                  "fields": [
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "X3",
                  "fields": [
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "X4",
                  "fields": [
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "X5",
                  "fields": [
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "X6",
                  "fields": [
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "X7",
                  "fields": [
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "X8",
                  "fields": [
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 166,
          "type": {
            "path": [
              "xcm",
              "v3",
              "junction",
              "Junction"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Parachain",
                  "fields": [
                    {
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AccountId32",
                  "fields": [
                    {
                      "name": "network",
                      "type": 167,
                      "typeName": "Option<NetworkId>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "AccountIndex64",
                  "fields": [
                    {
                      "name": "network",
                      "type": 167,
                      "typeName": "Option<NetworkId>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AccountKey20",
                  "fields": [
                    {
                      "name": "network",
                      "type": 167,
                      "typeName": "Option<NetworkId>",
                      "docs": []
                    },
                    {
                      "name": "key",
                      "type": 102,
                      "typeName": "[u8; 20]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "PalletInstance",
                  "fields": [
                    {
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "GeneralIndex",
                  "fields": [
                    {
                      "type": 60,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "GeneralKey",
                  "fields": [
                    {
                      "name": "length",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "OnlyChild",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Plurality",
                  "fields": [
                    {
                      "name": "id",
                      "type": 169,
                      "typeName": "BodyId",
                      "docs": []
                    },
                    {
                      "name": "part",
                      "type": 170,
                      "typeName": "BodyPart",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "GlobalConsensus",
                  "fields": [
                    {
                      "type": 168,
                      "typeName": "NetworkId",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 167,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 168
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 168,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 168,
          "type": {
            "path": [
              "xcm",
              "v3",
              "junction",
              "NetworkId"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "ByGenesis",
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ByFork",
                  "fields": [
                    {
                      "name": "block_number",
                      "type": 11,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "block_hash",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Polkadot",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Kusama",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Westend",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Rococo",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Wococo",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Ethereum",
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "BitcoinCore",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "BitcoinCash",
                  "fields": [],
                  "index": 9,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 169,
          "type": {
            "path": [
              "xcm",
              "v3",
              "junction",
              "BodyId"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Unit",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Moniker",
                  "fields": [
                    {
                      "type": 17,
                      "typeName": "[u8; 4]",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Index",
                  "fields": [
                    {
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Executive",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Technical",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Legislative",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Judicial",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Defense",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Administration",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Treasury",
                  "fields": [],
                  "index": 9,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 170,
          "type": {
            "path": [
              "xcm",
              "v3",
              "junction",
              "BodyPart"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Voice",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Members",
                  "fields": [
                    {
                      "name": "count",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Fraction",
                  "fields": [
                    {
                      "name": "nom",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "denom",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AtLeastProportion",
                  "fields": [
                    {
                      "name": "nom",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "denom",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "MoreThanProportion",
                  "fields": [
                    {
                      "name": "nom",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "denom",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 171,
          "type": {
            "path": [
              "sp_core",
              "Void"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": []
            },
            "docs": []
          }
        },
        {
          "id": 172,
          "type": {
            "path": [
              "frame_support",
              "traits",
              "schedule",
              "DispatchTime"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "At",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "After",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 173,
          "type": {
            "path": [
              "pallet_whitelist",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "whitelist_call",
                  "fields": [
                    {
                      "name": "call_hash",
                      "type": 12,
                      "typeName": "PreimageHash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "remove_whitelisted_call",
                  "fields": [
                    {
                      "name": "call_hash",
                      "type": 12,
                      "typeName": "PreimageHash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "dispatch_whitelisted_call",
                  "fields": [
                    {
                      "name": "call_hash",
                      "type": 12,
                      "typeName": "PreimageHash",
                      "docs": []
                    },
                    {
                      "name": "call_encoded_len",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "call_weight_witness",
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "dispatch_whitelisted_call_with_preimage",
                  "fields": [
                    {
                      "name": "call",
                      "type": 79,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 174,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "claims",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "claim",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "ethereum_signature",
                      "type": 175,
                      "typeName": "EcdsaSignature",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Make a claim to collect your DOTs.",
                    "",
                    "The dispatch origin for this call must be _None_.",
                    "",
                    "Unsigned Validation:",
                    "A call to claim is deemed valid if the signature provided matches",
                    "the expected signed message of:",
                    "",
                    "> Ethereum Signed Message:",
                    "> (configured prefix string)(address)",
                    "",
                    "and `address` matches the `dest` account.",
                    "",
                    "Parameters:",
                    "- `dest`: The destination account to payout the claim.",
                    "- `ethereum_signature`: The signature of an ethereum signed message",
                    "   matching the format described above.",
                    "",
                    "<weight>",
                    "The weight of this call is invariant over the input parameters.",
                    "Weight includes logic to validate unsigned `claim` call.",
                    "",
                    "Total Complexity: O(1)",
                    "</weight>"
                  ]
                },
                {
                  "name": "mint_claim",
                  "fields": [
                    {
                      "name": "who",
                      "type": 177,
                      "typeName": "EthereumAddress",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "vesting_schedule",
                      "type": 178,
                      "typeName": "Option<(BalanceOf<T>, BalanceOf<T>, T::BlockNumber)>",
                      "docs": []
                    },
                    {
                      "name": "statement",
                      "type": 180,
                      "typeName": "Option<StatementKind>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Mint a new claim to collect DOTs.",
                    "",
                    "The dispatch origin for this call must be _Root_.",
                    "",
                    "Parameters:",
                    "- `who`: The Ethereum address allowed to collect this claim.",
                    "- `value`: The number of DOTs that will be claimed.",
                    "- `vesting_schedule`: An optional vesting schedule for these DOTs.",
                    "",
                    "<weight>",
                    "The weight of this call is invariant over the input parameters.",
                    "We assume worst case that both vesting and statement is being inserted.",
                    "",
                    "Total Complexity: O(1)",
                    "</weight>"
                  ]
                },
                {
                  "name": "claim_attest",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "ethereum_signature",
                      "type": 175,
                      "typeName": "EcdsaSignature",
                      "docs": []
                    },
                    {
                      "name": "statement",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Make a claim to collect your DOTs by signing a statement.",
                    "",
                    "The dispatch origin for this call must be _None_.",
                    "",
                    "Unsigned Validation:",
                    "A call to `claim_attest` is deemed valid if the signature provided matches",
                    "the expected signed message of:",
                    "",
                    "> Ethereum Signed Message:",
                    "> (configured prefix string)(address)(statement)",
                    "",
                    "and `address` matches the `dest` account; the `statement` must match that which is",
                    "expected according to your purchase arrangement.",
                    "",
                    "Parameters:",
                    "- `dest`: The destination account to payout the claim.",
                    "- `ethereum_signature`: The signature of an ethereum signed message",
                    "   matching the format described above.",
                    "- `statement`: The identity of the statement which is being attested to in the signature.",
                    "",
                    "<weight>",
                    "The weight of this call is invariant over the input parameters.",
                    "Weight includes logic to validate unsigned `claim_attest` call.",
                    "",
                    "Total Complexity: O(1)",
                    "</weight>"
                  ]
                },
                {
                  "name": "attest",
                  "fields": [
                    {
                      "name": "statement",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Attest to a statement, needed to finalize the claims process.",
                    "",
                    "WARNING: Insecure unless your chain includes `PrevalidateAttests` as a `SignedExtension`.",
                    "",
                    "Unsigned Validation:",
                    "A call to attest is deemed valid if the sender has a `Preclaim` registered",
                    "and provides a `statement` which is expected for the account.",
                    "",
                    "Parameters:",
                    "- `statement`: The identity of the statement which is being attested to in the signature.",
                    "",
                    "<weight>",
                    "The weight of this call is invariant over the input parameters.",
                    "Weight includes logic to do pre-validation on `attest` call.",
                    "",
                    "Total Complexity: O(1)",
                    "</weight>"
                  ]
                },
                {
                  "name": "move_claim",
                  "fields": [
                    {
                      "name": "old",
                      "type": 177,
                      "typeName": "EthereumAddress",
                      "docs": []
                    },
                    {
                      "name": "new",
                      "type": 177,
                      "typeName": "EthereumAddress",
                      "docs": []
                    },
                    {
                      "name": "maybe_preclaim",
                      "type": 144,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 175,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "claims",
              "EcdsaSignature"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 176,
                  "typeName": "[u8; 65]",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 176,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 65,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 177,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "claims",
              "EthereumAddress"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 102,
                  "typeName": "[u8; 20]",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 178,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 179
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 179,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 179,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                6,
                6,
                4
              ]
            },
            "docs": []
          }
        },
        {
          "id": 180,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 181
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 181,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 181,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "claims",
              "StatementKind"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Regular",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Saft",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 182,
          "type": {
            "path": [
              "pallet_vesting",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "vest",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Unlock any vested funds of the sender account.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                    "locked under this pallet.",
                    "",
                    "Emits either `VestingCompleted` or `VestingUpdated`.",
                    "",
                    "## Complexity",
                    "- `O(1)`."
                  ]
                },
                {
                  "name": "vest_other",
                  "fields": [
                    {
                      "name": "target",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Unlock any vested funds of a `target` account.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                    "locked under this pallet.",
                    "",
                    "Emits either `VestingCompleted` or `VestingUpdated`.",
                    "",
                    "## Complexity",
                    "- `O(1)`."
                  ]
                },
                {
                  "name": "vested_transfer",
                  "fields": [
                    {
                      "name": "target",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "schedule",
                      "type": 183,
                      "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Create a vested transfer.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `target`: The account receiving the vested funds.",
                    "- `schedule`: The vesting schedule attached to the transfer.",
                    "",
                    "Emits `VestingCreated`.",
                    "",
                    "NOTE: This will unlock all schedules through the current block.",
                    "",
                    "## Complexity",
                    "- `O(1)`."
                  ]
                },
                {
                  "name": "force_vested_transfer",
                  "fields": [
                    {
                      "name": "source",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "schedule",
                      "type": 183,
                      "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Force a vested transfer.",
                    "",
                    "The dispatch origin for this call must be _Root_.",
                    "",
                    "- `source`: The account whose funds should be transferred.",
                    "- `target`: The account that should be transferred the vested funds.",
                    "- `schedule`: The vesting schedule attached to the transfer.",
                    "",
                    "Emits `VestingCreated`.",
                    "",
                    "NOTE: This will unlock all schedules through the current block.",
                    "",
                    "## Complexity",
                    "- `O(1)`."
                  ]
                },
                {
                  "name": "merge_schedules",
                  "fields": [
                    {
                      "name": "schedule1_index",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "schedule2_index",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
                    "the highest possible start and end blocks. If both schedules have already started the",
                    "current block will be used as the schedule start; with the caveat that if one schedule",
                    "is finished by the current block, the other will be treated as the new merged schedule,",
                    "unmodified.",
                    "",
                    "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
                    "NOTE: This will unlock all schedules through the current block prior to merging.",
                    "NOTE: If both schedules have ended by the current block, no new schedule will be created",
                    "and both will be removed.",
                    "",
                    "Merged schedule attributes:",
                    "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
                    "  current_block)`.",
                    "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
                    "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `schedule1_index`: index of the first schedule to merge.",
                    "- `schedule2_index`: index of the second schedule to merge."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 183,
          "type": {
            "path": [
              "pallet_vesting",
              "vesting_info",
              "VestingInfo"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "locked",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "per_block",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "starting_block",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 184,
          "type": {
            "path": [
              "pallet_utility",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "batch",
                  "fields": [
                    {
                      "name": "calls",
                      "type": 185,
                      "typeName": "Vec<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Send a batch of dispatch calls.",
                    "",
                    "May be called from any origin except `None`.",
                    "",
                    "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                    "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                    "",
                    "If origin is root then the calls are dispatched without checking origin filter. (This",
                    "includes bypassing `frame_system::Config::BaseCallFilter`).",
                    "",
                    "## Complexity",
                    "- O(C) where C is the number of calls to be batched.",
                    "",
                    "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                    "event is deposited. If a call failed and the batch was interrupted, then the",
                    "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                    "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                    "event is deposited."
                  ]
                },
                {
                  "name": "as_derivative",
                  "fields": [
                    {
                      "name": "index",
                      "type": 77,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 79,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Send a call through an indexed pseudonym of the sender.",
                    "",
                    "Filter from origin are passed along. The call will be dispatched with an origin which",
                    "use the same filter as the origin of this call.",
                    "",
                    "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                    "because you expect `proxy` to have been used prior in the call stack and you do not want",
                    "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                    "in the Multisig pallet instead.",
                    "",
                    "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                    "",
                    "The dispatch origin for this call must be _Signed_."
                  ]
                },
                {
                  "name": "batch_all",
                  "fields": [
                    {
                      "name": "calls",
                      "type": 185,
                      "typeName": "Vec<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Send a batch of dispatch calls and atomically execute them.",
                    "The whole transaction will rollback and fail if any of the calls failed.",
                    "",
                    "May be called from any origin except `None`.",
                    "",
                    "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                    "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                    "",
                    "If origin is root then the calls are dispatched without checking origin filter. (This",
                    "includes bypassing `frame_system::Config::BaseCallFilter`).",
                    "",
                    "## Complexity",
                    "- O(C) where C is the number of calls to be batched."
                  ]
                },
                {
                  "name": "dispatch_as",
                  "fields": [
                    {
                      "name": "as_origin",
                      "type": 156,
                      "typeName": "Box<T::PalletsOrigin>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 79,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Dispatches a function call with a provided origin.",
                    "",
                    "The dispatch origin for this call must be _Root_.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                },
                {
                  "name": "force_batch",
                  "fields": [
                    {
                      "name": "calls",
                      "type": 185,
                      "typeName": "Vec<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Send a batch of dispatch calls.",
                    "Unlike `batch`, it allows errors and won't interrupt.",
                    "",
                    "May be called from any origin except `None`.",
                    "",
                    "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                    "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                    "",
                    "If origin is root then the calls are dispatch without checking origin filter. (This",
                    "includes bypassing `frame_system::Config::BaseCallFilter`).",
                    "",
                    "## Complexity",
                    "- O(C) where C is the number of calls to be batched."
                  ]
                },
                {
                  "name": "with_weight",
                  "fields": [
                    {
                      "name": "call",
                      "type": 79,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    },
                    {
                      "name": "weight",
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Dispatch a function call with a specified weight.",
                    "",
                    "This function does not check the weight of the call, and instead allows the",
                    "Root origin to specify the weight of the call.",
                    "",
                    "The dispatch origin for this call must be _Root_."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 185,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 79
            },
            "docs": []
          }
        },
        {
          "id": 186,
          "type": {
            "path": [
              "pallet_identity",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "add_registrar",
                  "fields": [
                    {
                      "name": "account",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Add a registrar to the system.",
                    "",
                    "The dispatch origin for this call must be `T::RegistrarOrigin`.",
                    "",
                    "- `account`: the account of the registrar.",
                    "",
                    "Emits `RegistrarAdded` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded)."
                  ]
                },
                {
                  "name": "set_identity",
                  "fields": [
                    {
                      "name": "info",
                      "type": 187,
                      "typeName": "Box<IdentityInfo<T::MaxAdditionalFields>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Set an account's identity information and reserve the appropriate deposit.",
                    "",
                    "If the account already has identity information, the deposit is taken as part payment",
                    "for the new deposit.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `info`: The identity information.",
                    "",
                    "Emits `IdentitySet` if successful.",
                    "",
                    "## Complexity",
                    "- `O(X + X' + R)`",
                    "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
                    "  - where `R` judgements-count (registrar-count-bounded)"
                  ]
                },
                {
                  "name": "set_subs",
                  "fields": [
                    {
                      "name": "subs",
                      "type": 222,
                      "typeName": "Vec<(T::AccountId, Data)>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Set the sub-accounts of the sender.",
                    "",
                    "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                    "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    "identity.",
                    "",
                    "- `subs`: The identity's (new) sub-accounts.",
                    "",
                    "## Complexity",
                    "- `O(P + S)`",
                    "  - where `P` old-subs-count (hard- and deposit-bounded).",
                    "  - where `S` subs-count (hard- and deposit-bounded)."
                  ]
                },
                {
                  "name": "clear_identity",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Clear an account's identity info and all sub-accounts and return all deposits.",
                    "",
                    "Payment: All reserved balances on the account are returned.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    "identity.",
                    "",
                    "Emits `IdentityCleared` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R + S + X)`",
                    "  - where `R` registrar-count (governance-bounded).",
                    "  - where `S` subs-count (hard- and deposit-bounded).",
                    "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                  ]
                },
                {
                  "name": "request_judgement",
                  "fields": [
                    {
                      "name": "reg_index",
                      "type": 91,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "max_fee",
                      "type": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Request a judgement from a registrar.",
                    "",
                    "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                    "given.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a",
                    "registered identity.",
                    "",
                    "- `reg_index`: The index of the registrar whose judgement is requested.",
                    "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                    "",
                    "```nocompile",
                    "Self::registrars().get(reg_index).unwrap().fee",
                    "```",
                    "",
                    "Emits `JudgementRequested` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R + X)`.",
                    "  - where `R` registrar-count (governance-bounded).",
                    "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                  ]
                },
                {
                  "name": "cancel_request",
                  "fields": [
                    {
                      "name": "reg_index",
                      "type": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Cancel a previous request.",
                    "",
                    "Payment: A previously reserved deposit is returned on success.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a",
                    "registered identity.",
                    "",
                    "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
                    "",
                    "Emits `JudgementUnrequested` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R + X)`.",
                    "  - where `R` registrar-count (governance-bounded).",
                    "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                  ]
                },
                {
                  "name": "set_fee",
                  "fields": [
                    {
                      "name": "index",
                      "type": 91,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "type": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Set the fee required for a judgement to be requested from a registrar.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                    "of the registrar whose index is `index`.",
                    "",
                    "- `index`: the index of the registrar whose fee is to be set.",
                    "- `fee`: the new fee.",
                    "",
                    "## Complexity",
                    "- `O(R)`.",
                    "  - where `R` registrar-count (governance-bounded)."
                  ]
                },
                {
                  "name": "set_account_id",
                  "fields": [
                    {
                      "name": "index",
                      "type": 91,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "new",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Change the account associated with a registrar.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                    "of the registrar whose index is `index`.",
                    "",
                    "- `index`: the index of the registrar whose fee is to be set.",
                    "- `new`: the new account ID.",
                    "",
                    "## Complexity",
                    "- `O(R)`.",
                    "  - where `R` registrar-count (governance-bounded)."
                  ]
                },
                {
                  "name": "set_fields",
                  "fields": [
                    {
                      "name": "index",
                      "type": 91,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "fields",
                      "type": 224,
                      "typeName": "IdentityFields",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Set the field information for a registrar.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                    "of the registrar whose index is `index`.",
                    "",
                    "- `index`: the index of the registrar whose fee is to be set.",
                    "- `fields`: the fields that the registrar concerns themselves with.",
                    "",
                    "## Complexity",
                    "- `O(R)`.",
                    "  - where `R` registrar-count (governance-bounded)."
                  ]
                },
                {
                  "name": "provide_judgement",
                  "fields": [
                    {
                      "name": "reg_index",
                      "type": 91,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "judgement",
                      "type": 226,
                      "typeName": "Judgement<BalanceOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "identity",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Provide a judgement for an account's identity.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                    "of the registrar whose index is `reg_index`.",
                    "",
                    "- `reg_index`: the index of the registrar whose judgement is being made.",
                    "- `target`: the account whose identity the judgement is upon. This must be an account",
                    "  with a registered identity.",
                    "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                    "- `identity`: The hash of the [`IdentityInfo`] for that the judgement is provided.",
                    "",
                    "Emits `JudgementGiven` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R + X)`.",
                    "  - where `R` registrar-count (governance-bounded).",
                    "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                  ]
                },
                {
                  "name": "kill_identity",
                  "fields": [
                    {
                      "name": "target",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Remove an account's identity and sub-account information and slash the deposits.",
                    "",
                    "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                    "`Slash`. Verification request deposits are not returned; they should be cancelled",
                    "manually using `cancel_request`.",
                    "",
                    "The dispatch origin for this call must match `T::ForceOrigin`.",
                    "",
                    "- `target`: the account whose identity the judgement is upon. This must be an account",
                    "  with a registered identity.",
                    "",
                    "Emits `IdentityKilled` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R + S + X)`",
                    "  - where `R` registrar-count (governance-bounded).",
                    "  - where `S` subs-count (hard- and deposit-bounded).",
                    "  - where `X` additional-field-count (deposit-bounded and code-bounded)."
                  ]
                },
                {
                  "name": "add_sub",
                  "fields": [
                    {
                      "name": "sub",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 190,
                      "typeName": "Data",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Add the given account to the sender's subs.",
                    "",
                    "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                    "to the sender.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    "sub identity of `sub`."
                  ]
                },
                {
                  "name": "rename_sub",
                  "fields": [
                    {
                      "name": "sub",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 190,
                      "typeName": "Data",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "Alter the associated name of the given sub-account.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    "sub identity of `sub`."
                  ]
                },
                {
                  "name": "remove_sub",
                  "fields": [
                    {
                      "name": "sub",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "Remove the given account from the sender's subs.",
                    "",
                    "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                    "to the sender.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    "sub identity of `sub`."
                  ]
                },
                {
                  "name": "quit_sub",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "Remove the sender as a sub-account.",
                    "",
                    "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                    "to the sender (*not* the original depositor).",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                    "super-identity.",
                    "",
                    "NOTE: This should not normally be used, but is provided in the case that the non-",
                    "controller of an account is maliciously registered as a sub-account."
                  ]
                }
              ]
            },
            "docs": [
              "Identity pallet declaration."
            ]
          }
        },
        {
          "id": 187,
          "type": {
            "path": [
              "pallet_identity",
              "types",
              "IdentityInfo"
            ],
            "params": [
              {
                "name": "FieldLimit"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "additional",
                  "type": 188,
                  "typeName": "BoundedVec<(Data, Data), FieldLimit>",
                  "docs": []
                },
                {
                  "name": "display",
                  "type": 190,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "legal",
                  "type": 190,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "web",
                  "type": 190,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "riot",
                  "type": 190,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "email",
                  "type": 190,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "pgp_fingerprint",
                  "type": 221,
                  "typeName": "Option<[u8; 20]>",
                  "docs": []
                },
                {
                  "name": "image",
                  "type": 190,
                  "typeName": "Data",
                  "docs": []
                },
                {
                  "name": "twitter",
                  "type": 190,
                  "typeName": "Data",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 188,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 189
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 220,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 189,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                190,
                190
              ]
            },
            "docs": []
          }
        },
        {
          "id": 190,
          "type": {
            "path": [
              "pallet_identity",
              "types",
              "Data"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Raw0",
                  "fields": [
                    {
                      "type": 191,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Raw1",
                  "fields": [
                    {
                      "type": 192,
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Raw2",
                  "fields": [
                    {
                      "type": 193,
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Raw3",
                  "fields": [
                    {
                      "type": 194,
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Raw4",
                  "fields": [
                    {
                      "type": 17,
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Raw5",
                  "fields": [
                    {
                      "type": 195,
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Raw6",
                  "fields": [
                    {
                      "type": 196,
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Raw7",
                  "fields": [
                    {
                      "type": 197,
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Raw8",
                  "fields": [
                    {
                      "type": 198,
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "Raw9",
                  "fields": [
                    {
                      "type": 199,
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Raw10",
                  "fields": [
                    {
                      "type": 200,
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "Raw11",
                  "fields": [
                    {
                      "type": 201,
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Raw12",
                  "fields": [
                    {
                      "type": 202,
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "Raw13",
                  "fields": [
                    {
                      "type": 203,
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Raw14",
                  "fields": [
                    {
                      "type": 204,
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "Raw15",
                  "fields": [
                    {
                      "type": 205,
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "Raw16",
                  "fields": [
                    {
                      "type": 47,
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "Raw17",
                  "fields": [
                    {
                      "type": 206,
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "Raw18",
                  "fields": [
                    {
                      "type": 207,
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "Raw19",
                  "fields": [
                    {
                      "type": 208,
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Raw20",
                  "fields": [
                    {
                      "type": 102,
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Raw21",
                  "fields": [
                    {
                      "type": 209,
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "Raw22",
                  "fields": [
                    {
                      "type": 210,
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Raw23",
                  "fields": [
                    {
                      "type": 211,
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Raw24",
                  "fields": [
                    {
                      "type": 212,
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "Raw25",
                  "fields": [
                    {
                      "type": 213,
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "Raw26",
                  "fields": [
                    {
                      "type": 214,
                      "docs": []
                    }
                  ],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "Raw27",
                  "fields": [
                    {
                      "type": 215,
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "Raw28",
                  "fields": [
                    {
                      "type": 216,
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "Raw29",
                  "fields": [
                    {
                      "type": 217,
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "Raw30",
                  "fields": [
                    {
                      "type": 218,
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "Raw31",
                  "fields": [
                    {
                      "type": 219,
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Raw32",
                  "fields": [
                    {
                      "type": 1,
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "BlakeTwo256",
                  "fields": [
                    {
                      "type": 1,
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "Sha256",
                  "fields": [
                    {
                      "type": 1,
                      "docs": []
                    }
                  ],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "Keccak256",
                  "fields": [
                    {
                      "type": 1,
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "ShaThree256",
                  "fields": [
                    {
                      "type": 1,
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 191,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 0,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 192,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 1,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 193,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 2,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 194,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 3,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 195,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 5,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 196,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 6,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 197,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 7,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 198,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 8,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 199,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 9,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 200,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 10,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 201,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 11,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 202,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 12,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 203,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 13,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 204,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 14,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 205,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 15,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 206,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 17,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 207,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 18,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 208,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 19,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 209,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 21,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 210,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 22,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 211,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 23,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 212,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 24,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 213,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 25,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 214,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 26,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 215,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 27,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 216,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 28,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 217,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 29,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 218,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 30,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 219,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 31,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 220,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 189
            },
            "docs": []
          }
        },
        {
          "id": 221,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 102
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 102,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 222,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 223
            },
            "docs": []
          }
        },
        {
          "id": 223,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                0,
                190
              ]
            },
            "docs": []
          }
        },
        {
          "id": 224,
          "type": {
            "path": [
              "pallet_identity",
              "types",
              "BitFlags"
            ],
            "params": [
              {
                "name": "T",
                "type": 225
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 11,
                  "typeName": "IdentityField",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 225,
          "type": {
            "path": [
              "pallet_identity",
              "types",
              "IdentityField"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Display",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Legal",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Web",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Riot",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Email",
                  "fields": [],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "PgpFingerprint",
                  "fields": [],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Image",
                  "fields": [],
                  "index": 64,
                  "docs": []
                },
                {
                  "name": "Twitter",
                  "fields": [],
                  "index": 128,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 226,
          "type": {
            "path": [
              "pallet_identity",
              "types",
              "Judgement"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Unknown",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "FeePaid",
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Reasonable",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "KnownGood",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "OutOfDate",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "LowQuality",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Erroneous",
                  "fields": [],
                  "index": 6,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 227,
          "type": {
            "path": [
              "pallet_proxy",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "proxy",
                  "fields": [
                    {
                      "name": "real",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "force_proxy_type",
                      "type": 228,
                      "typeName": "Option<T::ProxyType>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 79,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Dispatch the given `call` from an account that the sender is authorised for through",
                    "`add_proxy`.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `real`: The account that the proxy will make a call on behalf of.",
                    "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                    "- `call`: The call to be made by the `real` account."
                  ]
                },
                {
                  "name": "add_proxy",
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "type": 229,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Register a proxy account for the sender that is able to make calls on its behalf.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `proxy`: The account that the `caller` would like to make a proxy.",
                    "- `proxy_type`: The permissions allowed for this proxy account.",
                    "- `delay`: The announcement period required of the initial proxy. Will generally be",
                    "zero."
                  ]
                },
                {
                  "name": "remove_proxy",
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "type": 229,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Unregister a proxy account for the sender.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                    "- `proxy_type`: The permissions currently enabled for the removed proxy account."
                  ]
                },
                {
                  "name": "remove_proxies",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Unregister all proxy accounts for the sender.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "WARNING: This may be called on accounts created by `pure`, however if done, then",
                    "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
                  ]
                },
                {
                  "name": "create_pure",
                  "fields": [
                    {
                      "name": "proxy_type",
                      "type": 229,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 77,
                      "typeName": "u16",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                    "initialize it with a proxy of `proxy_type` for `origin` sender.",
                    "",
                    "Requires a `Signed` origin.",
                    "",
                    "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                    "new account. This will almost always be the most permissive `ProxyType` possible to",
                    "allow for maximum flexibility.",
                    "- `index`: A disambiguation index, in case this is called multiple times in the same",
                    "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                    "want to use `0`.",
                    "- `delay`: The announcement period required of the initial proxy. Will generally be",
                    "zero.",
                    "",
                    "Fails with `Duplicate` if this has already been called in this transaction, from the",
                    "same sender, with the same parameters.",
                    "",
                    "Fails if there are insufficient funds to pay for deposit."
                  ]
                },
                {
                  "name": "kill_pure",
                  "fields": [
                    {
                      "name": "spawner",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "type": 229,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 77,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "height",
                      "type": 91,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "ext_index",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Removes a previously spawned pure proxy.",
                    "",
                    "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                    "inaccessible.",
                    "",
                    "Requires a `Signed` origin, and the sender account must have been created by a call to",
                    "`pure` with corresponding parameters.",
                    "",
                    "- `spawner`: The account that originally called `pure` to create this account.",
                    "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
                    "- `proxy_type`: The proxy type originally passed to `pure`.",
                    "- `height`: The height of the chain when the call to `pure` was processed.",
                    "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
                    "",
                    "Fails with `NoPermission` in case the caller is not a previously created pure",
                    "account whose `pure` call has corresponding parameters."
                  ]
                },
                {
                  "name": "announce",
                  "fields": [
                    {
                      "name": "real",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 12,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Publish the hash of a proxy-call that will be made in the future.",
                    "",
                    "This must be called some number of blocks before the corresponding `proxy` is attempted",
                    "if the delay associated with the proxy relationship is greater than zero.",
                    "",
                    "No more than `MaxPending` announcements may be made at any one time.",
                    "",
                    "This will take a deposit of `AnnouncementDepositFactor` as well as",
                    "`AnnouncementDepositBase` if there are no other pending announcements.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                    "",
                    "Parameters:",
                    "- `real`: The account that the proxy will make a call on behalf of.",
                    "- `call_hash`: The hash of the call to be made by the `real` account."
                  ]
                },
                {
                  "name": "remove_announcement",
                  "fields": [
                    {
                      "name": "real",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 12,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Remove a given announcement.",
                    "",
                    "May be called by a proxy account to remove a call they previously announced and return",
                    "the deposit.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `real`: The account that the proxy will make a call on behalf of.",
                    "- `call_hash`: The hash of the call to be made by the `real` account."
                  ]
                },
                {
                  "name": "reject_announcement",
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 12,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Remove the given announcement of a delegate.",
                    "",
                    "May be called by a target (proxied) account to remove a call that one of their delegates",
                    "(`delegate`) has announced they want to execute. The deposit is returned.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `delegate`: The account that previously announced the call.",
                    "- `call_hash`: The hash of the call to be made."
                  ]
                },
                {
                  "name": "proxy_announced",
                  "fields": [
                    {
                      "name": "delegate",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "real",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "force_proxy_type",
                      "type": 228,
                      "typeName": "Option<T::ProxyType>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 79,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Dispatch the given `call` from an account that the sender is authorized for through",
                    "`add_proxy`.",
                    "",
                    "Removes any corresponding announcement(s).",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Parameters:",
                    "- `real`: The account that the proxy will make a call on behalf of.",
                    "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                    "- `call`: The call to be made by the `real` account."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 228,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 229
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 229,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 229,
          "type": {
            "path": [
              "polkadot_runtime",
              "ProxyType"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Any",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NonTransfer",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Governance",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Staking",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "IdentityJudgement",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "CancelProxy",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Auction",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "NominationPools",
                  "fields": [],
                  "index": 8,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 230,
          "type": {
            "path": [
              "pallet_multisig",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "as_multi_threshold_1",
                  "fields": [
                    {
                      "name": "other_signatories",
                      "type": 104,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 79,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Immediately dispatch a multi-signature call using a single approval from the caller.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `other_signatories`: The accounts (other than the sender) who are part of the",
                    "multi-signature, but do not participate in the approval process.",
                    "- `call`: The call to be executed.",
                    "",
                    "Result is equivalent to the dispatched result.",
                    "",
                    "## Complexity",
                    "O(Z + C) where Z is the length of the call and C its execution weight."
                  ]
                },
                {
                  "name": "as_multi",
                  "fields": [
                    {
                      "name": "threshold",
                      "type": 77,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "other_signatories",
                      "type": 104,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "maybe_timepoint",
                      "type": 231,
                      "typeName": "Option<Timepoint<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 79,
                      "typeName": "Box<<T as Config>::RuntimeCall>",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Register approval for a dispatch to be made from a deterministic composite account if",
                    "approved by a total of `threshold - 1` of `other_signatories`.",
                    "",
                    "If there are enough, then dispatch the call.",
                    "",
                    "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                    "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                    "is cancelled.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                    "- `other_signatories`: The accounts (other than the sender) who can approve this",
                    "dispatch. May not be empty.",
                    "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                    "not the first approval, then it must be `Some`, with the timepoint (block number and",
                    "transaction index) of the first approval transaction.",
                    "- `call`: The call to be executed.",
                    "",
                    "NOTE: Unless this is the final approval, you will generally want to use",
                    "`approve_as_multi` instead, since it only requires a hash of the call.",
                    "",
                    "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                    "on success, result is `Ok` and the result from the interior call, if it was executed,",
                    "may be found in the deposited `MultisigExecuted` event.",
                    "",
                    "## Complexity",
                    "- `O(S + Z + Call)`.",
                    "- Up to one balance-reserve or unreserve operation.",
                    "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                    "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                    "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                    "- One encode & hash, both of complexity `O(S)`.",
                    "- Up to one binary search and insert (`O(logS + S)`).",
                    "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                    "- One event.",
                    "- The weight of the `call`.",
                    "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                    "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                  ]
                },
                {
                  "name": "approve_as_multi",
                  "fields": [
                    {
                      "name": "threshold",
                      "type": 77,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "other_signatories",
                      "type": 104,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "maybe_timepoint",
                      "type": 231,
                      "typeName": "Option<Timepoint<T::BlockNumber>>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Register approval for a dispatch to be made from a deterministic composite account if",
                    "approved by a total of `threshold - 1` of `other_signatories`.",
                    "",
                    "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                    "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                    "is cancelled.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                    "- `other_signatories`: The accounts (other than the sender) who can approve this",
                    "dispatch. May not be empty.",
                    "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                    "not the first approval, then it must be `Some`, with the timepoint (block number and",
                    "transaction index) of the first approval transaction.",
                    "- `call_hash`: The hash of the call to be executed.",
                    "",
                    "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                    "",
                    "## Complexity",
                    "- `O(S)`.",
                    "- Up to one balance-reserve or unreserve operation.",
                    "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                    "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                    "- One encode & hash, both of complexity `O(S)`.",
                    "- Up to one binary search and insert (`O(logS + S)`).",
                    "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                    "- One event.",
                    "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                    "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                  ]
                },
                {
                  "name": "cancel_as_multi",
                  "fields": [
                    {
                      "name": "threshold",
                      "type": 77,
                      "typeName": "u16",
                      "docs": []
                    },
                    {
                      "name": "other_signatories",
                      "type": 104,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "timepoint",
                      "type": 232,
                      "typeName": "Timepoint<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                    "for this operation will be unreserved on success.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                    "- `other_signatories`: The accounts (other than the sender) who can approve this",
                    "dispatch. May not be empty.",
                    "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                    "transaction for this dispatch.",
                    "- `call_hash`: The hash of the call to be executed.",
                    "",
                    "## Complexity",
                    "- `O(S)`.",
                    "- Up to one balance-reserve or unreserve operation.",
                    "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                    "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                    "- One encode & hash, both of complexity `O(S)`.",
                    "- One event.",
                    "- I/O: 1 read `O(S)`, one remove.",
                    "- Storage: removes one item."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 231,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 232
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 232,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 232,
          "type": {
            "path": [
              "pallet_multisig",
              "Timepoint"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "height",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 233,
          "type": {
            "path": [
              "pallet_bounties",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "propose_bounty",
                  "fields": [
                    {
                      "name": "value",
                      "type": 60,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "description",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Propose a new bounty.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                    "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
                    "or slashed when rejected.",
                    "",
                    "- `curator`: The curator account whom will manage this bounty.",
                    "- `fee`: The curator fee.",
                    "- `value`: The total payment amount of this bounty, curator fee included.",
                    "- `description`: The description of this bounty."
                  ]
                },
                {
                  "name": "approve_bounty",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Approve a bounty proposal. At a later time, the bounty will be funded and become active",
                    "and the original deposit will be returned.",
                    "",
                    "May only be called from `T::SpendOrigin`.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                },
                {
                  "name": "propose_curator",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "curator",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "type": 60,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Assign a curator to a funded bounty.",
                    "",
                    "May only be called from `T::SpendOrigin`.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                },
                {
                  "name": "unassign_curator",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Unassign curator from a bounty.",
                    "",
                    "This function can only be called by the `RejectOrigin` a signed origin.",
                    "",
                    "If this function is called by the `RejectOrigin`, we assume that the curator is",
                    "malicious or inactive. As a result, we will slash the curator when possible.",
                    "",
                    "If the origin is the curator, we take this as a sign they are unable to do their job and",
                    "they willingly give up. We could slash them, but for now we allow them to recover their",
                    "deposit and exit without issue. (We may want to change this if it is abused.)",
                    "",
                    "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
                    "anyone in the community to call out that a curator is not doing their due diligence, and",
                    "we should pick a new curator. In this case the curator should also be slashed.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                },
                {
                  "name": "accept_curator",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Accept the curator role for a bounty.",
                    "A deposit will be reserved from curator and refund upon successful payout.",
                    "",
                    "May only be called from the curator.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                },
                {
                  "name": "award_bounty",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds",
                    "after a delay.",
                    "",
                    "The dispatch origin for this call must be the curator of this bounty.",
                    "",
                    "- `bounty_id`: Bounty ID to award.",
                    "- `beneficiary`: The beneficiary account whom will receive the payout.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                },
                {
                  "name": "claim_bounty",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Claim the payout from an awarded bounty after payout delay.",
                    "",
                    "The dispatch origin for this call must be the beneficiary of this bounty.",
                    "",
                    "- `bounty_id`: Bounty ID to claim.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                },
                {
                  "name": "close_bounty",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Cancel a proposed or active bounty. All the funds will be sent to treasury and",
                    "the curator deposit will be unreserved if possible.",
                    "",
                    "Only `T::RejectOrigin` is able to cancel a bounty.",
                    "",
                    "- `bounty_id`: Bounty ID to cancel.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                },
                {
                  "name": "extend_bounty_expiry",
                  "fields": [
                    {
                      "name": "bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "remark",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Extend the expiry time of an active bounty.",
                    "",
                    "The dispatch origin for this call must be the curator of this bounty.",
                    "",
                    "- `bounty_id`: Bounty ID to extend.",
                    "- `remark`: additional information.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 234,
          "type": {
            "path": [
              "pallet_child_bounties",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "add_child_bounty",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "description",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Add a new child-bounty.",
                    "",
                    "The dispatch origin for this call must be the curator of parent",
                    "bounty and the parent bounty must be in \"active\" state.",
                    "",
                    "Child-bounty gets added successfully & fund gets transferred from",
                    "parent bounty to child-bounty account, if parent bounty has enough",
                    "funds, else the call fails.",
                    "",
                    "Upper bound to maximum number of active  child bounties that can be",
                    "added are managed via runtime trait config",
                    "[`Config::MaxActiveChildBountyCount`].",
                    "",
                    "If the call is success, the status of child-bounty is updated to",
                    "\"Added\".",
                    "",
                    "- `parent_bounty_id`: Index of parent bounty for which child-bounty is being added.",
                    "- `value`: Value for executing the proposal.",
                    "- `description`: Text description for the child-bounty."
                  ]
                },
                {
                  "name": "propose_curator",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "curator",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "type": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Propose curator for funded child-bounty.",
                    "",
                    "The dispatch origin for this call must be curator of parent bounty.",
                    "",
                    "Parent bounty must be in active state, for this child-bounty call to",
                    "work.",
                    "",
                    "Child-bounty must be in \"Added\" state, for processing the call. And",
                    "state of child-bounty is moved to \"CuratorProposed\" on successful",
                    "call completion.",
                    "",
                    "- `parent_bounty_id`: Index of parent bounty.",
                    "- `child_bounty_id`: Index of child bounty.",
                    "- `curator`: Address of child-bounty curator.",
                    "- `fee`: payment fee to child-bounty curator for execution."
                  ]
                },
                {
                  "name": "accept_curator",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Accept the curator role for the child-bounty.",
                    "",
                    "The dispatch origin for this call must be the curator of this",
                    "child-bounty.",
                    "",
                    "A deposit will be reserved from the curator and refund upon",
                    "successful payout or cancellation.",
                    "",
                    "Fee for curator is deducted from curator fee of parent bounty.",
                    "",
                    "Parent bounty must be in active state, for this child-bounty call to",
                    "work.",
                    "",
                    "Child-bounty must be in \"CuratorProposed\" state, for processing the",
                    "call. And state of child-bounty is moved to \"Active\" on successful",
                    "call completion.",
                    "",
                    "- `parent_bounty_id`: Index of parent bounty.",
                    "- `child_bounty_id`: Index of child bounty."
                  ]
                },
                {
                  "name": "unassign_curator",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Unassign curator from a child-bounty.",
                    "",
                    "The dispatch origin for this call can be either `RejectOrigin`, or",
                    "the curator of the parent bounty, or any signed origin.",
                    "",
                    "For the origin other than T::RejectOrigin and the child-bounty",
                    "curator, parent bounty must be in active state, for this call to",
                    "work. We allow child-bounty curator and T::RejectOrigin to execute",
                    "this call irrespective of the parent bounty state.",
                    "",
                    "If this function is called by the `RejectOrigin` or the",
                    "parent bounty curator, we assume that the child-bounty curator is",
                    "malicious or inactive. As a result, child-bounty curator deposit is",
                    "slashed.",
                    "",
                    "If the origin is the child-bounty curator, we take this as a sign",
                    "that they are unable to do their job, and are willingly giving up.",
                    "We could slash the deposit, but for now we allow them to unreserve",
                    "their deposit and exit without issue. (We may want to change this if",
                    "it is abused.)",
                    "",
                    "Finally, the origin can be anyone iff the child-bounty curator is",
                    "\"inactive\". Expiry update due of parent bounty is used to estimate",
                    "inactive state of child-bounty curator.",
                    "",
                    "This allows anyone in the community to call out that a child-bounty",
                    "curator is not doing their due diligence, and we should pick a new",
                    "one. In this case the child-bounty curator deposit is slashed.",
                    "",
                    "State of child-bounty is moved to Added state on successful call",
                    "completion.",
                    "",
                    "- `parent_bounty_id`: Index of parent bounty.",
                    "- `child_bounty_id`: Index of child bounty."
                  ]
                },
                {
                  "name": "award_child_bounty",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Award child-bounty to a beneficiary.",
                    "",
                    "The beneficiary will be able to claim the funds after a delay.",
                    "",
                    "The dispatch origin for this call must be the parent curator or",
                    "curator of this child-bounty.",
                    "",
                    "Parent bounty must be in active state, for this child-bounty call to",
                    "work.",
                    "",
                    "Child-bounty must be in active state, for processing the call. And",
                    "state of child-bounty is moved to \"PendingPayout\" on successful call",
                    "completion.",
                    "",
                    "- `parent_bounty_id`: Index of parent bounty.",
                    "- `child_bounty_id`: Index of child bounty.",
                    "- `beneficiary`: Beneficiary account."
                  ]
                },
                {
                  "name": "claim_child_bounty",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Claim the payout from an awarded child-bounty after payout delay.",
                    "",
                    "The dispatch origin for this call may be any signed origin.",
                    "",
                    "Call works independent of parent bounty state, No need for parent",
                    "bounty to be in active state.",
                    "",
                    "The Beneficiary is paid out with agreed bounty value. Curator fee is",
                    "paid & curator deposit is unreserved.",
                    "",
                    "Child-bounty must be in \"PendingPayout\" state, for processing the",
                    "call. And instance of child-bounty is removed from the state on",
                    "successful call completion.",
                    "",
                    "- `parent_bounty_id`: Index of parent bounty.",
                    "- `child_bounty_id`: Index of child bounty."
                  ]
                },
                {
                  "name": "close_child_bounty",
                  "fields": [
                    {
                      "name": "parent_bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_bounty_id",
                      "type": 91,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Cancel a proposed or active child-bounty. Child-bounty account funds",
                    "are transferred to parent bounty account. The child-bounty curator",
                    "deposit may be unreserved if possible.",
                    "",
                    "The dispatch origin for this call must be either parent curator or",
                    "`T::RejectOrigin`.",
                    "",
                    "If the state of child-bounty is `Active`, curator deposit is",
                    "unreserved.",
                    "",
                    "If the state of child-bounty is `PendingPayout`, call fails &",
                    "returns `PendingPayout` error.",
                    "",
                    "For the origin other than T::RejectOrigin, parent bounty must be in",
                    "active state, for this child-bounty call to work. For origin",
                    "T::RejectOrigin execution is forced.",
                    "",
                    "Instance of child-bounty is removed from the state on successful",
                    "call completion.",
                    "",
                    "- `parent_bounty_id`: Index of parent bounty.",
                    "- `child_bounty_id`: Index of child bounty."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 235,
          "type": {
            "path": [
              "pallet_tips",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "report_awesome",
                  "fields": [
                    {
                      "name": "reason",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                    "`DataDepositPerByte` for each byte in `reason`.",
                    "",
                    "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                    "  a UTF-8-encoded URL.",
                    "- `who`: The account which should be credited for the tip.",
                    "",
                    "Emits `NewTip` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R)` where `R` length of `reason`.",
                    "  - encoding and hashing of 'reason'"
                  ]
                },
                {
                  "name": "retract_tip",
                  "fields": [
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
                    "",
                    "If successful, the original deposit will be unreserved.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
                    "must have been reported by the signing account through `report_awesome` (and not",
                    "through `tip_new`).",
                    "",
                    "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                    "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                    "",
                    "Emits `TipRetracted` if successful.",
                    "",
                    "## Complexity",
                    "- `O(1)`",
                    "  - Depends on the length of `T::Hash` which is fixed."
                  ]
                },
                {
                  "name": "tip_new",
                  "fields": [
                    {
                      "name": "reason",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "tip_value",
                      "type": 60,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Give a tip for something new; no finder's fee will be taken.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                    "member of the `Tippers` set.",
                    "",
                    "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                    "  a UTF-8-encoded URL.",
                    "- `who`: The account which should be credited for the tip.",
                    "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                    "  value of active tippers will be given to the `who`.",
                    "",
                    "Emits `NewTip` if successful.",
                    "",
                    "## Complexity",
                    "- `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
                    "  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound given by",
                    "    `ContainsLengthBound`. The actual cost depends on the implementation of",
                    "    `T::Tippers`.",
                    "  - `O(R)`: hashing and encoding of reason of length `R`"
                  ]
                },
                {
                  "name": "tip",
                  "fields": [
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "tip_value",
                      "type": 60,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Declare a tip value for an already-open tip.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                    "member of the `Tippers` set.",
                    "",
                    "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                    "  as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
                    "  account ID.",
                    "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                    "  value of active tippers will be given to the `who`.",
                    "",
                    "Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
                    "has started.",
                    "",
                    "## Complexity",
                    "- `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length `T`, insert",
                    "  tip and check closing, `T` is charged as upper bound given by `ContainsLengthBound`.",
                    "  The actual cost depends on the implementation of `T::Tippers`.",
                    "",
                    "  Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
                    "  is weighted as if almost full i.e of length `T-1`."
                  ]
                },
                {
                  "name": "close_tip",
                  "fields": [
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Close and payout a tip.",
                    "",
                    "The dispatch origin for this call must be _Signed_.",
                    "",
                    "The tip identified by `hash` must have finished its countdown period.",
                    "",
                    "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                    "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                    "",
                    "## Complexity",
                    "- : `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length `T`. `T`",
                    "  is charged as upper bound given by `ContainsLengthBound`. The actual cost depends on",
                    "  the implementation of `T::Tippers`."
                  ]
                },
                {
                  "name": "slash_tip",
                  "fields": [
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Remove and slash an already-open tip.",
                    "",
                    "May only be called from `T::RejectOrigin`.",
                    "",
                    "As a result, the finder is slashed and the deposits are lost.",
                    "",
                    "Emits `TipSlashed` if successful.",
                    "",
                    "## Complexity",
                    "- O(1)."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 236,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "submit_unsigned",
                  "fields": [
                    {
                      "name": "raw_solution",
                      "type": 237,
                      "typeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>",
                      "docs": []
                    },
                    {
                      "name": "witness",
                      "type": 290,
                      "typeName": "SolutionOrSnapshotSize",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Submit a solution for the unsigned phase.",
                    "",
                    "The dispatch origin fo this call must be __none__.",
                    "",
                    "This submission is checked on the fly. Moreover, this unsigned solution is only",
                    "validated when submitted to the pool from the **local** node. Effectively, this means",
                    "that only active validators can submit this transaction when authoring a block (similar",
                    "to an inherent).",
                    "",
                    "To prevent any incorrect solution (and thus wasted time/weight), this transaction will",
                    "panic if the solution submitted by the validator is invalid in any way, effectively",
                    "putting their authoring reward at risk.",
                    "",
                    "No deposit or reward is associated with this submission."
                  ]
                },
                {
                  "name": "set_minimum_untrusted_score",
                  "fields": [
                    {
                      "name": "maybe_next_score",
                      "type": 291,
                      "typeName": "Option<ElectionScore>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Set a new value for `MinimumUntrustedScore`.",
                    "",
                    "Dispatch origin must be aligned with `T::ForceOrigin`.",
                    "",
                    "This check can be turned off by setting the value to `None`."
                  ]
                },
                {
                  "name": "set_emergency_election_result",
                  "fields": [
                    {
                      "name": "supports",
                      "type": 292,
                      "typeName": "Supports<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Set a solution in the queue, to be handed out to the client of this pallet in the next",
                    "call to `ElectionProvider::elect`.",
                    "",
                    "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.",
                    "",
                    "The solution is not checked for any feasibility and is assumed to be trustworthy, as any",
                    "feasibility check itself can in principle cause the election process to fail (due to",
                    "memory/weight constrains)."
                  ]
                },
                {
                  "name": "submit",
                  "fields": [
                    {
                      "name": "raw_solution",
                      "type": 237,
                      "typeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Submit a solution for the signed phase.",
                    "",
                    "The dispatch origin fo this call must be __signed__.",
                    "",
                    "The solution is potentially queued, based on the claimed score and processed at the end",
                    "of the signed phase.",
                    "",
                    "A deposit is reserved and recorded for the solution. Based on the outcome, the solution",
                    "might be rewarded, slashed, or get all or a part of the deposit back."
                  ]
                },
                {
                  "name": "governance_fallback",
                  "fields": [
                    {
                      "name": "maybe_max_voters",
                      "type": 141,
                      "typeName": "Option<u32>",
                      "docs": []
                    },
                    {
                      "name": "maybe_max_targets",
                      "type": 141,
                      "typeName": "Option<u32>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Trigger the governance fallback.",
                    "",
                    "This can only be called when [`Phase::Emergency`] is enabled, as an alternative to",
                    "calling [`Call::set_emergency_election_result`]."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 237,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "RawSolution"
            ],
            "params": [
              {
                "name": "S",
                "type": 238
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "solution",
                  "type": 238,
                  "typeName": "S",
                  "docs": []
                },
                {
                  "name": "score",
                  "type": 289,
                  "typeName": "ElectionScore",
                  "docs": []
                },
                {
                  "name": "round",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 238,
          "type": {
            "path": [
              "polkadot_runtime",
              "NposCompactSolution16"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "votes1",
                  "type": 239,
                  "docs": []
                },
                {
                  "name": "votes2",
                  "type": 242,
                  "docs": []
                },
                {
                  "name": "votes3",
                  "type": 247,
                  "docs": []
                },
                {
                  "name": "votes4",
                  "type": 250,
                  "docs": []
                },
                {
                  "name": "votes5",
                  "type": 253,
                  "docs": []
                },
                {
                  "name": "votes6",
                  "type": 256,
                  "docs": []
                },
                {
                  "name": "votes7",
                  "type": 259,
                  "docs": []
                },
                {
                  "name": "votes8",
                  "type": 262,
                  "docs": []
                },
                {
                  "name": "votes9",
                  "type": 265,
                  "docs": []
                },
                {
                  "name": "votes10",
                  "type": 268,
                  "docs": []
                },
                {
                  "name": "votes11",
                  "type": 271,
                  "docs": []
                },
                {
                  "name": "votes12",
                  "type": 274,
                  "docs": []
                },
                {
                  "name": "votes13",
                  "type": 277,
                  "docs": []
                },
                {
                  "name": "votes14",
                  "type": 280,
                  "docs": []
                },
                {
                  "name": "votes15",
                  "type": 283,
                  "docs": []
                },
                {
                  "name": "votes16",
                  "type": 286,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 239,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 240
            },
            "docs": []
          }
        },
        {
          "id": 240,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                91,
                241
              ]
            },
            "docs": []
          }
        },
        {
          "id": 241,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "compact",
              "value": 77
            },
            "docs": []
          }
        },
        {
          "id": 242,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 243
            },
            "docs": []
          }
        },
        {
          "id": 243,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                91,
                244,
                241
              ]
            },
            "docs": []
          }
        },
        {
          "id": 244,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                241,
                245
              ]
            },
            "docs": []
          }
        },
        {
          "id": 245,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "compact",
              "value": 246
            },
            "docs": []
          }
        },
        {
          "id": 246,
          "type": {
            "path": [
              "sp_arithmetic",
              "per_things",
              "PerU16"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 77,
                  "typeName": "u16",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 247,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 248
            },
            "docs": []
          }
        },
        {
          "id": 248,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                91,
                249,
                241
              ]
            },
            "docs": []
          }
        },
        {
          "id": 249,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 2,
                "type": 244
              }
            },
            "docs": []
          }
        },
        {
          "id": 250,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 251
            },
            "docs": []
          }
        },
        {
          "id": 251,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                91,
                252,
                241
              ]
            },
            "docs": []
          }
        },
        {
          "id": 252,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 3,
                "type": 244
              }
            },
            "docs": []
          }
        },
        {
          "id": 253,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 254
            },
            "docs": []
          }
        },
        {
          "id": 254,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                91,
                255,
                241
              ]
            },
            "docs": []
          }
        },
        {
          "id": 255,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 4,
                "type": 244
              }
            },
            "docs": []
          }
        },
        {
          "id": 256,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 257
            },
            "docs": []
          }
        },
        {
          "id": 257,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                91,
                258,
                241
              ]
            },
            "docs": []
          }
        },
        {
          "id": 258,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 5,
                "type": 244
              }
            },
            "docs": []
          }
        },
        {
          "id": 259,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 260
            },
            "docs": []
          }
        },
        {
          "id": 260,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                91,
                261,
                241
              ]
            },
            "docs": []
          }
        },
        {
          "id": 261,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 6,
                "type": 244
              }
            },
            "docs": []
          }
        },
        {
          "id": 262,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 263
            },
            "docs": []
          }
        },
        {
          "id": 263,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                91,
                264,
                241
              ]
            },
            "docs": []
          }
        },
        {
          "id": 264,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 7,
                "type": 244
              }
            },
            "docs": []
          }
        },
        {
          "id": 265,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 266
            },
            "docs": []
          }
        },
        {
          "id": 266,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                91,
                267,
                241
              ]
            },
            "docs": []
          }
        },
        {
          "id": 267,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 8,
                "type": 244
              }
            },
            "docs": []
          }
        },
        {
          "id": 268,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 269
            },
            "docs": []
          }
        },
        {
          "id": 269,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                91,
                270,
                241
              ]
            },
            "docs": []
          }
        },
        {
          "id": 270,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 9,
                "type": 244
              }
            },
            "docs": []
          }
        },
        {
          "id": 271,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 272
            },
            "docs": []
          }
        },
        {
          "id": 272,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                91,
                273,
                241
              ]
            },
            "docs": []
          }
        },
        {
          "id": 273,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 10,
                "type": 244
              }
            },
            "docs": []
          }
        },
        {
          "id": 274,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 275
            },
            "docs": []
          }
        },
        {
          "id": 275,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                91,
                276,
                241
              ]
            },
            "docs": []
          }
        },
        {
          "id": 276,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 11,
                "type": 244
              }
            },
            "docs": []
          }
        },
        {
          "id": 277,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 278
            },
            "docs": []
          }
        },
        {
          "id": 278,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                91,
                279,
                241
              ]
            },
            "docs": []
          }
        },
        {
          "id": 279,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 12,
                "type": 244
              }
            },
            "docs": []
          }
        },
        {
          "id": 280,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 281
            },
            "docs": []
          }
        },
        {
          "id": 281,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                91,
                282,
                241
              ]
            },
            "docs": []
          }
        },
        {
          "id": 282,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 13,
                "type": 244
              }
            },
            "docs": []
          }
        },
        {
          "id": 283,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 284
            },
            "docs": []
          }
        },
        {
          "id": 284,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                91,
                285,
                241
              ]
            },
            "docs": []
          }
        },
        {
          "id": 285,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 14,
                "type": 244
              }
            },
            "docs": []
          }
        },
        {
          "id": 286,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 287
            },
            "docs": []
          }
        },
        {
          "id": 287,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                91,
                288,
                241
              ]
            },
            "docs": []
          }
        },
        {
          "id": 288,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 15,
                "type": 244
              }
            },
            "docs": []
          }
        },
        {
          "id": 289,
          "type": {
            "path": [
              "sp_npos_elections",
              "ElectionScore"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "minimal_stake",
                  "type": 6,
                  "typeName": "ExtendedBalance",
                  "docs": []
                },
                {
                  "name": "sum_stake",
                  "type": 6,
                  "typeName": "ExtendedBalance",
                  "docs": []
                },
                {
                  "name": "sum_stake_squared",
                  "type": 6,
                  "typeName": "ExtendedBalance",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 290,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "SolutionOrSnapshotSize"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "voters",
                  "type": 91,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "targets",
                  "type": 91,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 291,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 289
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 289,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 292,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 293
            },
            "docs": []
          }
        },
        {
          "id": 293,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                0,
                294
              ]
            },
            "docs": []
          }
        },
        {
          "id": 294,
          "type": {
            "path": [
              "sp_npos_elections",
              "Support"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "total",
                  "type": 6,
                  "typeName": "ExtendedBalance",
                  "docs": []
                },
                {
                  "name": "voters",
                  "type": 71,
                  "typeName": "Vec<(AccountId, ExtendedBalance)>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 295,
          "type": {
            "path": [
              "pallet_bags_list",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "rebag",
                  "fields": [
                    {
                      "name": "dislocated",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Declare that some `dislocated` account has, through rewards or penalties, sufficiently",
                    "changed its score that it should properly fall into a different bag than its current",
                    "one.",
                    "",
                    "Anyone can call this function about any potentially dislocated account.",
                    "",
                    "Will always update the stored score of `dislocated` to the correct score, based on",
                    "`ScoreProvider`.",
                    "",
                    "If `dislocated` does not exists, it returns an error."
                  ]
                },
                {
                  "name": "put_in_front_of",
                  "fields": [
                    {
                      "name": "lighter",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Move the caller's Id directly in front of `lighter`.",
                    "",
                    "The dispatch origin for this call must be _Signed_ and can only be called by the Id of",
                    "the account going in front of `lighter`.",
                    "",
                    "Only works if",
                    "- both nodes are within the same bag,",
                    "- and `origin` has a greater `Score` than `lighter`."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 296,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "join",
                  "fields": [
                    {
                      "name": "amount",
                      "type": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Stake funds with a pool. The amount to bond is transferred from the member to the",
                    "pools account and immediately increases the pools bond.",
                    "",
                    "# Note",
                    "",
                    "* An account can only be a member of a single pool.",
                    "* An account cannot join the same pool multiple times.",
                    "* This call will *not* dust the member account, so the member must have at least",
                    "  `existential deposit + amount` in their account.",
                    "* Only a pool with [`PoolState::Open`] can be joined"
                  ]
                },
                {
                  "name": "bond_extra",
                  "fields": [
                    {
                      "name": "extra",
                      "type": 297,
                      "typeName": "BondExtra<BalanceOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Bond `extra` more funds from `origin` into the pool to which they already belong.",
                    "",
                    "Additional funds can come from either the free balance of the account, of from the",
                    "accumulated rewards, see [`BondExtra`].",
                    "",
                    "Bonding extra funds implies an automatic payout of all pending rewards as well.",
                    "See `bond_extra_other` to bond pending rewards of `other` members."
                  ]
                },
                {
                  "name": "claim_payout",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "A bonded member can use this to claim their payout based on the rewards that the pool",
                    "has accumulated since their last claimed payout (OR since joining if this is their first",
                    "time claiming rewards). The payout will be transferred to the member's account.",
                    "",
                    "The member will earn rewards pro rata based on the members stake vs the sum of the",
                    "members in the pools stake. Rewards do not \"expire\".",
                    "",
                    "See `claim_payout_other` to caim rewards on bahalf of some `other` pool member."
                  ]
                },
                {
                  "name": "unbond",
                  "fields": [
                    {
                      "name": "member_account",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "unbonding_points",
                      "type": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Unbond up to `unbonding_points` of the `member_account`'s funds from the pool. It",
                    "implicitly collects the rewards one last time, since not doing so would mean some",
                    "rewards would be forfeited.",
                    "",
                    "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
                    "account).",
                    "",
                    "# Conditions for a permissionless dispatch.",
                    "",
                    "* The pool is blocked and the caller is either the root or bouncer. This is refereed to",
                    "  as a kick.",
                    "* The pool is destroying and the member is not the depositor.",
                    "* The pool is destroying, the member is the depositor and no other members are in the",
                    "  pool.",
                    "",
                    "## Conditions for permissioned dispatch (i.e. the caller is also the",
                    "`member_account`):",
                    "",
                    "* The caller is not the depositor.",
                    "* The caller is the depositor, the pool is destroying and no other members are in the",
                    "  pool.",
                    "",
                    "# Note",
                    "",
                    "If there are too many unlocking chunks to unbond with the pool account,",
                    "[`Call::pool_withdraw_unbonded`] can be called to try and minimize unlocking chunks.",
                    "The [`StakingInterface::unbond`] will implicitly call [`Call::pool_withdraw_unbonded`]",
                    "to try to free chunks if necessary (ie. if unbound was called and no unlocking chunks",
                    "are available). However, it may not be possible to release the current unlocking chunks,",
                    "in which case, the result of this call will likely be the `NoMoreChunks` error from the",
                    "staking system."
                  ]
                },
                {
                  "name": "pool_withdraw_unbonded",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "num_slashing_spans",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Call `withdraw_unbonded` for the pools account. This call can be made by any account.",
                    "",
                    "This is useful if their are too many unlocking chunks to call `unbond`, and some",
                    "can be cleared by withdrawing. In the case there are too many unlocking chunks, the user",
                    "would probably see an error like `NoMoreChunks` emitted from the staking system when",
                    "they attempt to unbond."
                  ]
                },
                {
                  "name": "withdraw_unbonded",
                  "fields": [
                    {
                      "name": "member_account",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "num_slashing_spans",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Withdraw unbonded funds from `member_account`. If no bonded funds can be unbonded, an",
                    "error is returned.",
                    "",
                    "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
                    "account).",
                    "",
                    "# Conditions for a permissionless dispatch",
                    "",
                    "* The pool is in destroy mode and the target is not the depositor.",
                    "* The target is the depositor and they are the only member in the sub pools.",
                    "* The pool is blocked and the caller is either the root or bouncer.",
                    "",
                    "# Conditions for permissioned dispatch",
                    "",
                    "* The caller is the target and they are not the depositor.",
                    "",
                    "# Note",
                    "",
                    "If the target is the depositor, the pool will be destroyed."
                  ]
                },
                {
                  "name": "create",
                  "fields": [
                    {
                      "name": "amount",
                      "type": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "root",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "nominator",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "bouncer",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Create a new delegation pool.",
                    "",
                    "# Arguments",
                    "",
                    "* `amount` - The amount of funds to delegate to the pool. This also acts of a sort of",
                    "  deposit since the pools creator cannot fully unbond funds until the pool is being",
                    "  destroyed.",
                    "* `index` - A disambiguation index for creating the account. Likely only useful when",
                    "  creating multiple pools in the same extrinsic.",
                    "* `root` - The account to set as [`PoolRoles::root`].",
                    "* `nominator` - The account to set as the [`PoolRoles::nominator`].",
                    "* `bouncer` - The account to set as the [`PoolRoles::bouncer`].",
                    "",
                    "# Note",
                    "",
                    "In addition to `amount`, the caller will transfer the existential deposit; so the caller",
                    "needs at have at least `amount + existential_deposit` transferrable."
                  ]
                },
                {
                  "name": "create_with_pool_id",
                  "fields": [
                    {
                      "name": "amount",
                      "type": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "root",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "nominator",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "bouncer",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Create a new delegation pool with a previously used pool id",
                    "",
                    "# Arguments",
                    "",
                    "same as `create` with the inclusion of",
                    "* `pool_id` - `A valid PoolId."
                  ]
                },
                {
                  "name": "nominate",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "validators",
                      "type": 104,
                      "typeName": "Vec<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Nominate on behalf of the pool.",
                    "",
                    "The dispatch origin of this call must be signed by the pool nominator or the pool",
                    "root role.",
                    "",
                    "This directly forward the call to the staking pallet, on behalf of the pool bonded",
                    "account."
                  ]
                },
                {
                  "name": "set_state",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "state",
                      "type": 298,
                      "typeName": "PoolState",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Set a new state for the pool.",
                    "",
                    "If a pool is already in the `Destroying` state, then under no condition can its state",
                    "change again.",
                    "",
                    "The dispatch origin of this call must be either:",
                    "",
                    "1. signed by the bouncer, or the root role of the pool,",
                    "2. if the pool conditions to be open are NOT met (as described by `ok_to_be_open`), and",
                    "   then the state of the pool can be permissionlessly changed to `Destroying`."
                  ]
                },
                {
                  "name": "set_metadata",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "metadata",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Set a new metadata for the pool.",
                    "",
                    "The dispatch origin of this call must be signed by the bouncer, or the root role of the",
                    "pool."
                  ]
                },
                {
                  "name": "set_configs",
                  "fields": [
                    {
                      "name": "min_join_bond",
                      "type": 299,
                      "typeName": "ConfigOp<BalanceOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "min_create_bond",
                      "type": 299,
                      "typeName": "ConfigOp<BalanceOf<T>>",
                      "docs": []
                    },
                    {
                      "name": "max_pools",
                      "type": 300,
                      "typeName": "ConfigOp<u32>",
                      "docs": []
                    },
                    {
                      "name": "max_members",
                      "type": 300,
                      "typeName": "ConfigOp<u32>",
                      "docs": []
                    },
                    {
                      "name": "max_members_per_pool",
                      "type": 300,
                      "typeName": "ConfigOp<u32>",
                      "docs": []
                    },
                    {
                      "name": "global_max_commission",
                      "type": 301,
                      "typeName": "ConfigOp<Perbill>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Update configurations for the nomination pools. The origin for this call must be",
                    "Root.",
                    "",
                    "# Arguments",
                    "",
                    "* `min_join_bond` - Set [`MinJoinBond`].",
                    "* `min_create_bond` - Set [`MinCreateBond`].",
                    "* `max_pools` - Set [`MaxPools`].",
                    "* `max_members` - Set [`MaxPoolMembers`].",
                    "* `max_members_per_pool` - Set [`MaxPoolMembersPerPool`].",
                    "* `global_max_commission` - Set [`GlobalMaxCommission`]."
                  ]
                },
                {
                  "name": "update_roles",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "new_root",
                      "type": 302,
                      "typeName": "ConfigOp<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "new_nominator",
                      "type": 302,
                      "typeName": "ConfigOp<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "new_bouncer",
                      "type": 302,
                      "typeName": "ConfigOp<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "Update the roles of the pool.",
                    "",
                    "The root is the only entity that can change any of the roles, including itself,",
                    "excluding the depositor, who can never change.",
                    "",
                    "It emits an event, notifying UIs of the role change. This event is quite relevant to",
                    "most pool members and they should be informed of changes to pool roles."
                  ]
                },
                {
                  "name": "chill",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "Chill on behalf of the pool.",
                    "",
                    "The dispatch origin of this call must be signed by the pool nominator or the pool",
                    "root role, same as [`Pallet::nominate`].",
                    "",
                    "This directly forward the call to the staking pallet, on behalf of the pool bonded",
                    "account."
                  ]
                },
                {
                  "name": "bond_extra_other",
                  "fields": [
                    {
                      "name": "member",
                      "type": 100,
                      "typeName": "AccountIdLookupOf<T>",
                      "docs": []
                    },
                    {
                      "name": "extra",
                      "type": 297,
                      "typeName": "BondExtra<BalanceOf<T>>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "`origin` bonds funds from `extra` for some pool member `member` into their respective",
                    "pools.",
                    "",
                    "`origin` can bond extra funds from free balance or pending rewards when `origin ==",
                    "other`.",
                    "",
                    "In the case of `origin != other`, `origin` can only bond extra pending rewards of",
                    "`other` members assuming set_claim_permission for the given member is",
                    "`PermissionlessAll` or `PermissionlessCompound`."
                  ]
                },
                {
                  "name": "set_claim_permission",
                  "fields": [
                    {
                      "name": "permission",
                      "type": 303,
                      "typeName": "ClaimPermission",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Allows a pool member to set a claim permission to allow or disallow permissionless",
                    "bonding and withdrawing.",
                    "",
                    "By default, this is `Permissioned`, which implies only the pool member themselves can",
                    "claim their pending rewards. If a pool member wishes so, they can set this to",
                    "`PermissionlessAll` to allow any account to claim their rewards and bond extra to the",
                    "pool.",
                    "",
                    "# Arguments",
                    "",
                    "* `origin` - Member of a pool.",
                    "* `actor` - Account to claim reward. // improve this"
                  ]
                },
                {
                  "name": "claim_payout_other",
                  "fields": [
                    {
                      "name": "other",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": [
                    "`origin` can claim payouts on some pool member `other`'s behalf.",
                    "",
                    "Pool member `other` must have a `PermissionlessAll` or `PermissionlessWithdraw` in order",
                    "for this call to be successful."
                  ]
                },
                {
                  "name": "set_commission",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "new_commission",
                      "type": 304,
                      "typeName": "Option<(Perbill, T::AccountId)>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": [
                    "Set the commission of a pool.",
                    "Both a commission percentage and a commission payee must be provided in the `current`",
                    "tuple. Where a `current` of `None` is provided, any current commission will be removed.",
                    "",
                    "- If a `None` is supplied to `new_commission`, existing commission will be removed."
                  ]
                },
                {
                  "name": "set_commission_max",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "max_commission",
                      "type": 41,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "Set the maximum commission of a pool.",
                    "",
                    "- Initial max can be set to any `Perbill`, and only smaller values thereafter.",
                    "- Current commission will be lowered in the event it is higher than a new max",
                    "  commission."
                  ]
                },
                {
                  "name": "set_commission_change_rate",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "change_rate",
                      "type": 306,
                      "typeName": "CommissionChangeRate<T::BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": [
                    "Set the commission change rate for a pool.",
                    "",
                    "Initial change rate is not bounded, whereas subsequent updates can only be more",
                    "restrictive than the current."
                  ]
                },
                {
                  "name": "claim_commission",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": [
                    "Claim pending commission.",
                    "",
                    "The dispatch origin of this call must be signed by the `root` role of the pool. Pending",
                    "commission is paid out and added to total claimed commission`. Total pending commission",
                    "is reset to zero. the current."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 297,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "BondExtra"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "FreeBalance",
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Rewards",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 298,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "PoolState"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Open",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Blocked",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Destroying",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 299,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "ConfigOp"
            ],
            "params": [
              {
                "name": "T",
                "type": 6
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 300,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "ConfigOp"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 301,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "ConfigOp"
            ],
            "params": [
              {
                "name": "T",
                "type": 41
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "type": 41,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 302,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "ConfigOp"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Noop",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Set",
                  "fields": [
                    {
                      "type": 0,
                      "typeName": "T",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Remove",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 303,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "ClaimPermission"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Permissioned",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "PermissionlessCompound",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "PermissionlessWithdraw",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "PermissionlessAll",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 304,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 305
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 305,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 305,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                41,
                0
              ]
            },
            "docs": []
          }
        },
        {
          "id": 306,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "CommissionChangeRate"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "max_increase",
                  "type": 41,
                  "typeName": "Perbill",
                  "docs": []
                },
                {
                  "name": "min_delay",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 307,
          "type": {
            "path": [
              "pallet_fast_unstake",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "register_fast_unstake",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Register oneself for fast-unstake.",
                    "",
                    "The dispatch origin of this call must be signed by the controller account, similar to",
                    "`staking::unbond`.",
                    "",
                    "The stash associated with the origin must have no ongoing unlocking chunks. If",
                    "successful, this will fully unbond and chill the stash. Then, it will enqueue the stash",
                    "to be checked in further blocks.",
                    "",
                    "If by the time this is called, the stash is actually eligible for fast-unstake, then",
                    "they are guaranteed to remain eligible, because the call will chill them as well.",
                    "",
                    "If the check works, the entire staking data is removed, i.e. the stash is fully",
                    "unstaked.",
                    "",
                    "If the check fails, the stash remains chilled and waiting for being unbonded as in with",
                    "the normal staking system, but they lose part of their unbonding chunks due to consuming",
                    "the chain's resources."
                  ]
                },
                {
                  "name": "deregister",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Deregister oneself from the fast-unstake.",
                    "",
                    "This is useful if one is registered, they are still waiting, and they change their mind.",
                    "",
                    "Note that the associated stash is still fully unbonded and chilled as a consequence of",
                    "calling `register_fast_unstake`. This should probably be followed by a call to",
                    "`Staking::rebond`."
                  ]
                },
                {
                  "name": "control",
                  "fields": [
                    {
                      "name": "eras_to_check",
                      "type": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Control the operation of this pallet.",
                    "",
                    "Dispatch origin must be signed by the [`Config::ControlOrigin`]."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 308,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "configuration",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "set_validation_upgrade_cooldown",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the validation upgrade cooldown."
                  ]
                },
                {
                  "name": "set_validation_upgrade_delay",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Set the validation upgrade delay."
                  ]
                },
                {
                  "name": "set_code_retention_period",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Set the acceptance period for an included candidate."
                  ]
                },
                {
                  "name": "set_max_code_size",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Set the max validation code size for incoming upgrades."
                  ]
                },
                {
                  "name": "set_max_pov_size",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Set the max POV block size for incoming upgrades."
                  ]
                },
                {
                  "name": "set_max_head_data_size",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Set the max head data size for paras."
                  ]
                },
                {
                  "name": "set_parathread_cores",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Set the number of parathread execution cores."
                  ]
                },
                {
                  "name": "set_parathread_retries",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Set the number of retries for a particular parathread."
                  ]
                },
                {
                  "name": "set_group_rotation_frequency",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Set the parachain validator-group rotation frequency"
                  ]
                },
                {
                  "name": "set_chain_availability_period",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Set the availability period for parachains."
                  ]
                },
                {
                  "name": "set_thread_availability_period",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Set the availability period for parathreads."
                  ]
                },
                {
                  "name": "set_scheduling_lookahead",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Set the scheduling lookahead, in expected number of blocks at peak throughput."
                  ]
                },
                {
                  "name": "set_max_validators_per_core",
                  "fields": [
                    {
                      "name": "new",
                      "type": 141,
                      "typeName": "Option<u32>",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "Set the maximum number of validators to assign to any core."
                  ]
                },
                {
                  "name": "set_max_validators",
                  "fields": [
                    {
                      "name": "new",
                      "type": 141,
                      "typeName": "Option<u32>",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "Set the maximum number of validators to use in parachain consensus."
                  ]
                },
                {
                  "name": "set_dispute_period",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "SessionIndex",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Set the dispute period, in number of sessions to keep for disputes."
                  ]
                },
                {
                  "name": "set_dispute_post_conclusion_acceptance_period",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "Set the dispute post conclusion acceptance period."
                  ]
                },
                {
                  "name": "set_no_show_slots",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "Set the no show slots, in number of number of consensus slots.",
                    "Must be at least 1."
                  ]
                },
                {
                  "name": "set_n_delay_tranches",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": [
                    "Set the total number of delay tranches."
                  ]
                },
                {
                  "name": "set_zeroth_delay_tranche_width",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": [
                    "Set the zeroth delay tranche width."
                  ]
                },
                {
                  "name": "set_needed_approvals",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": [
                    "Set the number of validators needed to approve a block."
                  ]
                },
                {
                  "name": "set_relay_vrf_modulo_samples",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": [
                    "Set the number of samples to do of the `RelayVRFModulo` approval assignment criterion."
                  ]
                },
                {
                  "name": "set_max_upward_queue_count",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": [
                    "Sets the maximum items that can present in a upward dispatch queue at once."
                  ]
                },
                {
                  "name": "set_max_upward_queue_size",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": [
                    "Sets the maximum total size of items that can present in a upward dispatch queue at once."
                  ]
                },
                {
                  "name": "set_max_downward_message_size",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": [
                    "Set the critical downward message size."
                  ]
                },
                {
                  "name": "set_max_upward_message_size",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 27,
                  "docs": [
                    "Sets the maximum size of an upward message that can be sent by a candidate."
                  ]
                },
                {
                  "name": "set_max_upward_message_num_per_candidate",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": [
                    "Sets the maximum number of messages that a candidate can contain."
                  ]
                },
                {
                  "name": "set_hrmp_open_request_ttl",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": [
                    "Sets the number of sessions after which an HRMP open channel request expires."
                  ]
                },
                {
                  "name": "set_hrmp_sender_deposit",
                  "fields": [
                    {
                      "name": "new",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": [
                    "Sets the amount of funds that the sender should provide for opening an HRMP channel."
                  ]
                },
                {
                  "name": "set_hrmp_recipient_deposit",
                  "fields": [
                    {
                      "name": "new",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": [
                    "Sets the amount of funds that the recipient should provide for accepting opening an HRMP",
                    "channel."
                  ]
                },
                {
                  "name": "set_hrmp_channel_max_capacity",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": [
                    "Sets the maximum number of messages allowed in an HRMP channel at once."
                  ]
                },
                {
                  "name": "set_hrmp_channel_max_total_size",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": [
                    "Sets the maximum total size of messages in bytes allowed in an HRMP channel at once."
                  ]
                },
                {
                  "name": "set_hrmp_max_parachain_inbound_channels",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": [
                    "Sets the maximum number of inbound HRMP channels a parachain is allowed to accept."
                  ]
                },
                {
                  "name": "set_hrmp_max_parathread_inbound_channels",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 35,
                  "docs": [
                    "Sets the maximum number of inbound HRMP channels a parathread is allowed to accept."
                  ]
                },
                {
                  "name": "set_hrmp_channel_max_message_size",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": [
                    "Sets the maximum size of a message that could ever be put into an HRMP channel."
                  ]
                },
                {
                  "name": "set_hrmp_max_parachain_outbound_channels",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": [
                    "Sets the maximum number of outbound HRMP channels a parachain is allowed to open."
                  ]
                },
                {
                  "name": "set_hrmp_max_parathread_outbound_channels",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 38,
                  "docs": [
                    "Sets the maximum number of outbound HRMP channels a parathread is allowed to open."
                  ]
                },
                {
                  "name": "set_hrmp_max_message_num_per_candidate",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 39,
                  "docs": [
                    "Sets the maximum number of outbound HRMP messages can be sent by a candidate."
                  ]
                },
                {
                  "name": "set_pvf_checking_enabled",
                  "fields": [
                    {
                      "name": "new",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 41,
                  "docs": [
                    "Enable or disable PVF pre-checking. Consult the field documentation prior executing."
                  ]
                },
                {
                  "name": "set_pvf_voting_ttl",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "SessionIndex",
                      "docs": []
                    }
                  ],
                  "index": 42,
                  "docs": [
                    "Set the number of session changes after which a PVF pre-checking voting is rejected."
                  ]
                },
                {
                  "name": "set_minimum_validation_upgrade_delay",
                  "fields": [
                    {
                      "name": "new",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 43,
                  "docs": [
                    "Sets the minimum delay between announcing the upgrade block for a parachain until the",
                    "upgrade taking place.",
                    "",
                    "See the field documentation for information and constraints for the new value."
                  ]
                },
                {
                  "name": "set_bypass_consistency_check",
                  "fields": [
                    {
                      "name": "new",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 44,
                  "docs": [
                    "Setting this to true will disable consistency checks for the configuration setters.",
                    "Use with caution."
                  ]
                },
                {
                  "name": "set_async_backing_params",
                  "fields": [
                    {
                      "name": "new",
                      "type": 309,
                      "typeName": "AsyncBackingParams",
                      "docs": []
                    }
                  ],
                  "index": 45,
                  "docs": [
                    "Set the asynchronous backing parameters."
                  ]
                },
                {
                  "name": "set_executor_params",
                  "fields": [
                    {
                      "name": "new",
                      "type": 310,
                      "typeName": "ExecutorParams",
                      "docs": []
                    }
                  ],
                  "index": 46,
                  "docs": [
                    "Set PVF executor parameters."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 309,
          "type": {
            "path": [
              "polkadot_primitives",
              "vstaging",
              "AsyncBackingParams"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "max_candidate_depth",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "allowed_ancestry_len",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 310,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "executor_params",
              "ExecutorParams"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 311,
                  "typeName": "Vec<ExecutorParam>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 311,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 312
            },
            "docs": []
          }
        },
        {
          "id": 312,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "executor_params",
              "ExecutorParam"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "MaxMemoryPages",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "StackLogicalMax",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "StackNativeMax",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "PrecheckingMaxMemory",
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "PvfPrepTimeout",
                  "fields": [
                    {
                      "type": 313,
                      "typeName": "PvfPrepTimeoutKind",
                      "docs": []
                    },
                    {
                      "type": 11,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "PvfExecTimeout",
                  "fields": [
                    {
                      "type": 314,
                      "typeName": "PvfExecTimeoutKind",
                      "docs": []
                    },
                    {
                      "type": 11,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "WasmExtBulkMemory",
                  "fields": [],
                  "index": 7,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 313,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "PvfPrepTimeoutKind"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Precheck",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Lenient",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 314,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "PvfExecTimeoutKind"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Backing",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Approval",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 315,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "shared",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": []
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 316,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "inclusion",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": []
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 317,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras_inherent",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "enter",
                  "fields": [
                    {
                      "name": "data",
                      "type": 318,
                      "typeName": "ParachainsInherentData<T::Header>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Enter the paras inherent. This will process bitfields and backed candidates."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 318,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "InherentData"
            ],
            "params": [
              {
                "name": "HDR",
                "type": 89
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "bitfields",
                  "type": 319,
                  "typeName": "UncheckedSignedAvailabilityBitfields",
                  "docs": []
                },
                {
                  "name": "backed_candidates",
                  "type": 326,
                  "typeName": "Vec<BackedCandidate<HDR::Hash>>",
                  "docs": []
                },
                {
                  "name": "disputes",
                  "type": 343,
                  "typeName": "MultiDisputeStatementSet",
                  "docs": []
                },
                {
                  "name": "parent_header",
                  "type": 89,
                  "typeName": "HDR",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 319,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 320
            },
            "docs": []
          }
        },
        {
          "id": 320,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "signed",
              "UncheckedSigned"
            ],
            "params": [
              {
                "name": "Payload",
                "type": 321
              },
              {
                "name": "RealPayload",
                "type": 321
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "payload",
                  "type": 321,
                  "typeName": "Payload",
                  "docs": []
                },
                {
                  "name": "validator_index",
                  "type": 324,
                  "typeName": "ValidatorIndex",
                  "docs": []
                },
                {
                  "name": "signature",
                  "type": 325,
                  "typeName": "ValidatorSignature",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 321,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "AvailabilityBitfield"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 322,
                  "typeName": "BitVec<u8, bitvec::order::Lsb0>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 322,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "bitSequence",
              "value": {
                "bitStoreType": 2,
                "bitOrderType": 323
              }
            },
            "docs": []
          }
        },
        {
          "id": 323,
          "type": {
            "path": [
              "bitvec",
              "order",
              "Lsb0"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": []
            },
            "docs": []
          }
        },
        {
          "id": 324,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "ValidatorIndex"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 325,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "validator_app",
              "Signature"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 138,
                  "typeName": "sr25519::Signature",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 326,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 327
            },
            "docs": []
          }
        },
        {
          "id": 327,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "BackedCandidate"
            ],
            "params": [
              {
                "name": "H",
                "type": 12
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "candidate",
                  "type": 328,
                  "typeName": "CommittedCandidateReceipt<H>",
                  "docs": []
                },
                {
                  "name": "validity_votes",
                  "type": 341,
                  "typeName": "Vec<ValidityAttestation>",
                  "docs": []
                },
                {
                  "name": "validator_indices",
                  "type": 322,
                  "typeName": "BitVec<u8, bitvec::order::Lsb0>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 328,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "CommittedCandidateReceipt"
            ],
            "params": [
              {
                "name": "H",
                "type": 12
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "descriptor",
                  "type": 329,
                  "typeName": "CandidateDescriptor<H>",
                  "docs": []
                },
                {
                  "name": "commitments",
                  "type": 333,
                  "typeName": "CandidateCommitments",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 329,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "CandidateDescriptor"
            ],
            "params": [
              {
                "name": "H",
                "type": 12
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "para_id",
                  "type": 162,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "relay_parent",
                  "type": 12,
                  "typeName": "H",
                  "docs": []
                },
                {
                  "name": "collator",
                  "type": 330,
                  "typeName": "CollatorId",
                  "docs": []
                },
                {
                  "name": "persisted_validation_data_hash",
                  "type": 12,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": "pov_hash",
                  "type": 12,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": "erasure_root",
                  "type": 12,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": "signature",
                  "type": 331,
                  "typeName": "CollatorSignature",
                  "docs": []
                },
                {
                  "name": "para_head",
                  "type": 12,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": "validation_code_hash",
                  "type": 332,
                  "typeName": "ValidationCodeHash",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 330,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "collator_app",
              "Public"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 56,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 331,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "collator_app",
              "Signature"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 138,
                  "typeName": "sr25519::Signature",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 332,
          "type": {
            "path": [
              "polkadot_parachain",
              "primitives",
              "ValidationCodeHash"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 12,
                  "typeName": "Hash",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 333,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "CandidateCommitments"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "upward_messages",
                  "type": 334,
                  "typeName": "UpwardMessages",
                  "docs": []
                },
                {
                  "name": "horizontal_messages",
                  "type": 335,
                  "typeName": "HorizontalMessages",
                  "docs": []
                },
                {
                  "name": "new_validation_code",
                  "type": 338,
                  "typeName": "Option<ValidationCode>",
                  "docs": []
                },
                {
                  "name": "head_data",
                  "type": 340,
                  "typeName": "HeadData",
                  "docs": []
                },
                {
                  "name": "processed_downward_messages",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "hrmp_watermark",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 334,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 13
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 83,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 335,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 336
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 337,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 336,
          "type": {
            "path": [
              "polkadot_core_primitives",
              "OutboundHrmpMessage"
            ],
            "params": [
              {
                "name": "Id",
                "type": 162
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "recipient",
                  "type": 162,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 13,
                  "typeName": "sp_std::vec::Vec<u8>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 337,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 336
            },
            "docs": []
          }
        },
        {
          "id": 338,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 339
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 339,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 339,
          "type": {
            "path": [
              "polkadot_parachain",
              "primitives",
              "ValidationCode"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 340,
          "type": {
            "path": [
              "polkadot_parachain",
              "primitives",
              "HeadData"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 341,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 342
            },
            "docs": []
          }
        },
        {
          "id": 342,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "ValidityAttestation"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Implicit",
                  "fields": [
                    {
                      "type": 325,
                      "typeName": "ValidatorSignature",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Explicit",
                  "fields": [
                    {
                      "type": 325,
                      "typeName": "ValidatorSignature",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 343,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 344
            },
            "docs": []
          }
        },
        {
          "id": 344,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "DisputeStatementSet"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "candidate_hash",
                  "type": 345,
                  "typeName": "CandidateHash",
                  "docs": []
                },
                {
                  "name": "session",
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "statements",
                  "type": 346,
                  "typeName": "Vec<(DisputeStatement, ValidatorIndex, ValidatorSignature)>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 345,
          "type": {
            "path": [
              "polkadot_core_primitives",
              "CandidateHash"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 12,
                  "typeName": "Hash",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 346,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 347
            },
            "docs": []
          }
        },
        {
          "id": 347,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                348,
                324,
                325
              ]
            },
            "docs": []
          }
        },
        {
          "id": 348,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "DisputeStatement"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Valid",
                  "fields": [
                    {
                      "type": 349,
                      "typeName": "ValidDisputeStatementKind",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Invalid",
                  "fields": [
                    {
                      "type": 350,
                      "typeName": "InvalidDisputeStatementKind",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 349,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "ValidDisputeStatementKind"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Explicit",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "BackingSeconded",
                  "fields": [
                    {
                      "type": 12,
                      "typeName": "Hash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "BackingValid",
                  "fields": [
                    {
                      "type": 12,
                      "typeName": "Hash",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "ApprovalChecking",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 350,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "InvalidDisputeStatementKind"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Explicit",
                  "fields": [],
                  "index": 0,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 351,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "force_set_current_code",
                  "fields": [
                    {
                      "name": "para",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "new_code",
                      "type": 339,
                      "typeName": "ValidationCode",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Set the storage for the parachain validation code immediately."
                  ]
                },
                {
                  "name": "force_set_current_head",
                  "fields": [
                    {
                      "name": "para",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "new_head",
                      "type": 340,
                      "typeName": "HeadData",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Set the storage for the current parachain head data immediately."
                  ]
                },
                {
                  "name": "force_schedule_code_upgrade",
                  "fields": [
                    {
                      "name": "para",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "new_code",
                      "type": 339,
                      "typeName": "ValidationCode",
                      "docs": []
                    },
                    {
                      "name": "relay_parent_number",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Schedule an upgrade as if it was scheduled in the given relay parent block."
                  ]
                },
                {
                  "name": "force_note_new_head",
                  "fields": [
                    {
                      "name": "para",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "new_head",
                      "type": 340,
                      "typeName": "HeadData",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Note a new block head for para within the context of the current block."
                  ]
                },
                {
                  "name": "force_queue_action",
                  "fields": [
                    {
                      "name": "para",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Put a parachain directly into the next session's action queue.",
                    "We can't queue it any sooner than this without going into the",
                    "initializer..."
                  ]
                },
                {
                  "name": "add_trusted_validation_code",
                  "fields": [
                    {
                      "name": "validation_code",
                      "type": 339,
                      "typeName": "ValidationCode",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Adds the validation code to the storage.",
                    "",
                    "The code will not be added if it is already present. Additionally, if PVF pre-checking",
                    "is running for that code, it will be instantly accepted.",
                    "",
                    "Otherwise, the code will be added into the storage. Note that the code will be added",
                    "into storage with reference count 0. This is to account the fact that there are no users",
                    "for this code yet. The caller will have to make sure that this code eventually gets",
                    "used by some parachain or removed from the storage to avoid storage leaks. For the latter",
                    "prefer to use the `poke_unused_validation_code` dispatchable to raw storage manipulation.",
                    "",
                    "This function is mainly meant to be used for upgrading parachains that do not follow",
                    "the go-ahead signal while the PVF pre-checking feature is enabled."
                  ]
                },
                {
                  "name": "poke_unused_validation_code",
                  "fields": [
                    {
                      "name": "validation_code_hash",
                      "type": 332,
                      "typeName": "ValidationCodeHash",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Remove the validation code from the storage iff the reference count is 0.",
                    "",
                    "This is better than removing the storage directly, because it will not remove the code",
                    "that was suddenly got used by some parachain while this dispatchable was pending",
                    "dispatching."
                  ]
                },
                {
                  "name": "include_pvf_check_statement",
                  "fields": [
                    {
                      "name": "stmt",
                      "type": 352,
                      "typeName": "PvfCheckStatement",
                      "docs": []
                    },
                    {
                      "name": "signature",
                      "type": 325,
                      "typeName": "ValidatorSignature",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Includes a statement for a PVF pre-checking vote. Potentially, finalizes the vote and",
                    "enacts the results if that was the last vote before achieving the supermajority."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 352,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "PvfCheckStatement"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "accept",
                  "type": 44,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "subject",
                  "type": 332,
                  "typeName": "ValidationCodeHash",
                  "docs": []
                },
                {
                  "name": "session_index",
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "validator_index",
                  "type": 324,
                  "typeName": "ValidatorIndex",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 353,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "initializer",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "force_approve",
                  "fields": [
                    {
                      "name": "up_to",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Issue a signal to the consensus engine to forcibly act as though all parachain",
                    "blocks in all relay chain blocks up to and including the given number in the current",
                    "chain are valid and should be finalized."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 354,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "hrmp",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "hrmp_init_open_channel",
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "proposed_max_capacity",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "proposed_max_message_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Initiate opening a channel from a parachain to a given recipient with given channel",
                    "parameters.",
                    "",
                    "- `proposed_max_capacity` - specifies how many messages can be in the channel at once.",
                    "- `proposed_max_message_size` - specifies the maximum size of the messages.",
                    "",
                    "These numbers are a subject to the relay-chain configuration limits.",
                    "",
                    "The channel can be opened only after the recipient confirms it and only on a session",
                    "change."
                  ]
                },
                {
                  "name": "hrmp_accept_open_channel",
                  "fields": [
                    {
                      "name": "sender",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Accept a pending open channel request from the given sender.",
                    "",
                    "The channel will be opened only on the next session boundary."
                  ]
                },
                {
                  "name": "hrmp_close_channel",
                  "fields": [
                    {
                      "name": "channel_id",
                      "type": 355,
                      "typeName": "HrmpChannelId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Initiate unilateral closing of a channel. The origin must be either the sender or the",
                    "recipient in the channel being closed.",
                    "",
                    "The closure can only happen on a session change."
                  ]
                },
                {
                  "name": "force_clean_hrmp",
                  "fields": [
                    {
                      "name": "para",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "inbound",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "outbound",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "This extrinsic triggers the cleanup of all the HRMP storage items that",
                    "a para may have. Normally this happens once per session, but this allows",
                    "you to trigger the cleanup immediately for a specific parachain.",
                    "",
                    "Origin must be Root.",
                    "",
                    "Number of inbound and outbound channels for `para` must be provided as witness data of weighing."
                  ]
                },
                {
                  "name": "force_process_hrmp_open",
                  "fields": [
                    {
                      "name": "channels",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Force process HRMP open channel requests.",
                    "",
                    "If there are pending HRMP open channel requests, you can use this",
                    "function process all of those requests immediately.",
                    "",
                    "Total number of opening channels must be provided as witness data of weighing."
                  ]
                },
                {
                  "name": "force_process_hrmp_close",
                  "fields": [
                    {
                      "name": "channels",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Force process HRMP close channel requests.",
                    "",
                    "If there are pending HRMP close channel requests, you can use this",
                    "function process all of those requests immediately.",
                    "",
                    "Total number of closing channels must be provided as witness data of weighing."
                  ]
                },
                {
                  "name": "hrmp_cancel_open_request",
                  "fields": [
                    {
                      "name": "channel_id",
                      "type": 355,
                      "typeName": "HrmpChannelId",
                      "docs": []
                    },
                    {
                      "name": "open_requests",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "This cancels a pending open channel request. It can be canceled by either of the sender",
                    "or the recipient for that request. The origin must be either of those.",
                    "",
                    "The cancellation happens immediately. It is not possible to cancel the request if it is",
                    "already accepted.",
                    "",
                    "Total number of open requests (i.e. `HrmpOpenChannelRequestsList`) must be provided as",
                    "witness data."
                  ]
                },
                {
                  "name": "force_open_hrmp_channel",
                  "fields": [
                    {
                      "name": "sender",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Open a channel from a `sender` to a `recipient` `ParaId` using the Root origin. Although",
                    "opened by Root, the `max_capacity` and `max_message_size` are still subject to the Relay",
                    "Chain's configured limits.",
                    "",
                    "Expected use is when one of the `ParaId`s involved in the channel is governed by the",
                    "Relay Chain, e.g. a common good parachain."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 355,
          "type": {
            "path": [
              "polkadot_parachain",
              "primitives",
              "HrmpChannelId"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "sender",
                  "type": 162,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 162,
                  "typeName": "Id",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 356,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "disputes",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "force_unfreeze",
                  "fields": [],
                  "index": 0,
                  "docs": []
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 357,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "disputes",
              "slashing",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "report_dispute_lost_unsigned",
                  "fields": [
                    {
                      "name": "dispute_proof",
                      "type": 358,
                      "typeName": "Box<DisputeProof>",
                      "docs": []
                    },
                    {
                      "name": "key_owner_proof",
                      "type": 94,
                      "typeName": "T::KeyOwnerProof",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 358,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "disputes",
              "slashing",
              "DisputeProof"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "time_slot",
                  "type": 359,
                  "typeName": "DisputesTimeSlot",
                  "docs": []
                },
                {
                  "name": "kind",
                  "type": 360,
                  "typeName": "SlashingOffenceKind",
                  "docs": []
                },
                {
                  "name": "validator_index",
                  "type": 324,
                  "typeName": "ValidatorIndex",
                  "docs": []
                },
                {
                  "name": "validator_id",
                  "type": 116,
                  "typeName": "ValidatorId",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 359,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "disputes",
              "slashing",
              "DisputesTimeSlot"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "session_index",
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "candidate_hash",
                  "type": 345,
                  "typeName": "CandidateHash",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 360,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "disputes",
              "slashing",
              "SlashingOffenceKind"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "ForInvalid",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AgainstValid",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 361,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "paras_registrar",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "register",
                  "fields": [
                    {
                      "name": "id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "genesis_head",
                      "type": 340,
                      "typeName": "HeadData",
                      "docs": []
                    },
                    {
                      "name": "validation_code",
                      "type": 339,
                      "typeName": "ValidationCode",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Register head data and validation code for a reserved Para Id.",
                    "",
                    "## Arguments",
                    "- `origin`: Must be called by a `Signed` origin.",
                    "- `id`: The para ID. Must be owned/managed by the `origin` signing account.",
                    "- `genesis_head`: The genesis head data of the parachain/thread.",
                    "- `validation_code`: The initial validation code of the parachain/thread.",
                    "",
                    "## Deposits/Fees",
                    "The origin signed account must reserve a corresponding deposit for the registration. Anything already",
                    "reserved previously for this para ID is accounted for.",
                    "",
                    "## Events",
                    "The `Registered` event is emitted in case of success."
                  ]
                },
                {
                  "name": "force_register",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "genesis_head",
                      "type": 340,
                      "typeName": "HeadData",
                      "docs": []
                    },
                    {
                      "name": "validation_code",
                      "type": 339,
                      "typeName": "ValidationCode",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Force the registration of a Para Id on the relay chain.",
                    "",
                    "This function must be called by a Root origin.",
                    "",
                    "The deposit taken can be specified for this registration. Any `ParaId`",
                    "can be registered, including sub-1000 IDs which are System Parachains."
                  ]
                },
                {
                  "name": "deregister",
                  "fields": [
                    {
                      "name": "id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Deregister a Para Id, freeing all data and returning any deposit.",
                    "",
                    "The caller must be Root, the `para` owner, or the `para` itself. The para must be a parathread."
                  ]
                },
                {
                  "name": "swap",
                  "fields": [
                    {
                      "name": "id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "other",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Swap a parachain with another parachain or parathread.",
                    "",
                    "The origin must be Root, the `para` owner, or the `para` itself.",
                    "",
                    "The swap will happen only if there is already an opposite swap pending. If there is not,",
                    "the swap will be stored in the pending swaps map, ready for a later confirmatory swap.",
                    "",
                    "The `ParaId`s remain mapped to the same head data and code so external code can rely on",
                    "`ParaId` to be a long-term identifier of a notional \"parachain\". However, their",
                    "scheduling info (i.e. whether they're a parathread or parachain), auction information",
                    "and the auction deposit are switched."
                  ]
                },
                {
                  "name": "remove_lock",
                  "fields": [
                    {
                      "name": "para",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Remove a manager lock from a para. This will allow the manager of a",
                    "previously locked para to deregister or swap a para without using governance.",
                    "",
                    "Can only be called by the Root origin or the parachain."
                  ]
                },
                {
                  "name": "reserve",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Reserve a Para Id on the relay chain.",
                    "",
                    "This function will reserve a new Para Id to be owned/managed by the origin account.",
                    "The origin account is able to register head data and validation code using `register` to create",
                    "a parathread. Using the Slots pallet, a parathread can then be upgraded to get a parachain slot.",
                    "",
                    "## Arguments",
                    "- `origin`: Must be called by a `Signed` origin. Becomes the manager/owner of the new para ID.",
                    "",
                    "## Deposits/Fees",
                    "The origin must reserve a deposit of `ParaDeposit` for the registration.",
                    "",
                    "## Events",
                    "The `Reserved` event is emitted in case of success, which provides the ID reserved for use."
                  ]
                },
                {
                  "name": "add_lock",
                  "fields": [
                    {
                      "name": "para",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Add a manager lock from a para. This will prevent the manager of a",
                    "para to deregister or swap a para.",
                    "",
                    "Can be called by Root, the parachain, or the parachain manager if the parachain is unlocked."
                  ]
                },
                {
                  "name": "schedule_code_upgrade",
                  "fields": [
                    {
                      "name": "para",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "new_code",
                      "type": 339,
                      "typeName": "ValidationCode",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Schedule a parachain upgrade.",
                    "",
                    "Can be called by Root, the parachain, or the parachain manager if the parachain is unlocked."
                  ]
                },
                {
                  "name": "set_current_head",
                  "fields": [
                    {
                      "name": "para",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "new_head",
                      "type": 340,
                      "typeName": "HeadData",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Set the parachain's current head.",
                    "",
                    "Can be called by Root, the parachain, or the parachain manager if the parachain is unlocked."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 362,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "slots",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "force_lease",
                  "fields": [
                    {
                      "name": "para",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "leaser",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "period_begin",
                      "type": 4,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "period_count",
                      "type": 4,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Just a connect into the `lease_out` call, in case Root wants to force some lease to happen",
                    "independently of any other on-chain mechanism to use it.",
                    "",
                    "The dispatch origin for this call must match `T::ForceOrigin`."
                  ]
                },
                {
                  "name": "clear_all_leases",
                  "fields": [
                    {
                      "name": "para",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Clear all leases for a Para Id, refunding any deposits back to the original owners.",
                    "",
                    "The dispatch origin for this call must match `T::ForceOrigin`."
                  ]
                },
                {
                  "name": "trigger_onboard",
                  "fields": [
                    {
                      "name": "para",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Try to onboard a parachain that has a lease for the current lease period.",
                    "",
                    "This function can be useful if there was some state issue with a para that should",
                    "have onboarded, but was unable to. As long as they have a lease period, we can",
                    "let them onboard from here.",
                    "",
                    "Origin must be signed, but can be called by anyone."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 363,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "auctions",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "new_auction",
                  "fields": [
                    {
                      "name": "duration",
                      "type": 91,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "lease_period_index",
                      "type": 91,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Create a new auction.",
                    "",
                    "This can only happen when there isn't already an auction in progress and may only be",
                    "called by the root origin. Accepts the `duration` of this auction and the",
                    "`lease_period_index` of the initial lease period of the four that are to be auctioned."
                  ]
                },
                {
                  "name": "bid",
                  "fields": [
                    {
                      "name": "para",
                      "type": 364,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "auction_index",
                      "type": 91,
                      "typeName": "AuctionIndex",
                      "docs": []
                    },
                    {
                      "name": "first_slot",
                      "type": 91,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "last_slot",
                      "type": 91,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Make a new bid from an account (including a parachain account) for deploying a new",
                    "parachain.",
                    "",
                    "Multiple simultaneous bids from the same bidder are allowed only as long as all active",
                    "bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted.",
                    "",
                    "- `sub` is the sub-bidder ID, allowing for multiple competing bids to be made by (and",
                    "funded by) the same account.",
                    "- `auction_index` is the index of the auction to bid on. Should just be the present",
                    "value of `AuctionCounter`.",
                    "- `first_slot` is the first lease period index of the range to bid on. This is the",
                    "absolute lease period index value, not an auction-specific offset.",
                    "- `last_slot` is the last lease period index of the range to bid on. This is the",
                    "absolute lease period index value, not an auction-specific offset.",
                    "- `amount` is the amount to bid to be held as deposit for the parachain should the",
                    "bid win. This amount is held throughout the range."
                  ]
                },
                {
                  "name": "cancel_auction",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Cancel an in-progress auction.",
                    "",
                    "Can only be called by Root origin."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 364,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "compact",
              "value": 162
            },
            "docs": []
          }
        },
        {
          "id": 365,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "crowdloan",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "create",
                  "fields": [
                    {
                      "name": "index",
                      "type": 364,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "cap",
                      "type": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "first_period",
                      "type": 91,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "last_period",
                      "type": 91,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "end",
                      "type": 91,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "verifier",
                      "type": 366,
                      "typeName": "Option<MultiSigner>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Create a new crowdloaning campaign for a parachain slot with the given lease period range.",
                    "",
                    "This applies a lock to your parachain configuration, ensuring that it cannot be changed",
                    "by the parachain manager."
                  ]
                },
                {
                  "name": "contribute",
                  "fields": [
                    {
                      "name": "index",
                      "type": 364,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "signature",
                      "type": 370,
                      "typeName": "Option<MultiSignature>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Contribute to a crowd sale. This will transfer some balance over to fund a parachain",
                    "slot. It will be withdrawable when the crowdloan has ended and the funds are unused."
                  ]
                },
                {
                  "name": "withdraw",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 364,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Withdraw full balance of a specific contributor.",
                    "",
                    "Origin must be signed, but can come from anyone.",
                    "",
                    "The fund must be either in, or ready for, retirement. For a fund to be *in* retirement, then the retirement",
                    "flag must be set. For a fund to be ready for retirement, then:",
                    "- it must not already be in retirement;",
                    "- the amount of raised funds must be bigger than the _free_ balance of the account;",
                    "- and either:",
                    "  - the block number must be at least `end`; or",
                    "  - the current lease period must be greater than the fund's `last_period`.",
                    "",
                    "In this case, the fund's retirement flag is set and its `end` is reset to the current block",
                    "number.",
                    "",
                    "- `who`: The account whose contribution should be withdrawn.",
                    "- `index`: The parachain to whose crowdloan the contribution was made."
                  ]
                },
                {
                  "name": "refund",
                  "fields": [
                    {
                      "name": "index",
                      "type": 364,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Automatically refund contributors of an ended crowdloan.",
                    "Due to weight restrictions, this function may need to be called multiple",
                    "times to fully refund all users. We will refund `RemoveKeysLimit` users at a time.",
                    "",
                    "Origin must be signed, but can come from anyone."
                  ]
                },
                {
                  "name": "dissolve",
                  "fields": [
                    {
                      "name": "index",
                      "type": 364,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Remove a fund after the retirement period has ended and all funds have been returned."
                  ]
                },
                {
                  "name": "edit",
                  "fields": [
                    {
                      "name": "index",
                      "type": 364,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "cap",
                      "type": 60,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "first_period",
                      "type": 91,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "last_period",
                      "type": 91,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "end",
                      "type": 91,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "verifier",
                      "type": 366,
                      "typeName": "Option<MultiSigner>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Edit the configuration for an in-progress crowdloan.",
                    "",
                    "Can only be called by Root origin."
                  ]
                },
                {
                  "name": "add_memo",
                  "fields": [
                    {
                      "name": "index",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "memo",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Add an optional memo to an existing crowdloan contribution.",
                    "",
                    "Origin must be Signed, and the user must have contributed to the crowdloan."
                  ]
                },
                {
                  "name": "poke",
                  "fields": [
                    {
                      "name": "index",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Poke the fund into `NewRaise`",
                    "",
                    "Origin must be Signed, and the fund has non-zero raise."
                  ]
                },
                {
                  "name": "contribute_all",
                  "fields": [
                    {
                      "name": "index",
                      "type": 364,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "signature",
                      "type": 370,
                      "typeName": "Option<MultiSignature>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Contribute your entire balance to a crowd sale. This will transfer the entire balance of a user over to fund a parachain",
                    "slot. It will be withdrawable when the crowdloan has ended and the funds are unused."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 366,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 367
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 367,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 367,
          "type": {
            "path": [
              "sp_runtime",
              "MultiSigner"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Ed25519",
                  "fields": [
                    {
                      "type": 53,
                      "typeName": "ed25519::Public",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Sr25519",
                  "fields": [
                    {
                      "type": 56,
                      "typeName": "sr25519::Public",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Ecdsa",
                  "fields": [
                    {
                      "type": 368,
                      "typeName": "ecdsa::Public",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 368,
          "type": {
            "path": [
              "sp_core",
              "ecdsa",
              "Public"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 369,
                  "typeName": "[u8; 33]",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 369,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 33,
                "type": 2
              }
            },
            "docs": []
          }
        },
        {
          "id": 370,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 371
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 371,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 371,
          "type": {
            "path": [
              "sp_runtime",
              "MultiSignature"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Ed25519",
                  "fields": [
                    {
                      "type": 125,
                      "typeName": "ed25519::Signature",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Sr25519",
                  "fields": [
                    {
                      "type": 138,
                      "typeName": "sr25519::Signature",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Ecdsa",
                  "fields": [
                    {
                      "type": 372,
                      "typeName": "ecdsa::Signature",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 372,
          "type": {
            "path": [
              "sp_core",
              "ecdsa",
              "Signature"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 176,
                  "typeName": "[u8; 65]",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 373,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "send",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 374,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "message",
                      "type": 382,
                      "typeName": "Box<VersionedXcm<()>>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "teleport_assets",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 374,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 374,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 427,
                      "typeName": "Box<VersionedMultiAssets>",
                      "docs": []
                    },
                    {
                      "name": "fee_asset_item",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Teleport some assets from the local chain to some destination chain.",
                    "",
                    "Fee payment on the destination side is made from the asset in the `assets` vector of",
                    "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                    "with all fees taken as needed from the asset.",
                    "",
                    "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                    "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                    "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                    "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                    "  an `AccountId32` value.",
                    "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                    "  `dest` side. May not be empty.",
                    "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                    "  fees."
                  ]
                },
                {
                  "name": "reserve_transfer_assets",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 374,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 374,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 427,
                      "typeName": "Box<VersionedMultiAssets>",
                      "docs": []
                    },
                    {
                      "name": "fee_asset_item",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Transfer some assets from the local chain to the sovereign account of a destination",
                    "chain and forward a notification XCM.",
                    "",
                    "Fee payment on the destination side is made from the asset in the `assets` vector of",
                    "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                    "with all fees taken as needed from the asset.",
                    "",
                    "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                    "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                    "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                    "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                    "  an `AccountId32` value.",
                    "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                    "  `dest` side.",
                    "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                    "  fees."
                  ]
                },
                {
                  "name": "execute",
                  "fields": [
                    {
                      "name": "message",
                      "type": 428,
                      "typeName": "Box<VersionedXcm<<T as SysConfig>::RuntimeCall>>",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Execute an XCM message from a local, signed, origin.",
                    "",
                    "An event is deposited indicating whether `msg` could be executed completely or only",
                    "partially.",
                    "",
                    "No more than `max_weight` will be used in its attempted execution. If this is less than the",
                    "maximum amount of weight that the message could take to be executed, then no execution",
                    "attempt will be made.",
                    "",
                    "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
                    "to completion; only that *some* of it was executed."
                  ]
                },
                {
                  "name": "force_xcm_version",
                  "fields": [
                    {
                      "name": "location",
                      "type": 164,
                      "typeName": "Box<MultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "xcm_version",
                      "type": 4,
                      "typeName": "XcmVersion",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Extoll that a particular destination can be communicated with through a particular",
                    "version of XCM.",
                    "",
                    "- `origin`: Must be an origin specified by AdminOrigin.",
                    "- `location`: The destination that is being described.",
                    "- `xcm_version`: The latest version of XCM that `location` supports."
                  ]
                },
                {
                  "name": "force_default_xcm_version",
                  "fields": [
                    {
                      "name": "maybe_xcm_version",
                      "type": 141,
                      "typeName": "Option<XcmVersion>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                    "version a destination can accept is unknown).",
                    "",
                    "- `origin`: Must be an origin specified by AdminOrigin.",
                    "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
                  ]
                },
                {
                  "name": "force_subscribe_version_notify",
                  "fields": [
                    {
                      "name": "location",
                      "type": 374,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Ask a location to notify us regarding their XCM version and any changes to it.",
                    "",
                    "- `origin`: Must be an origin specified by AdminOrigin.",
                    "- `location`: The location to which we should subscribe for XCM version notifications."
                  ]
                },
                {
                  "name": "force_unsubscribe_version_notify",
                  "fields": [
                    {
                      "name": "location",
                      "type": 374,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Require that a particular destination should no longer notify us regarding any XCM",
                    "version changes.",
                    "",
                    "- `origin`: Must be an origin specified by AdminOrigin.",
                    "- `location`: The location to which we are currently subscribed for XCM version",
                    "  notifications which we no longer desire."
                  ]
                },
                {
                  "name": "limited_reserve_transfer_assets",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 374,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 374,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 427,
                      "typeName": "Box<VersionedMultiAssets>",
                      "docs": []
                    },
                    {
                      "name": "fee_asset_item",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "type": 426,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Transfer some assets from the local chain to the sovereign account of a destination",
                    "chain and forward a notification XCM.",
                    "",
                    "Fee payment on the destination side is made from the asset in the `assets` vector of",
                    "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                    "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                    "at risk.",
                    "",
                    "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                    "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                    "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                    "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                    "  an `AccountId32` value.",
                    "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
                    "  `dest` side.",
                    "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                    "  fees.",
                    "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                  ]
                },
                {
                  "name": "limited_teleport_assets",
                  "fields": [
                    {
                      "name": "dest",
                      "type": 374,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 374,
                      "typeName": "Box<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 427,
                      "typeName": "Box<VersionedMultiAssets>",
                      "docs": []
                    },
                    {
                      "name": "fee_asset_item",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "type": 426,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Teleport some assets from the local chain to some destination chain.",
                    "",
                    "Fee payment on the destination side is made from the asset in the `assets` vector of",
                    "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                    "is needed than `weight_limit`, then the operation will fail and the assets send may be",
                    "at risk.",
                    "",
                    "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                    "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
                    "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
                    "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
                    "  an `AccountId32` value.",
                    "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
                    "  `dest` side. May not be empty.",
                    "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                    "  fees.",
                    "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                  ]
                },
                {
                  "name": "force_suspension",
                  "fields": [
                    {
                      "name": "suspended",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Set or unset the global suspension state of the XCM executor.",
                    "",
                    "- `origin`: Must be an origin specified by AdminOrigin.",
                    "- `suspended`: `true` to suspend, `false` to resume."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 374,
          "type": {
            "path": [
              "xcm",
              "VersionedMultiLocation"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "V2",
                  "fields": [
                    {
                      "type": 375,
                      "typeName": "v2::MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "V3",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "v3::MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 375,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multilocation",
              "MultiLocation"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "parents",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "interior",
                  "type": 376,
                  "typeName": "Junctions",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 376,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multilocation",
              "Junctions"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Here",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "X1",
                  "fields": [
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "X2",
                  "fields": [
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "X3",
                  "fields": [
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "X4",
                  "fields": [
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "X5",
                  "fields": [
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "X6",
                  "fields": [
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "X7",
                  "fields": [
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "X8",
                  "fields": [
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    },
                    {
                      "type": 377,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 377,
          "type": {
            "path": [
              "xcm",
              "v2",
              "junction",
              "Junction"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Parachain",
                  "fields": [
                    {
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AccountId32",
                  "fields": [
                    {
                      "name": "network",
                      "type": 378,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "id",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "AccountIndex64",
                  "fields": [
                    {
                      "name": "network",
                      "type": 378,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AccountKey20",
                  "fields": [
                    {
                      "name": "network",
                      "type": 378,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "key",
                      "type": 102,
                      "typeName": "[u8; 20]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "PalletInstance",
                  "fields": [
                    {
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "GeneralIndex",
                  "fields": [
                    {
                      "type": 60,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "GeneralKey",
                  "fields": [
                    {
                      "type": 379,
                      "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "OnlyChild",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Plurality",
                  "fields": [
                    {
                      "name": "id",
                      "type": 380,
                      "typeName": "BodyId",
                      "docs": []
                    },
                    {
                      "name": "part",
                      "type": 381,
                      "typeName": "BodyPart",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 378,
          "type": {
            "path": [
              "xcm",
              "v2",
              "NetworkId"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Any",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Named",
                  "fields": [
                    {
                      "type": 379,
                      "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Polkadot",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Kusama",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 379,
          "type": {
            "path": [
              "bounded_collections",
              "weak_bounded_vec",
              "WeakBoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 13,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 380,
          "type": {
            "path": [
              "xcm",
              "v2",
              "BodyId"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Unit",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Named",
                  "fields": [
                    {
                      "type": 379,
                      "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Index",
                  "fields": [
                    {
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Executive",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Technical",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Legislative",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Judicial",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Defense",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Administration",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Treasury",
                  "fields": [],
                  "index": 9,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 381,
          "type": {
            "path": [
              "xcm",
              "v2",
              "BodyPart"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Voice",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Members",
                  "fields": [
                    {
                      "name": "count",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Fraction",
                  "fields": [
                    {
                      "name": "nom",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "denom",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AtLeastProportion",
                  "fields": [
                    {
                      "name": "nom",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "denom",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "MoreThanProportion",
                  "fields": [
                    {
                      "name": "nom",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "denom",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 382,
          "type": {
            "path": [
              "xcm",
              "VersionedXcm"
            ],
            "params": [
              {
                "name": "RuntimeCall"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "V2",
                  "fields": [
                    {
                      "type": 383,
                      "typeName": "v2::Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "V3",
                  "fields": [
                    {
                      "type": 402,
                      "typeName": "v3::Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 383,
          "type": {
            "path": [
              "xcm",
              "v2",
              "Xcm"
            ],
            "params": [
              {
                "name": "RuntimeCall"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 384,
                  "typeName": "Vec<Instruction<RuntimeCall>>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 384,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 385
            },
            "docs": []
          }
        },
        {
          "id": 385,
          "type": {
            "path": [
              "xcm",
              "v2",
              "Instruction"
            ],
            "params": [
              {
                "name": "RuntimeCall"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "WithdrawAsset",
                  "fields": [
                    {
                      "type": 386,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ReserveAssetDeposited",
                  "fields": [
                    {
                      "type": 386,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ReceiveTeleportedAsset",
                  "fields": [
                    {
                      "type": 386,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "QueryResponse",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "type": 392,
                      "typeName": "Response",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "type": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TransferAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 386,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransferReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 386,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 383,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Transact",
                  "fields": [
                    {
                      "name": "origin_type",
                      "type": 396,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "require_weight_at_most",
                      "type": 10,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 397,
                      "typeName": "DoubleEncoded<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "HrmpNewChannelOpenRequest",
                  "fields": [
                    {
                      "name": "sender",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "HrmpChannelAccepted",
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "HrmpChannelClosing",
                  "fields": [
                    {
                      "name": "initiator",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sender",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "ClearOrigin",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "DescendOrigin",
                  "fields": [
                    {
                      "type": 376,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ReportError",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "type": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DepositAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 398,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "DepositReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 398,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 383,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "ExchangeAsset",
                  "fields": [
                    {
                      "name": "give",
                      "type": 398,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "receive",
                      "type": 386,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "InitiateReserveWithdraw",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 398,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "reserve",
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 383,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "InitiateTeleport",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 398,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 383,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "QueryHolding",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 398,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "type": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "BuyExecution",
                  "fields": [
                    {
                      "name": "fees",
                      "type": 388,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "type": 401,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "RefundSurplus",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "SetErrorHandler",
                  "fields": [
                    {
                      "type": 383,
                      "typeName": "Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "SetAppendix",
                  "fields": [
                    {
                      "type": 383,
                      "typeName": "Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "ClearError",
                  "fields": [],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "ClaimAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 386,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "ticket",
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "SubscribeVersion",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "type": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "UnsubscribeVersion",
                  "fields": [],
                  "index": 27,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 386,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multiasset",
              "MultiAssets"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 387,
                  "typeName": "Vec<MultiAsset>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 387,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 388
            },
            "docs": []
          }
        },
        {
          "id": 388,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multiasset",
              "MultiAsset"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "id",
                  "type": 389,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "type": 390,
                  "typeName": "Fungibility",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 389,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multiasset",
              "AssetId"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Concrete",
                  "fields": [
                    {
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Abstract",
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 390,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multiasset",
              "Fungibility"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Fungible",
                  "fields": [
                    {
                      "type": 60,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NonFungible",
                  "fields": [
                    {
                      "type": 391,
                      "typeName": "AssetInstance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 391,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multiasset",
              "AssetInstance"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Undefined",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Index",
                  "fields": [
                    {
                      "type": 60,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Array4",
                  "fields": [
                    {
                      "type": 17,
                      "typeName": "[u8; 4]",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Array8",
                  "fields": [
                    {
                      "type": 198,
                      "typeName": "[u8; 8]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Array16",
                  "fields": [
                    {
                      "type": 47,
                      "typeName": "[u8; 16]",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Array32",
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Blob",
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 392,
          "type": {
            "path": [
              "xcm",
              "v2",
              "Response"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Null",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Assets",
                  "fields": [
                    {
                      "type": 386,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ExecutionResult",
                  "fields": [
                    {
                      "type": 393,
                      "typeName": "Option<(u32, Error)>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Version",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "super::Version",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 393,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 394
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 394,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 394,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                4,
                395
              ]
            },
            "docs": []
          }
        },
        {
          "id": 395,
          "type": {
            "path": [
              "xcm",
              "v2",
              "traits",
              "Error"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Overflow",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Unimplemented",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "UntrustedReserveLocation",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "UntrustedTeleportLocation",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "MultiLocationFull",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "MultiLocationNotInvertible",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "BadOrigin",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "InvalidLocation",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "AssetNotFound",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "FailedToTransactAsset",
                  "fields": [],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "NotWithdrawable",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "LocationCannotHold",
                  "fields": [],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ExceedsMaxMessageSize",
                  "fields": [],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DestinationUnsupported",
                  "fields": [],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "Transport",
                  "fields": [],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Unroutable",
                  "fields": [],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "UnknownClaim",
                  "fields": [],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "FailedToDecode",
                  "fields": [],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "MaxWeightInvalid",
                  "fields": [],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "NotHoldingFees",
                  "fields": [],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "TooExpensive",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "UnhandledXcmVersion",
                  "fields": [],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "WeightLimitReached",
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Barrier",
                  "fields": [],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "WeightNotComputable",
                  "fields": [],
                  "index": 25,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 396,
          "type": {
            "path": [
              "xcm",
              "v2",
              "OriginKind"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Native",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "SovereignAccount",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Superuser",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Xcm",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 397,
          "type": {
            "path": [
              "xcm",
              "double_encoded",
              "DoubleEncoded"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "encoded",
                  "type": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 398,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multiasset",
              "MultiAssetFilter"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Definite",
                  "fields": [
                    {
                      "type": 386,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Wild",
                  "fields": [
                    {
                      "type": 399,
                      "typeName": "WildMultiAsset",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 399,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multiasset",
              "WildMultiAsset"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "All",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AllOf",
                  "fields": [
                    {
                      "name": "id",
                      "type": 389,
                      "typeName": "AssetId",
                      "docs": []
                    },
                    {
                      "name": "fun",
                      "type": 400,
                      "typeName": "WildFungibility",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 400,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multiasset",
              "WildFungibility"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Fungible",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NonFungible",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 401,
          "type": {
            "path": [
              "xcm",
              "v2",
              "WeightLimit"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Unlimited",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Limited",
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 402,
          "type": {
            "path": [
              "xcm",
              "v3",
              "Xcm"
            ],
            "params": [
              {
                "name": "Call"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 403,
                  "typeName": "Vec<Instruction<Call>>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 403,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 404
            },
            "docs": []
          }
        },
        {
          "id": 404,
          "type": {
            "path": [
              "xcm",
              "v3",
              "Instruction"
            ],
            "params": [
              {
                "name": "Call"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "WithdrawAsset",
                  "fields": [
                    {
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ReserveAssetDeposited",
                  "fields": [
                    {
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ReceiveTeleportedAsset",
                  "fields": [
                    {
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "QueryResponse",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "type": 411,
                      "typeName": "Response",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "querier",
                      "type": 421,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TransferAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransferReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 402,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Transact",
                  "fields": [
                    {
                      "name": "origin_kind",
                      "type": 396,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "require_weight_at_most",
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 397,
                      "typeName": "DoubleEncoded<Call>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "HrmpNewChannelOpenRequest",
                  "fields": [
                    {
                      "name": "sender",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "HrmpChannelAccepted",
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "HrmpChannelClosing",
                  "fields": [
                    {
                      "name": "initiator",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sender",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "ClearOrigin",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "DescendOrigin",
                  "fields": [
                    {
                      "type": 165,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ReportError",
                  "fields": [
                    {
                      "type": 422,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DepositAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 423,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "DepositReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 423,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 402,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "ExchangeAsset",
                  "fields": [
                    {
                      "name": "give",
                      "type": 423,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "want",
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "maximal",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "InitiateReserveWithdraw",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 423,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "reserve",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 402,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "InitiateTeleport",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 423,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 402,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "ReportHolding",
                  "fields": [
                    {
                      "name": "response_info",
                      "type": 422,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 423,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "BuyExecution",
                  "fields": [
                    {
                      "name": "fees",
                      "type": 407,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "type": 426,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "RefundSurplus",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "SetErrorHandler",
                  "fields": [
                    {
                      "type": 402,
                      "typeName": "Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "SetAppendix",
                  "fields": [
                    {
                      "type": 402,
                      "typeName": "Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "ClearError",
                  "fields": [],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "ClaimAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "ticket",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "SubscribeVersion",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "UnsubscribeVersion",
                  "fields": [],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "BurnAsset",
                  "fields": [
                    {
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "ExpectAsset",
                  "fields": [
                    {
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "ExpectOrigin",
                  "fields": [
                    {
                      "type": 421,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "ExpectError",
                  "fields": [
                    {
                      "type": 412,
                      "typeName": "Option<(u32, Error)>",
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "ExpectTransactStatus",
                  "fields": [
                    {
                      "type": 419,
                      "typeName": "MaybeErrorCode",
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "QueryPallet",
                  "fields": [
                    {
                      "name": "module_name",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "response_info",
                      "type": 422,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "ExpectPallet",
                  "fields": [
                    {
                      "name": "index",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "module_name",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "crate_major",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "min_crate_minor",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "ReportTransactStatus",
                  "fields": [
                    {
                      "type": 422,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    }
                  ],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "ClearTransactStatus",
                  "fields": [],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "UniversalOrigin",
                  "fields": [
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "ExportMessage",
                  "fields": [
                    {
                      "name": "network",
                      "type": 168,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "destination",
                      "type": 165,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 402,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "LockAsset",
                  "fields": [
                    {
                      "name": "asset",
                      "type": 407,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "unlocker",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 39,
                  "docs": []
                },
                {
                  "name": "UnlockAsset",
                  "fields": [
                    {
                      "name": "asset",
                      "type": 407,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 40,
                  "docs": []
                },
                {
                  "name": "NoteUnlockable",
                  "fields": [
                    {
                      "name": "asset",
                      "type": 407,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 41,
                  "docs": []
                },
                {
                  "name": "RequestUnlock",
                  "fields": [
                    {
                      "name": "asset",
                      "type": 407,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "locker",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 42,
                  "docs": []
                },
                {
                  "name": "SetFeesMode",
                  "fields": [
                    {
                      "name": "jit_withdraw",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 43,
                  "docs": []
                },
                {
                  "name": "SetTopic",
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 44,
                  "docs": []
                },
                {
                  "name": "ClearTopic",
                  "fields": [],
                  "index": 45,
                  "docs": []
                },
                {
                  "name": "AliasOrigin",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 46,
                  "docs": []
                },
                {
                  "name": "UnpaidExecution",
                  "fields": [
                    {
                      "name": "weight_limit",
                      "type": 426,
                      "typeName": "WeightLimit",
                      "docs": []
                    },
                    {
                      "name": "check_origin",
                      "type": 421,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 47,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 405,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "MultiAssets"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 406,
                  "typeName": "Vec<MultiAsset>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 406,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 407
            },
            "docs": []
          }
        },
        {
          "id": 407,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "MultiAsset"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "id",
                  "type": 408,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "type": 409,
                  "typeName": "Fungibility",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 408,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "AssetId"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Concrete",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Abstract",
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 409,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "Fungibility"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Fungible",
                  "fields": [
                    {
                      "type": 60,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NonFungible",
                  "fields": [
                    {
                      "type": 410,
                      "typeName": "AssetInstance",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 410,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "AssetInstance"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Undefined",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Index",
                  "fields": [
                    {
                      "type": 60,
                      "typeName": "u128",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Array4",
                  "fields": [
                    {
                      "type": 17,
                      "typeName": "[u8; 4]",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Array8",
                  "fields": [
                    {
                      "type": 198,
                      "typeName": "[u8; 8]",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Array16",
                  "fields": [
                    {
                      "type": 47,
                      "typeName": "[u8; 16]",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Array32",
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 411,
          "type": {
            "path": [
              "xcm",
              "v3",
              "Response"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Null",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Assets",
                  "fields": [
                    {
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ExecutionResult",
                  "fields": [
                    {
                      "type": 412,
                      "typeName": "Option<(u32, Error)>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Version",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "super::Version",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "PalletsInfo",
                  "fields": [
                    {
                      "type": 415,
                      "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "DispatchResult",
                  "fields": [
                    {
                      "type": 419,
                      "typeName": "MaybeErrorCode",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 412,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 413
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 413,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 413,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                4,
                414
              ]
            },
            "docs": []
          }
        },
        {
          "id": 414,
          "type": {
            "path": [
              "xcm",
              "v3",
              "traits",
              "Error"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Overflow",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Unimplemented",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "UntrustedReserveLocation",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "UntrustedTeleportLocation",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "LocationFull",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "LocationNotInvertible",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "BadOrigin",
                  "fields": [],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "InvalidLocation",
                  "fields": [],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "AssetNotFound",
                  "fields": [],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "FailedToTransactAsset",
                  "fields": [],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "NotWithdrawable",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "LocationCannotHold",
                  "fields": [],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ExceedsMaxMessageSize",
                  "fields": [],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DestinationUnsupported",
                  "fields": [],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "Transport",
                  "fields": [],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Unroutable",
                  "fields": [],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "UnknownClaim",
                  "fields": [],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "FailedToDecode",
                  "fields": [],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "MaxWeightInvalid",
                  "fields": [],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "NotHoldingFees",
                  "fields": [],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "TooExpensive",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "ExpectationFalse",
                  "fields": [],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "PalletNotFound",
                  "fields": [],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "NameMismatch",
                  "fields": [],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "VersionIncompatible",
                  "fields": [],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "HoldingWouldOverflow",
                  "fields": [],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "ExportError",
                  "fields": [],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "ReanchorFailed",
                  "fields": [],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "NoDeal",
                  "fields": [],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "FeesNotMet",
                  "fields": [],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "LockError",
                  "fields": [],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Unanchored",
                  "fields": [],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "NotDepositable",
                  "fields": [],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "UnhandledXcmVersion",
                  "fields": [],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "WeightLimitReached",
                  "fields": [
                    {
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "Barrier",
                  "fields": [],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "WeightNotComputable",
                  "fields": [],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "ExceedsStackLimit",
                  "fields": [],
                  "index": 39,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 415,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 416
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 418,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 416,
          "type": {
            "path": [
              "xcm",
              "v3",
              "PalletInfo"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "index",
                  "type": 91,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 417,
                  "typeName": "BoundedVec<u8, MaxPalletNameLen>",
                  "docs": []
                },
                {
                  "name": "module_name",
                  "type": 417,
                  "typeName": "BoundedVec<u8, MaxPalletNameLen>",
                  "docs": []
                },
                {
                  "name": "major",
                  "type": 91,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "minor",
                  "type": 91,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "patch",
                  "type": 91,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 417,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 13,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 418,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 416
            },
            "docs": []
          }
        },
        {
          "id": 419,
          "type": {
            "path": [
              "xcm",
              "v3",
              "MaybeErrorCode"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Success",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Error",
                  "fields": [
                    {
                      "type": 420,
                      "typeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "TruncatedError",
                  "fields": [
                    {
                      "type": 420,
                      "typeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 420,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 13,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 421,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 164
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 164,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 422,
          "type": {
            "path": [
              "xcm",
              "v3",
              "QueryResponseInfo"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "destination",
                  "type": 164,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "query_id",
                  "type": 10,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 9,
                  "typeName": "Weight",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 423,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "MultiAssetFilter"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Definite",
                  "fields": [
                    {
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Wild",
                  "fields": [
                    {
                      "type": 424,
                      "typeName": "WildMultiAsset",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 424,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "WildMultiAsset"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "All",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "AllOf",
                  "fields": [
                    {
                      "name": "id",
                      "type": 408,
                      "typeName": "AssetId",
                      "docs": []
                    },
                    {
                      "name": "fun",
                      "type": 425,
                      "typeName": "WildFungibility",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "AllCounted",
                  "fields": [
                    {
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "AllOfCounted",
                  "fields": [
                    {
                      "name": "id",
                      "type": 408,
                      "typeName": "AssetId",
                      "docs": []
                    },
                    {
                      "name": "fun",
                      "type": 425,
                      "typeName": "WildFungibility",
                      "docs": []
                    },
                    {
                      "name": "count",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 425,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "WildFungibility"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Fungible",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NonFungible",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 426,
          "type": {
            "path": [
              "xcm",
              "v3",
              "WeightLimit"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Unlimited",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Limited",
                  "fields": [
                    {
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 427,
          "type": {
            "path": [
              "xcm",
              "VersionedMultiAssets"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "V2",
                  "fields": [
                    {
                      "type": 386,
                      "typeName": "v2::MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "V3",
                  "fields": [
                    {
                      "type": 405,
                      "typeName": "v3::MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 428,
          "type": {
            "path": [
              "xcm",
              "VersionedXcm"
            ],
            "params": [
              {
                "name": "RuntimeCall"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "V2",
                  "fields": [
                    {
                      "type": 429,
                      "typeName": "v2::Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "V3",
                  "fields": [
                    {
                      "type": 433,
                      "typeName": "v3::Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 429,
          "type": {
            "path": [
              "xcm",
              "v2",
              "Xcm"
            ],
            "params": [
              {
                "name": "RuntimeCall"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 430,
                  "typeName": "Vec<Instruction<RuntimeCall>>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 430,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 431
            },
            "docs": []
          }
        },
        {
          "id": 431,
          "type": {
            "path": [
              "xcm",
              "v2",
              "Instruction"
            ],
            "params": [
              {
                "name": "RuntimeCall"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "WithdrawAsset",
                  "fields": [
                    {
                      "type": 386,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ReserveAssetDeposited",
                  "fields": [
                    {
                      "type": 386,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ReceiveTeleportedAsset",
                  "fields": [
                    {
                      "type": 386,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "QueryResponse",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "type": 392,
                      "typeName": "Response",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "type": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TransferAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 386,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransferReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 386,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 383,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Transact",
                  "fields": [
                    {
                      "name": "origin_type",
                      "type": 396,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "require_weight_at_most",
                      "type": 10,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 432,
                      "typeName": "DoubleEncoded<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "HrmpNewChannelOpenRequest",
                  "fields": [
                    {
                      "name": "sender",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "HrmpChannelAccepted",
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "HrmpChannelClosing",
                  "fields": [
                    {
                      "name": "initiator",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sender",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "ClearOrigin",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "DescendOrigin",
                  "fields": [
                    {
                      "type": 376,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ReportError",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "type": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DepositAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 398,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "DepositReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 398,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_assets",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 383,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "ExchangeAsset",
                  "fields": [
                    {
                      "name": "give",
                      "type": 398,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "receive",
                      "type": 386,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "InitiateReserveWithdraw",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 398,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "reserve",
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 383,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "InitiateTeleport",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 398,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 383,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "QueryHolding",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 398,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "type": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "BuyExecution",
                  "fields": [
                    {
                      "name": "fees",
                      "type": 388,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "type": 401,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "RefundSurplus",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "SetErrorHandler",
                  "fields": [
                    {
                      "type": 429,
                      "typeName": "Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "SetAppendix",
                  "fields": [
                    {
                      "type": 429,
                      "typeName": "Xcm<RuntimeCall>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "ClearError",
                  "fields": [],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "ClaimAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 386,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "ticket",
                      "type": 375,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "SubscribeVersion",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "type": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "UnsubscribeVersion",
                  "fields": [],
                  "index": 27,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 432,
          "type": {
            "path": [
              "xcm",
              "double_encoded",
              "DoubleEncoded"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "encoded",
                  "type": 13,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 433,
          "type": {
            "path": [
              "xcm",
              "v3",
              "Xcm"
            ],
            "params": [
              {
                "name": "Call"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 434,
                  "typeName": "Vec<Instruction<Call>>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 434,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 435
            },
            "docs": []
          }
        },
        {
          "id": 435,
          "type": {
            "path": [
              "xcm",
              "v3",
              "Instruction"
            ],
            "params": [
              {
                "name": "Call"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "WithdrawAsset",
                  "fields": [
                    {
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "ReserveAssetDeposited",
                  "fields": [
                    {
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "ReceiveTeleportedAsset",
                  "fields": [
                    {
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "QueryResponse",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "response",
                      "type": 411,
                      "typeName": "Response",
                      "docs": []
                    },
                    {
                      "name": "max_weight",
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "querier",
                      "type": 421,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TransferAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "TransferReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 402,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Transact",
                  "fields": [
                    {
                      "name": "origin_kind",
                      "type": 396,
                      "typeName": "OriginKind",
                      "docs": []
                    },
                    {
                      "name": "require_weight_at_most",
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "call",
                      "type": 432,
                      "typeName": "DoubleEncoded<Call>",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "HrmpNewChannelOpenRequest",
                  "fields": [
                    {
                      "name": "sender",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_message_size",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "max_capacity",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "HrmpChannelAccepted",
                  "fields": [
                    {
                      "name": "recipient",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "HrmpChannelClosing",
                  "fields": [
                    {
                      "name": "initiator",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sender",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "recipient",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "ClearOrigin",
                  "fields": [],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "DescendOrigin",
                  "fields": [
                    {
                      "type": 165,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "ReportError",
                  "fields": [
                    {
                      "type": 422,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "DepositAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 423,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "DepositReserveAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 423,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 402,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "ExchangeAsset",
                  "fields": [
                    {
                      "name": "give",
                      "type": 423,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "want",
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "maximal",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "InitiateReserveWithdraw",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 423,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "reserve",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 402,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "InitiateTeleport",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 423,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    },
                    {
                      "name": "dest",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 402,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "ReportHolding",
                  "fields": [
                    {
                      "name": "response_info",
                      "type": 422,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    },
                    {
                      "name": "assets",
                      "type": 423,
                      "typeName": "MultiAssetFilter",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "BuyExecution",
                  "fields": [
                    {
                      "name": "fees",
                      "type": 407,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "type": 426,
                      "typeName": "WeightLimit",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "RefundSurplus",
                  "fields": [],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "SetErrorHandler",
                  "fields": [
                    {
                      "type": 433,
                      "typeName": "Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "SetAppendix",
                  "fields": [
                    {
                      "type": 433,
                      "typeName": "Xcm<Call>",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "ClearError",
                  "fields": [],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "ClaimAsset",
                  "fields": [
                    {
                      "name": "assets",
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    },
                    {
                      "name": "ticket",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Trap",
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "u64",
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "SubscribeVersion",
                  "fields": [
                    {
                      "name": "query_id",
                      "type": 10,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "name": "max_response_weight",
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "UnsubscribeVersion",
                  "fields": [],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "BurnAsset",
                  "fields": [
                    {
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "ExpectAsset",
                  "fields": [
                    {
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "ExpectOrigin",
                  "fields": [
                    {
                      "type": 421,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "ExpectError",
                  "fields": [
                    {
                      "type": 412,
                      "typeName": "Option<(u32, Error)>",
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "ExpectTransactStatus",
                  "fields": [
                    {
                      "type": 419,
                      "typeName": "MaybeErrorCode",
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "QueryPallet",
                  "fields": [
                    {
                      "name": "module_name",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "response_info",
                      "type": 422,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "ExpectPallet",
                  "fields": [
                    {
                      "name": "index",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "module_name",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "crate_major",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "min_crate_minor",
                      "type": 91,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "ReportTransactStatus",
                  "fields": [
                    {
                      "type": 422,
                      "typeName": "QueryResponseInfo",
                      "docs": []
                    }
                  ],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "ClearTransactStatus",
                  "fields": [],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "UniversalOrigin",
                  "fields": [
                    {
                      "type": 166,
                      "typeName": "Junction",
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "ExportMessage",
                  "fields": [
                    {
                      "name": "network",
                      "type": 168,
                      "typeName": "NetworkId",
                      "docs": []
                    },
                    {
                      "name": "destination",
                      "type": 165,
                      "typeName": "InteriorMultiLocation",
                      "docs": []
                    },
                    {
                      "name": "xcm",
                      "type": 402,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "LockAsset",
                  "fields": [
                    {
                      "name": "asset",
                      "type": 407,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "unlocker",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 39,
                  "docs": []
                },
                {
                  "name": "UnlockAsset",
                  "fields": [
                    {
                      "name": "asset",
                      "type": 407,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 40,
                  "docs": []
                },
                {
                  "name": "NoteUnlockable",
                  "fields": [
                    {
                      "name": "asset",
                      "type": 407,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 41,
                  "docs": []
                },
                {
                  "name": "RequestUnlock",
                  "fields": [
                    {
                      "name": "asset",
                      "type": 407,
                      "typeName": "MultiAsset",
                      "docs": []
                    },
                    {
                      "name": "locker",
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 42,
                  "docs": []
                },
                {
                  "name": "SetFeesMode",
                  "fields": [
                    {
                      "name": "jit_withdraw",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 43,
                  "docs": []
                },
                {
                  "name": "SetTopic",
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ],
                  "index": 44,
                  "docs": []
                },
                {
                  "name": "ClearTopic",
                  "fields": [],
                  "index": 45,
                  "docs": []
                },
                {
                  "name": "AliasOrigin",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    }
                  ],
                  "index": 46,
                  "docs": []
                },
                {
                  "name": "UnpaidExecution",
                  "fields": [
                    {
                      "name": "weight_limit",
                      "type": 426,
                      "typeName": "WeightLimit",
                      "docs": []
                    },
                    {
                      "name": "check_origin",
                      "type": 421,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 47,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 436,
          "type": {
            "path": [
              "pallet_message_queue",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "reap_page",
                  "fields": [
                    {
                      "name": "message_origin",
                      "type": 437,
                      "typeName": "MessageOriginOf<T>",
                      "docs": []
                    },
                    {
                      "name": "page_index",
                      "type": 4,
                      "typeName": "PageIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Remove a page which has no more messages remaining to be processed or is stale."
                  ]
                },
                {
                  "name": "execute_overweight",
                  "fields": [
                    {
                      "name": "message_origin",
                      "type": 437,
                      "typeName": "MessageOriginOf<T>",
                      "docs": []
                    },
                    {
                      "name": "page",
                      "type": 4,
                      "typeName": "PageIndex",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "T::Size",
                      "docs": []
                    },
                    {
                      "name": "weight_limit",
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Execute an overweight message.",
                    "",
                    "Temporary processing errors will be propagated whereas permanent errors are treated",
                    "as success condition.",
                    "",
                    "- `origin`: Must be `Signed`.",
                    "- `message_origin`: The origin from which the message to be executed arrived.",
                    "- `page`: The page in the queue in which the message to be executed is sitting.",
                    "- `index`: The index into the queue of the message to be executed.",
                    "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution",
                    "  of the message.",
                    "",
                    "Benchmark complexity considerations: O(index + weight_limit)."
                  ]
                }
              ]
            },
            "docs": [
              "Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          }
        },
        {
          "id": 437,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "inclusion",
              "AggregateMessageOrigin"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Ump",
                  "fields": [
                    {
                      "type": 438,
                      "typeName": "UmpQueueId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 438,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "inclusion",
              "UmpQueueId"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Para",
                  "fields": [
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 439,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 13,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 440,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "types",
              "Tally"
            ],
            "params": [
              {
                "name": "Votes",
                "type": 6
              },
              {
                "name": "Total"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "ayes",
                  "type": 6,
                  "typeName": "Votes",
                  "docs": []
                },
                {
                  "name": "nays",
                  "type": 6,
                  "typeName": "Votes",
                  "docs": []
                },
                {
                  "name": "support",
                  "type": 6,
                  "typeName": "Votes",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 441,
          "type": {
            "path": [
              "pallet_whitelist",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "CallWhitelisted",
                  "fields": [
                    {
                      "name": "call_hash",
                      "type": 12,
                      "typeName": "PreimageHash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "WhitelistedCallRemoved",
                  "fields": [
                    {
                      "name": "call_hash",
                      "type": 12,
                      "typeName": "PreimageHash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "WhitelistedCallDispatched",
                  "fields": [
                    {
                      "name": "call_hash",
                      "type": 12,
                      "typeName": "PreimageHash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "type": 442,
                      "typeName": "DispatchResultWithPostInfo",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 442,
          "type": {
            "path": [
              "Result"
            ],
            "params": [
              {
                "name": "T",
                "type": 443
              },
              {
                "name": "E",
                "type": 445
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Ok",
                  "fields": [
                    {
                      "type": 443,
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Err",
                  "fields": [
                    {
                      "type": 445,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 443,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "PostDispatchInfo"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "actual_weight",
                  "type": 444,
                  "typeName": "Option<Weight>",
                  "docs": []
                },
                {
                  "name": "pays_fee",
                  "type": 24,
                  "typeName": "Pays",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 444,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 9
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 9,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 445,
          "type": {
            "path": [
              "sp_runtime",
              "DispatchErrorWithPostInfo"
            ],
            "params": [
              {
                "name": "Info",
                "type": 443
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "post_info",
                  "type": 443,
                  "typeName": "Info",
                  "docs": []
                },
                {
                  "name": "error",
                  "type": 25,
                  "typeName": "DispatchError",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 446,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "claims",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Claimed",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "ethereum_address",
                      "type": 177,
                      "typeName": "EthereumAddress",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Someone claimed some DOTs."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 447,
          "type": {
            "path": [
              "pallet_vesting",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "VestingUpdated",
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "unvested",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "The amount vested has been updated. This could indicate a change in funds available.",
                    "The balance given is the amount which is left unvested (and thus locked)."
                  ]
                },
                {
                  "name": "VestingCompleted",
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An \\[account\\] has become fully vested."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 448,
          "type": {
            "path": [
              "pallet_utility",
              "pallet",
              "Event"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "BatchInterrupted",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "error",
                      "type": 25,
                      "typeName": "DispatchError",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                    "well as the error."
                  ]
                },
                {
                  "name": "BatchCompleted",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Batch of dispatches completed fully with no error."
                  ]
                },
                {
                  "name": "BatchCompletedWithErrors",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Batch of dispatches completed but has errors."
                  ]
                },
                {
                  "name": "ItemCompleted",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "A single item within a Batch of dispatches has completed with no error."
                  ]
                },
                {
                  "name": "ItemFailed",
                  "fields": [
                    {
                      "name": "error",
                      "type": 25,
                      "typeName": "DispatchError",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A single item within a Batch of dispatches has completed with error."
                  ]
                },
                {
                  "name": "DispatchedAs",
                  "fields": [
                    {
                      "name": "result",
                      "type": 33,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A call was dispatched."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 449,
          "type": {
            "path": [
              "pallet_identity",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "IdentitySet",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A name was set or reset (which will remove all judgements)."
                  ]
                },
                {
                  "name": "IdentityCleared",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A name was cleared, and the given balance returned."
                  ]
                },
                {
                  "name": "IdentityKilled",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A name was removed and the given balance slashed."
                  ]
                },
                {
                  "name": "JudgementRequested",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "registrar_index",
                      "type": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A judgement was asked from a registrar."
                  ]
                },
                {
                  "name": "JudgementUnrequested",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "registrar_index",
                      "type": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A judgement request was retracted."
                  ]
                },
                {
                  "name": "JudgementGiven",
                  "fields": [
                    {
                      "name": "target",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "registrar_index",
                      "type": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A judgement was given by a registrar."
                  ]
                },
                {
                  "name": "RegistrarAdded",
                  "fields": [
                    {
                      "name": "registrar_index",
                      "type": 4,
                      "typeName": "RegistrarIndex",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "A registrar was added."
                  ]
                },
                {
                  "name": "SubIdentityAdded",
                  "fields": [
                    {
                      "name": "sub",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "main",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "A sub-identity was added to an identity and the deposit paid."
                  ]
                },
                {
                  "name": "SubIdentityRemoved",
                  "fields": [
                    {
                      "name": "sub",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "main",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "A sub-identity was removed from an identity and the deposit freed."
                  ]
                },
                {
                  "name": "SubIdentityRevoked",
                  "fields": [
                    {
                      "name": "sub",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "main",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "A sub-identity was cleared, and the given deposit repatriated from the",
                    "main identity account to the sub-identity account."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 450,
          "type": {
            "path": [
              "pallet_proxy",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "ProxyExecuted",
                  "fields": [
                    {
                      "name": "result",
                      "type": 33,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A proxy was executed correctly, with the given."
                  ]
                },
                {
                  "name": "PureCreated",
                  "fields": [
                    {
                      "name": "pure",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "type": 229,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "disambiguation_index",
                      "type": 77,
                      "typeName": "u16",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A pure account has been created by new proxy with given",
                    "disambiguation index and proxy type."
                  ]
                },
                {
                  "name": "Announced",
                  "fields": [
                    {
                      "name": "real",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 12,
                      "typeName": "CallHashOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "An announcement was placed to make a call in the future."
                  ]
                },
                {
                  "name": "ProxyAdded",
                  "fields": [
                    {
                      "name": "delegator",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "delegatee",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "type": 229,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A proxy was added."
                  ]
                },
                {
                  "name": "ProxyRemoved",
                  "fields": [
                    {
                      "name": "delegator",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "delegatee",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "proxy_type",
                      "type": 229,
                      "typeName": "T::ProxyType",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A proxy was removed."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 451,
          "type": {
            "path": [
              "pallet_multisig",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NewMultisig",
                  "fields": [
                    {
                      "name": "approving",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "multisig",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 1,
                      "typeName": "CallHash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A new multisig operation has begun."
                  ]
                },
                {
                  "name": "MultisigApproval",
                  "fields": [
                    {
                      "name": "approving",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "timepoint",
                      "type": 232,
                      "typeName": "Timepoint<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "multisig",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 1,
                      "typeName": "CallHash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A multisig operation has been approved by someone."
                  ]
                },
                {
                  "name": "MultisigExecuted",
                  "fields": [
                    {
                      "name": "approving",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "timepoint",
                      "type": 232,
                      "typeName": "Timepoint<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "multisig",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 1,
                      "typeName": "CallHash",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "type": 33,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A multisig operation has been executed."
                  ]
                },
                {
                  "name": "MultisigCancelled",
                  "fields": [
                    {
                      "name": "cancelling",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "timepoint",
                      "type": 232,
                      "typeName": "Timepoint<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "multisig",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "call_hash",
                      "type": 1,
                      "typeName": "CallHash",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A multisig operation has been cancelled."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 452,
          "type": {
            "path": [
              "pallet_bounties",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "BountyProposed",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "New bounty proposal."
                  ]
                },
                {
                  "name": "BountyRejected",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A bounty proposal was rejected; funds were slashed."
                  ]
                },
                {
                  "name": "BountyBecameActive",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A bounty proposal is funded and became active."
                  ]
                },
                {
                  "name": "BountyAwarded",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A bounty is awarded to a beneficiary."
                  ]
                },
                {
                  "name": "BountyClaimed",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "payout",
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A bounty is claimed by beneficiary."
                  ]
                },
                {
                  "name": "BountyCanceled",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A bounty is cancelled."
                  ]
                },
                {
                  "name": "BountyExtended",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "A bounty expiry is extended."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 453,
          "type": {
            "path": [
              "pallet_child_bounties",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Added",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_index",
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A child-bounty is added."
                  ]
                },
                {
                  "name": "Awarded",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_index",
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A child-bounty is awarded to a beneficiary."
                  ]
                },
                {
                  "name": "Claimed",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_index",
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "payout",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A child-bounty is claimed by beneficiary."
                  ]
                },
                {
                  "name": "Canceled",
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    },
                    {
                      "name": "child_index",
                      "type": 4,
                      "typeName": "BountyIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A child-bounty is cancelled."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 454,
          "type": {
            "path": [
              "pallet_tips",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NewTip",
                  "fields": [
                    {
                      "name": "tip_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A new tip suggestion has been opened."
                  ]
                },
                {
                  "name": "TipClosing",
                  "fields": [
                    {
                      "name": "tip_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A tip suggestion has reached threshold and is closing."
                  ]
                },
                {
                  "name": "TipClosed",
                  "fields": [
                    {
                      "name": "tip_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "payout",
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A tip suggestion has been closed."
                  ]
                },
                {
                  "name": "TipRetracted",
                  "fields": [
                    {
                      "name": "tip_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A tip suggestion has been retracted."
                  ]
                },
                {
                  "name": "TipSlashed",
                  "fields": [
                    {
                      "name": "tip_hash",
                      "type": 12,
                      "typeName": "T::Hash",
                      "docs": []
                    },
                    {
                      "name": "finder",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "BalanceOf<T, I>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A tip suggestion has been slashed."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 455,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "SolutionStored",
                  "fields": [
                    {
                      "name": "compute",
                      "type": 456,
                      "typeName": "ElectionCompute",
                      "docs": []
                    },
                    {
                      "name": "origin",
                      "type": 144,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "prev_ejected",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A solution was stored with the given compute.",
                    "",
                    "The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,",
                    "the stored solution was submited in the signed phase by a miner with the `AccountId`.",
                    "Otherwise, the solution was stored either during the unsigned phase or by",
                    "`T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make",
                    "room for this one."
                  ]
                },
                {
                  "name": "ElectionFinalized",
                  "fields": [
                    {
                      "name": "compute",
                      "type": 456,
                      "typeName": "ElectionCompute",
                      "docs": []
                    },
                    {
                      "name": "score",
                      "type": 289,
                      "typeName": "ElectionScore",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "The election has been finalized, with the given computation and score."
                  ]
                },
                {
                  "name": "ElectionFailed",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "An election failed.",
                    "",
                    "Not much can be said about which computes failed in the process."
                  ]
                },
                {
                  "name": "Rewarded",
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "<T as frame_system::Config>::AccountId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "An account has been rewarded for their signed submission being finalized."
                  ]
                },
                {
                  "name": "Slashed",
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "<T as frame_system::Config>::AccountId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "An account has been slashed for submitting an invalid signed submission."
                  ]
                },
                {
                  "name": "PhaseTransitioned",
                  "fields": [
                    {
                      "name": "from",
                      "type": 457,
                      "typeName": "Phase<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "type": 457,
                      "typeName": "Phase<T::BlockNumber>",
                      "docs": []
                    },
                    {
                      "name": "round",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "There was a phase transition in a given round."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 456,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "ElectionCompute"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "OnChain",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Signed",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Unsigned",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Fallback",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Emergency",
                  "fields": [],
                  "index": 4,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 457,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "Phase"
            ],
            "params": [
              {
                "name": "Bn",
                "type": 4
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Off",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Signed",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Unsigned",
                  "fields": [
                    {
                      "type": 458,
                      "typeName": "(bool, Bn)",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Emergency",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 458,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                44,
                4
              ]
            },
            "docs": []
          }
        },
        {
          "id": 459,
          "type": {
            "path": [
              "pallet_bags_list",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Rebagged",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "from",
                      "type": 11,
                      "typeName": "T::Score",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "type": 11,
                      "typeName": "T::Score",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Moved an account from one bag to another."
                  ]
                },
                {
                  "name": "ScoreUpdated",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "new_score",
                      "type": 11,
                      "typeName": "T::Score",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Updated the score of some account to the given amount."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 460,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Created",
                  "fields": [
                    {
                      "name": "depositor",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A pool has been created."
                  ]
                },
                {
                  "name": "Bonded",
                  "fields": [
                    {
                      "name": "member",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "bonded",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "joined",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A member has became bonded in a pool."
                  ]
                },
                {
                  "name": "PaidOut",
                  "fields": [
                    {
                      "name": "member",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "payout",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A payout has been made to a member."
                  ]
                },
                {
                  "name": "Unbonded",
                  "fields": [
                    {
                      "name": "member",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "points",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "era",
                      "type": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A member has unbonded from their pool.",
                    "",
                    "- `balance` is the corresponding balance of the number of points that has been",
                    "  requested to be unbonded (the argument of the `unbond` transaction) from the bonded",
                    "  pool.",
                    "- `points` is the number of points that are issued as a result of `balance` being",
                    "dissolved into the corresponding unbonding pool.",
                    "- `era` is the era in which the balance will be unbonded.",
                    "In the absence of slashing, these values will match. In the presence of slashing, the",
                    "number of points that are issued in the unbonding pool will be less than the amount",
                    "requested to be unbonded."
                  ]
                },
                {
                  "name": "Withdrawn",
                  "fields": [
                    {
                      "name": "member",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "points",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A member has withdrawn from their pool.",
                    "",
                    "The given number of `points` have been dissolved in return of `balance`.",
                    "",
                    "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance",
                    "will be 1."
                  ]
                },
                {
                  "name": "Destroyed",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A pool has been destroyed."
                  ]
                },
                {
                  "name": "StateChanged",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "new_state",
                      "type": 298,
                      "typeName": "PoolState",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "The state of a pool has changed"
                  ]
                },
                {
                  "name": "MemberRemoved",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "member",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "A member has been removed from a pool.",
                    "",
                    "The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked)."
                  ]
                },
                {
                  "name": "RolesUpdated",
                  "fields": [
                    {
                      "name": "root",
                      "type": 144,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "bouncer",
                      "type": 144,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    },
                    {
                      "name": "nominator",
                      "type": 144,
                      "typeName": "Option<T::AccountId>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "The roles of a pool have been updated to the given new roles. Note that the depositor",
                    "can never change."
                  ]
                },
                {
                  "name": "PoolSlashed",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "The active balance of pool `pool_id` has been slashed to `balance`."
                  ]
                },
                {
                  "name": "UnbondingPoolSlashed",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "era",
                      "type": 4,
                      "typeName": "EraIndex",
                      "docs": []
                    },
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."
                  ]
                },
                {
                  "name": "PoolCommissionUpdated",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "current",
                      "type": 304,
                      "typeName": "Option<(Perbill, T::AccountId)>",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "A pool's commission setting has been changed."
                  ]
                },
                {
                  "name": "PoolMaxCommissionUpdated",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "max_commission",
                      "type": 41,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "A pool's maximum commission setting has been changed."
                  ]
                },
                {
                  "name": "PoolCommissionChangeRateUpdated",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "change_rate",
                      "type": 306,
                      "typeName": "CommissionChangeRate<T::BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "A pool's commission `change_rate` has been changed."
                  ]
                },
                {
                  "name": "PoolCommissionClaimed",
                  "fields": [
                    {
                      "name": "pool_id",
                      "type": 4,
                      "typeName": "PoolId",
                      "docs": []
                    },
                    {
                      "name": "commission",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "Pool commission has been claimed."
                  ]
                }
              ]
            },
            "docs": [
              "Events of this pallet."
            ]
          }
        },
        {
          "id": 461,
          "type": {
            "path": [
              "pallet_fast_unstake",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Unstaked",
                  "fields": [
                    {
                      "name": "stash",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "type": 33,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A staker was unstaked."
                  ]
                },
                {
                  "name": "Slashed",
                  "fields": [
                    {
                      "name": "stash",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A staker was slashed for requesting fast-unstake whilst being exposed."
                  ]
                },
                {
                  "name": "InternalError",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "An internal error happened. Operations will be paused now."
                  ]
                },
                {
                  "name": "BatchChecked",
                  "fields": [
                    {
                      "name": "eras",
                      "type": 109,
                      "typeName": "Vec<EraIndex>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A batch was partially checked for the given eras, but the process did not finish."
                  ]
                },
                {
                  "name": "BatchFinished",
                  "fields": [
                    {
                      "name": "size",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A batch of a given size was terminated.",
                    "",
                    "This is always follows by a number of `Unstaked` or `Slashed` events, marking the end",
                    "of the batch. A new batch will be created upon next block."
                  ]
                }
              ]
            },
            "docs": [
              "The events of this pallet."
            ]
          }
        },
        {
          "id": 462,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "inclusion",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "CandidateBacked",
                  "fields": [
                    {
                      "type": 463,
                      "typeName": "CandidateReceipt<T::Hash>",
                      "docs": []
                    },
                    {
                      "type": 340,
                      "typeName": "HeadData",
                      "docs": []
                    },
                    {
                      "type": 464,
                      "typeName": "CoreIndex",
                      "docs": []
                    },
                    {
                      "type": 465,
                      "typeName": "GroupIndex",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A candidate was backed. `[candidate, head_data]`"
                  ]
                },
                {
                  "name": "CandidateIncluded",
                  "fields": [
                    {
                      "type": 463,
                      "typeName": "CandidateReceipt<T::Hash>",
                      "docs": []
                    },
                    {
                      "type": 340,
                      "typeName": "HeadData",
                      "docs": []
                    },
                    {
                      "type": 464,
                      "typeName": "CoreIndex",
                      "docs": []
                    },
                    {
                      "type": 465,
                      "typeName": "GroupIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A candidate was included. `[candidate, head_data]`"
                  ]
                },
                {
                  "name": "CandidateTimedOut",
                  "fields": [
                    {
                      "type": 463,
                      "typeName": "CandidateReceipt<T::Hash>",
                      "docs": []
                    },
                    {
                      "type": 340,
                      "typeName": "HeadData",
                      "docs": []
                    },
                    {
                      "type": 464,
                      "typeName": "CoreIndex",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A candidate timed out. `[candidate, head_data]`"
                  ]
                },
                {
                  "name": "UpwardMessagesReceived",
                  "fields": [
                    {
                      "name": "from",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "count",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Some upward messages have been received and will be processed."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 463,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "CandidateReceipt"
            ],
            "params": [
              {
                "name": "H",
                "type": 12
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "descriptor",
                  "type": 329,
                  "typeName": "CandidateDescriptor<H>",
                  "docs": []
                },
                {
                  "name": "commitments_hash",
                  "type": 12,
                  "typeName": "Hash",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 464,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "CoreIndex"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 465,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "GroupIndex"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 466,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "pallet",
              "Event"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "CurrentCodeUpdated",
                  "fields": [
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Current code has been updated for a Para. `para_id`"
                  ]
                },
                {
                  "name": "CurrentHeadUpdated",
                  "fields": [
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Current head has been updated for a Para. `para_id`"
                  ]
                },
                {
                  "name": "CodeUpgradeScheduled",
                  "fields": [
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A code upgrade has been scheduled for a Para. `para_id`"
                  ]
                },
                {
                  "name": "NewHeadNoted",
                  "fields": [
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "A new head has been noted for a Para. `para_id`"
                  ]
                },
                {
                  "name": "ActionQueued",
                  "fields": [
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "type": 4,
                      "typeName": "SessionIndex",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "A para has been queued to execute pending actions. `para_id`"
                  ]
                },
                {
                  "name": "PvfCheckStarted",
                  "fields": [
                    {
                      "type": 332,
                      "typeName": "ValidationCodeHash",
                      "docs": []
                    },
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "The given para either initiated or subscribed to a PVF check for the given validation",
                    "code. `code_hash` `para_id`"
                  ]
                },
                {
                  "name": "PvfCheckAccepted",
                  "fields": [
                    {
                      "type": 332,
                      "typeName": "ValidationCodeHash",
                      "docs": []
                    },
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "The given validation code was accepted by the PVF pre-checking vote.",
                    "`code_hash` `para_id`"
                  ]
                },
                {
                  "name": "PvfCheckRejected",
                  "fields": [
                    {
                      "type": 332,
                      "typeName": "ValidationCodeHash",
                      "docs": []
                    },
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "The given validation code was rejected by the PVF pre-checking vote.",
                    "`code_hash` `para_id`"
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 467,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "hrmp",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "OpenChannelRequested",
                  "fields": [
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Open HRMP channel requested.",
                    "`[sender, recipient, proposed_max_capacity, proposed_max_message_size]`"
                  ]
                },
                {
                  "name": "OpenChannelCanceled",
                  "fields": [
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "type": 355,
                      "typeName": "HrmpChannelId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An HRMP channel request sent by the receiver was canceled by either party.",
                    "`[by_parachain, channel_id]`"
                  ]
                },
                {
                  "name": "OpenChannelAccepted",
                  "fields": [
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Open HRMP channel accepted. `[sender, recipient]`"
                  ]
                },
                {
                  "name": "ChannelClosed",
                  "fields": [
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "type": 355,
                      "typeName": "HrmpChannelId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "HRMP channel closed. `[by_parachain, channel_id]`"
                  ]
                },
                {
                  "name": "HrmpChannelForceOpened",
                  "fields": [
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "An HRMP channel was opened via Root origin.",
                    "`[sender, recipient, proposed_max_capacity, proposed_max_message_size]`"
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 468,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "disputes",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "DisputeInitiated",
                  "fields": [
                    {
                      "type": 345,
                      "typeName": "CandidateHash",
                      "docs": []
                    },
                    {
                      "type": 469,
                      "typeName": "DisputeLocation",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A dispute has been initiated. \\[candidate hash, dispute location\\]"
                  ]
                },
                {
                  "name": "DisputeConcluded",
                  "fields": [
                    {
                      "type": 345,
                      "typeName": "CandidateHash",
                      "docs": []
                    },
                    {
                      "type": 470,
                      "typeName": "DisputeResult",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A dispute has concluded for or against a candidate.",
                    "`\\[para id, candidate hash, dispute result\\]`"
                  ]
                },
                {
                  "name": "Revert",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "A dispute has concluded with supermajority against a candidate.",
                    "Block authors should no longer build on top of this head and should",
                    "instead revert the block at the given height. This should be the",
                    "number of the child of the last known valid block in the chain."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 469,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "disputes",
              "DisputeLocation"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Local",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Remote",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 470,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "disputes",
              "DisputeResult"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Valid",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Invalid",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 471,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "paras_registrar",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Registered",
                  "fields": [
                    {
                      "name": "para_id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "manager",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Deregistered",
                  "fields": [
                    {
                      "name": "para_id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Reserved",
                  "fields": [
                    {
                      "name": "para_id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Swapped",
                  "fields": [
                    {
                      "name": "para_id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "other_id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 472,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "slots",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NewLeasePeriod",
                  "fields": [
                    {
                      "name": "lease_period",
                      "type": 4,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A new `[lease_period]` is beginning."
                  ]
                },
                {
                  "name": "Leased",
                  "fields": [
                    {
                      "name": "para_id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "leaser",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "period_begin",
                      "type": 4,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "period_count",
                      "type": 4,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "extra_reserved",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "total_amount",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A para has won the right to a continuous set of lease periods as a parachain.",
                    "First balance is any extra amount reserved on top of the para's existing deposit.",
                    "Second balance is the total amount reserved."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 473,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "auctions",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "AuctionStarted",
                  "fields": [
                    {
                      "name": "auction_index",
                      "type": 4,
                      "typeName": "AuctionIndex",
                      "docs": []
                    },
                    {
                      "name": "lease_period",
                      "type": 4,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "ending",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "An auction started. Provides its index and the block number where it will begin to",
                    "close and the first lease period of the quadruplet that is auctioned."
                  ]
                },
                {
                  "name": "AuctionClosed",
                  "fields": [
                    {
                      "name": "auction_index",
                      "type": 4,
                      "typeName": "AuctionIndex",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "An auction ended. All funds become unreserved."
                  ]
                },
                {
                  "name": "Reserved",
                  "fields": [
                    {
                      "name": "bidder",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "extra_reserved",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "total_amount",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Funds were reserved for a winning bid. First balance is the extra amount reserved.",
                    "Second is the total."
                  ]
                },
                {
                  "name": "Unreserved",
                  "fields": [
                    {
                      "name": "bidder",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Funds were unreserved since bidder is no longer active. `[bidder, amount]`"
                  ]
                },
                {
                  "name": "ReserveConfiscated",
                  "fields": [
                    {
                      "name": "para_id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "leaser",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Someone attempted to lease the same slot twice for a parachain. The amount is held in reserve",
                    "but no parachain slot has been leased."
                  ]
                },
                {
                  "name": "BidAccepted",
                  "fields": [
                    {
                      "name": "bidder",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "para_id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "first_slot",
                      "type": 4,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    },
                    {
                      "name": "last_slot",
                      "type": 4,
                      "typeName": "LeasePeriodOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "A new bid has been accepted as the current winner."
                  ]
                },
                {
                  "name": "WinningOffset",
                  "fields": [
                    {
                      "name": "auction_index",
                      "type": 4,
                      "typeName": "AuctionIndex",
                      "docs": []
                    },
                    {
                      "name": "block_number",
                      "type": 4,
                      "typeName": "T::BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "The winning offset was chosen for an auction. This will map into the `Winning` storage map."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 474,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "crowdloan",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Created",
                  "fields": [
                    {
                      "name": "para_id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Create a new crowdloaning campaign."
                  ]
                },
                {
                  "name": "Contributed",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "fund_index",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Contributed to a crowd sale."
                  ]
                },
                {
                  "name": "Withdrew",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "fund_index",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Withdrew full balance of a contributor."
                  ]
                },
                {
                  "name": "PartiallyRefunded",
                  "fields": [
                    {
                      "name": "para_id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "The loans in a fund have been partially dissolved, i.e. there are some left",
                    "over child keys that still need to be killed."
                  ]
                },
                {
                  "name": "AllRefunded",
                  "fields": [
                    {
                      "name": "para_id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "All loans in a fund have been refunded."
                  ]
                },
                {
                  "name": "Dissolved",
                  "fields": [
                    {
                      "name": "para_id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Fund is dissolved."
                  ]
                },
                {
                  "name": "HandleBidResult",
                  "fields": [
                    {
                      "name": "para_id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "result",
                      "type": 33,
                      "typeName": "DispatchResult",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "The result of trying to submit a new bid to the Slots pallet."
                  ]
                },
                {
                  "name": "Edited",
                  "fields": [
                    {
                      "name": "para_id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "The configuration to a crowdloan has been edited."
                  ]
                },
                {
                  "name": "MemoUpdated",
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "para_id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "memo",
                      "type": 13,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "A memo has been updated."
                  ]
                },
                {
                  "name": "AddedToNewRaise",
                  "fields": [
                    {
                      "name": "para_id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "A parachain has been moved to `NewRaise`"
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 475,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Attempted",
                  "fields": [
                    {
                      "type": 476,
                      "typeName": "xcm::latest::Outcome",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Execution of an XCM message was attempted.",
                    "",
                    "\\[ outcome \\]"
                  ]
                },
                {
                  "name": "Sent",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "type": 402,
                      "typeName": "Xcm<()>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "A XCM message was sent.",
                    "",
                    "\\[ origin, destination, message \\]"
                  ]
                },
                {
                  "name": "UnexpectedResponse",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "type": 11,
                      "typeName": "QueryId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Query response received which does not match a registered query. This may be because a",
                    "matching query was never registered, it may be because it is a duplicate response, or",
                    "because the query timed out.",
                    "",
                    "\\[ origin location, id \\]"
                  ]
                },
                {
                  "name": "ResponseReady",
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "type": 411,
                      "typeName": "Response",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "Query response has been received and is ready for taking with `take_response`. There is",
                    "no registered notification call.",
                    "",
                    "\\[ id, response \\]"
                  ]
                },
                {
                  "name": "Notified",
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": [
                    "Query response has been received and query is removed. The registered notification has",
                    "been dispatched and executed successfully.",
                    "",
                    "\\[ id, pallet index, call index \\]"
                  ]
                },
                {
                  "name": "NotifyOverweight",
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": [
                    "Query response has been received and query is removed. The registered notification could",
                    "not be dispatched because the dispatch weight is greater than the maximum weight",
                    "originally budgeted by this runtime for the query result.",
                    "",
                    "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
                  ]
                },
                {
                  "name": "NotifyDispatchError",
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": [
                    "Query response has been received and query is removed. There was a general error with",
                    "dispatching the notification call.",
                    "",
                    "\\[ id, pallet index, call index \\]"
                  ]
                },
                {
                  "name": "NotifyDecodeFailed",
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": [
                    "Query response has been received and query is removed. The dispatch was unable to be",
                    "decoded into a `Call`; this might be due to dispatch function having a signature which",
                    "is not `(origin, QueryId, Response)`.",
                    "",
                    "\\[ id, pallet index, call index \\]"
                  ]
                },
                {
                  "name": "InvalidResponder",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "type": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "type": 421,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": [
                    "Expected query response has been received but the origin location of the response does",
                    "not match that expected. The query remains registered for a later, valid, response to",
                    "be received and acted upon.",
                    "",
                    "\\[ origin location, id, expected location \\]"
                  ]
                },
                {
                  "name": "InvalidResponderVersion",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "type": 11,
                      "typeName": "QueryId",
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": [
                    "Expected query response has been received but the expected origin location placed in",
                    "storage by this runtime previously cannot be decoded. The query remains registered.",
                    "",
                    "This is unexpected (since a location placed in storage in a previously executing",
                    "runtime should be readable prior to query timeout) and dangerous since the possibly",
                    "valid response will be dropped. Manual governance intervention is probably going to be",
                    "needed.",
                    "",
                    "\\[ origin location, id \\]"
                  ]
                },
                {
                  "name": "ResponseTaken",
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "QueryId",
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": [
                    "Received query response has been read and removed.",
                    "",
                    "\\[ id \\]"
                  ]
                },
                {
                  "name": "AssetsTrapped",
                  "fields": [
                    {
                      "type": 12,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "type": 427,
                      "typeName": "VersionedMultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": [
                    "Some assets have been placed in an asset trap.",
                    "",
                    "\\[ hash, origin, assets \\]"
                  ]
                },
                {
                  "name": "VersionChangeNotified",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "type": 4,
                      "typeName": "XcmVersion",
                      "docs": []
                    },
                    {
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": [
                    "An XCM version change notification message has been attempted to be sent.",
                    "",
                    "The cost of sending it (borne by the chain) is included.",
                    "",
                    "\\[ destination, result, cost \\]"
                  ]
                },
                {
                  "name": "SupportedVersionChanged",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "type": 4,
                      "typeName": "XcmVersion",
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": [
                    "The supported version of a location has been changed. This might be through an",
                    "automatic notification or a manual intervention.",
                    "",
                    "\\[ location, XCM version \\]"
                  ]
                },
                {
                  "name": "NotifyTargetSendFail",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "type": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "type": 414,
                      "typeName": "XcmError",
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": [
                    "A given location which had a version change subscription was dropped owing to an error",
                    "sending the notification to it.",
                    "",
                    "\\[ location, query ID, error \\]"
                  ]
                },
                {
                  "name": "NotifyTargetMigrationFail",
                  "fields": [
                    {
                      "type": 374,
                      "typeName": "VersionedMultiLocation",
                      "docs": []
                    },
                    {
                      "type": 11,
                      "typeName": "QueryId",
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": [
                    "A given location which had a version change subscription was dropped owing to an error",
                    "migrating the location to our new XCM format.",
                    "",
                    "\\[ location, query ID \\]"
                  ]
                },
                {
                  "name": "InvalidQuerierVersion",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "type": 11,
                      "typeName": "QueryId",
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": [
                    "Expected query response has been received but the expected querier location placed in",
                    "storage by this runtime previously cannot be decoded. The query remains registered.",
                    "",
                    "This is unexpected (since a location placed in storage in a previously executing",
                    "runtime should be readable prior to query timeout) and dangerous since the possibly",
                    "valid response will be dropped. Manual governance intervention is probably going to be",
                    "needed.",
                    "",
                    "\\[ origin location, id \\]"
                  ]
                },
                {
                  "name": "InvalidQuerier",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "type": 11,
                      "typeName": "QueryId",
                      "docs": []
                    },
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "type": 421,
                      "typeName": "Option<MultiLocation>",
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": [
                    "Expected query response has been received but the querier location of the response does",
                    "not match the expected. The query remains registered for a later, valid, response to",
                    "be received and acted upon.",
                    "",
                    "\\[ origin location, id, expected querier, maybe actual querier \\]"
                  ]
                },
                {
                  "name": "VersionNotifyStarted",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": [
                    "A remote has requested XCM version change notification from us and we have honored it.",
                    "A version information message is sent to them and its cost is included.",
                    "",
                    "\\[ destination location, cost \\]"
                  ]
                },
                {
                  "name": "VersionNotifyRequested",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": [
                    "We have requested that a remote chain sends us XCM version change notifications.",
                    "",
                    "\\[ destination location, cost \\]"
                  ]
                },
                {
                  "name": "VersionNotifyUnrequested",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": [
                    "We have requested that a remote chain stops sending us XCM version change notifications.",
                    "",
                    "\\[ destination location, cost \\]"
                  ]
                },
                {
                  "name": "FeesPaid",
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "type": 405,
                      "typeName": "MultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": [
                    "Fees were paid from a location for an operation (often for using `SendXcm`).",
                    "",
                    "\\[ paying location, fees \\]"
                  ]
                },
                {
                  "name": "AssetsClaimed",
                  "fields": [
                    {
                      "type": 12,
                      "typeName": "H256",
                      "docs": []
                    },
                    {
                      "type": 164,
                      "typeName": "MultiLocation",
                      "docs": []
                    },
                    {
                      "type": 427,
                      "typeName": "VersionedMultiAssets",
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": [
                    "Some assets have been claimed from an asset trap",
                    "",
                    "\\[ hash, origin, assets \\]"
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 476,
          "type": {
            "path": [
              "xcm",
              "v3",
              "traits",
              "Outcome"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Complete",
                  "fields": [
                    {
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Incomplete",
                  "fields": [
                    {
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "type": 414,
                      "typeName": "Error",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Error",
                  "fields": [
                    {
                      "type": 414,
                      "typeName": "Error",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 477,
          "type": {
            "path": [
              "pallet_message_queue",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "ProcessingFailed",
                  "fields": [
                    {
                      "name": "id",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "origin",
                      "type": 437,
                      "typeName": "MessageOriginOf<T>",
                      "docs": []
                    },
                    {
                      "name": "error",
                      "type": 478,
                      "typeName": "ProcessMessageError",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "Message discarded due to an error in the `MessageProcessor` (usually a format error)."
                  ]
                },
                {
                  "name": "Processed",
                  "fields": [
                    {
                      "name": "id",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "origin",
                      "type": 437,
                      "typeName": "MessageOriginOf<T>",
                      "docs": []
                    },
                    {
                      "name": "weight_used",
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "success",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": [
                    "Message is processed."
                  ]
                },
                {
                  "name": "OverweightEnqueued",
                  "fields": [
                    {
                      "name": "id",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "origin",
                      "type": 437,
                      "typeName": "MessageOriginOf<T>",
                      "docs": []
                    },
                    {
                      "name": "page_index",
                      "type": 4,
                      "typeName": "PageIndex",
                      "docs": []
                    },
                    {
                      "name": "message_index",
                      "type": 4,
                      "typeName": "T::Size",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": [
                    "Message placed in overweight queue."
                  ]
                },
                {
                  "name": "PageReaped",
                  "fields": [
                    {
                      "name": "origin",
                      "type": 437,
                      "typeName": "MessageOriginOf<T>",
                      "docs": []
                    },
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "PageIndex",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": [
                    "This page was reaped."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 478,
          "type": {
            "path": [
              "frame_support",
              "traits",
              "messages",
              "ProcessMessageError"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "BadFormat",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Corrupt",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Unsupported",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Overweight",
                  "fields": [
                    {
                      "type": 9,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Yield",
                  "fields": [],
                  "index": 4,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 479,
          "type": {
            "path": [
              "frame_system",
              "Phase"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "ApplyExtrinsic",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Finalization",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Initialization",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 480,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 12
            },
            "docs": []
          }
        },
        {
          "id": 481,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 31
            },
            "docs": []
          }
        },
        {
          "id": 482,
          "type": {
            "path": [
              "frame_system",
              "LastRuntimeUpgradeInfo"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "spec_version",
                  "type": 91,
                  "typeName": "codec::Compact<u32>",
                  "docs": []
                },
                {
                  "name": "spec_name",
                  "type": 483,
                  "typeName": "sp_runtime::RuntimeString",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 483,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "primitive",
              "value": {
                "tag": "str"
              }
            },
            "docs": []
          }
        },
        {
          "id": 484,
          "type": {
            "path": [
              "frame_system",
              "limits",
              "BlockWeights"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "base_block",
                  "type": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "max_block",
                  "type": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "per_class",
                  "type": 485,
                  "typeName": "PerDispatchClass<WeightsPerClass>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 485,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "PerDispatchClass"
            ],
            "params": [
              {
                "name": "T",
                "type": 486
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "normal",
                  "type": 486,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "operational",
                  "type": 486,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "mandatory",
                  "type": 486,
                  "typeName": "T",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 486,
          "type": {
            "path": [
              "frame_system",
              "limits",
              "WeightsPerClass"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "base_extrinsic",
                  "type": 9,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "max_extrinsic",
                  "type": 444,
                  "typeName": "Option<Weight>",
                  "docs": []
                },
                {
                  "name": "max_total",
                  "type": 444,
                  "typeName": "Option<Weight>",
                  "docs": []
                },
                {
                  "name": "reserved",
                  "type": 444,
                  "typeName": "Option<Weight>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 487,
          "type": {
            "path": [
              "frame_system",
              "limits",
              "BlockLength"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "max",
                  "type": 488,
                  "typeName": "PerDispatchClass<u32>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 488,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "PerDispatchClass"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "normal",
                  "type": 4,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "operational",
                  "type": 4,
                  "typeName": "T",
                  "docs": []
                },
                {
                  "name": "mandatory",
                  "type": 4,
                  "typeName": "T",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 489,
          "type": {
            "path": [
              "sp_weights",
              "RuntimeDbWeight"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "read",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "write",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 490,
          "type": {
            "path": [
              "sp_version",
              "RuntimeVersion"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "spec_name",
                  "type": 483,
                  "typeName": "RuntimeString",
                  "docs": []
                },
                {
                  "name": "impl_name",
                  "type": 483,
                  "typeName": "RuntimeString",
                  "docs": []
                },
                {
                  "name": "authoring_version",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "spec_version",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "impl_version",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "apis",
                  "type": 491,
                  "typeName": "ApisVec",
                  "docs": []
                },
                {
                  "name": "transaction_version",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "state_version",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 491,
          "type": {
            "path": [
              "Cow"
            ],
            "params": [
              {
                "name": "T",
                "type": 492
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 492,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 492,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 493
            },
            "docs": []
          }
        },
        {
          "id": 493,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                198,
                4
              ]
            },
            "docs": []
          }
        },
        {
          "id": 494,
          "type": {
            "path": [
              "frame_system",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "InvalidSpecName",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The name of specification does not match between the current runtime",
                    "and the new runtime."
                  ]
                },
                {
                  "name": "SpecVersionNeedsToIncrease",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The specification version is not allowed to decrease between the current runtime",
                    "and the new runtime."
                  ]
                },
                {
                  "name": "FailedToExtractRuntimeVersion",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Failed to extract the runtime version from the new runtime.",
                    "",
                    "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                  ]
                },
                {
                  "name": "NonDefaultComposite",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Suicide called when the account has non-default composite data."
                  ]
                },
                {
                  "name": "NonZeroRefCount",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "There is a non-zero reference count preventing the account from being purged."
                  ]
                },
                {
                  "name": "CallFiltered",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The origin filter prevent the call to be dispatched."
                  ]
                }
              ]
            },
            "docs": [
              "Error for the System pallet"
            ]
          }
        },
        {
          "id": 495,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 496
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 498,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 496,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 497
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 497,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 497,
          "type": {
            "path": [
              "pallet_scheduler",
              "Scheduled"
            ],
            "params": [
              {
                "name": "Name",
                "type": 1
              },
              {
                "name": "Call",
                "type": 78
              },
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "PalletsOrigin",
                "type": 156
              },
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "maybe_id",
                  "type": 32,
                  "typeName": "Option<Name>",
                  "docs": []
                },
                {
                  "name": "priority",
                  "type": 2,
                  "typeName": "schedule::Priority",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 78,
                  "typeName": "Call",
                  "docs": []
                },
                {
                  "name": "maybe_periodic",
                  "type": 85,
                  "typeName": "Option<schedule::Period<BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "origin",
                  "type": 156,
                  "typeName": "PalletsOrigin",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 498,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 496
            },
            "docs": []
          }
        },
        {
          "id": 499,
          "type": {
            "path": [
              "pallet_scheduler",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "FailedToSchedule",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Failed to schedule a call"
                  ]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Cannot find the scheduled call."
                  ]
                },
                {
                  "name": "TargetBlockNumberInPast",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Given target block number is in the past."
                  ]
                },
                {
                  "name": "RescheduleNoChange",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Reschedule failed because it does not change scheduled time."
                  ]
                },
                {
                  "name": "Named",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Attempt to use a non-named function on a named task."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 500,
          "type": {
            "path": [
              "pallet_preimage",
              "RequestStatus"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Unrequested",
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 72,
                      "typeName": "(AccountId, Balance)",
                      "docs": []
                    },
                    {
                      "name": "len",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Requested",
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 501,
                      "typeName": "Option<(AccountId, Balance)>",
                      "docs": []
                    },
                    {
                      "name": "count",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "len",
                      "type": 141,
                      "typeName": "Option<u32>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 501,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 72
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 72,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 502,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                12,
                4
              ]
            },
            "docs": []
          }
        },
        {
          "id": 503,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 13,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 504,
          "type": {
            "path": [
              "pallet_preimage",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "TooBig",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Preimage is too large to store on-chain."
                  ]
                },
                {
                  "name": "AlreadyNoted",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Preimage has already been noted on-chain."
                  ]
                },
                {
                  "name": "NotAuthorized",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The user is not authorized to perform this action."
                  ]
                },
                {
                  "name": "NotNoted",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The preimage cannot be removed since it has not yet been noted."
                  ]
                },
                {
                  "name": "Requested",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "A preimage may not be removed when there are outstanding requests."
                  ]
                },
                {
                  "name": "NotRequested",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The preimage request cannot be removed since no outstanding requests exist."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 505,
          "type": {
            "path": [
              "bounded_collections",
              "weak_bounded_vec",
              "WeakBoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 506
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 507,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 506,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                92,
                11
              ]
            },
            "docs": []
          }
        },
        {
          "id": 507,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 506
            },
            "docs": []
          }
        },
        {
          "id": 508,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 1
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 509,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 509,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 1
            },
            "docs": []
          }
        },
        {
          "id": 510,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 511
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 511,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 511,
          "type": {
            "path": [
              "sp_consensus_babe",
              "digests",
              "PreDigest"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Primary",
                  "fields": [
                    {
                      "type": 512,
                      "typeName": "PrimaryPreDigest",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "SecondaryPlain",
                  "fields": [
                    {
                      "type": 514,
                      "typeName": "SecondaryPlainPreDigest",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "SecondaryVRF",
                  "fields": [
                    {
                      "type": 515,
                      "typeName": "SecondaryVRFPreDigest",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 512,
          "type": {
            "path": [
              "sp_consensus_babe",
              "digests",
              "PrimaryPreDigest"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "authority_index",
                  "type": 4,
                  "typeName": "super::AuthorityIndex",
                  "docs": []
                },
                {
                  "name": "slot",
                  "type": 93,
                  "typeName": "Slot",
                  "docs": []
                },
                {
                  "name": "vrf_signature",
                  "type": 513,
                  "typeName": "VrfSignature",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 513,
          "type": {
            "path": [
              "sp_core",
              "sr25519",
              "vrf",
              "VrfSignature"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "output",
                  "type": 1,
                  "typeName": "VrfOutput",
                  "docs": []
                },
                {
                  "name": "proof",
                  "type": 126,
                  "typeName": "VrfProof",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 514,
          "type": {
            "path": [
              "sp_consensus_babe",
              "digests",
              "SecondaryPlainPreDigest"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "authority_index",
                  "type": 4,
                  "typeName": "super::AuthorityIndex",
                  "docs": []
                },
                {
                  "name": "slot",
                  "type": 93,
                  "typeName": "Slot",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 515,
          "type": {
            "path": [
              "sp_consensus_babe",
              "digests",
              "SecondaryVRFPreDigest"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "authority_index",
                  "type": 4,
                  "typeName": "super::AuthorityIndex",
                  "docs": []
                },
                {
                  "name": "slot",
                  "type": 93,
                  "typeName": "Slot",
                  "docs": []
                },
                {
                  "name": "vrf_signature",
                  "type": 513,
                  "typeName": "VrfSignature",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 516,
          "type": {
            "path": [
              "sp_consensus_babe",
              "BabeEpochConfiguration"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "c",
                  "type": 96,
                  "typeName": "(u64, u64)",
                  "docs": []
                },
                {
                  "name": "allowed_slots",
                  "type": 97,
                  "typeName": "AllowedSlots",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 517,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 518
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 519,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 518,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                11,
                4
              ]
            },
            "docs": []
          }
        },
        {
          "id": 519,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 518
            },
            "docs": []
          }
        },
        {
          "id": 520,
          "type": {
            "path": [
              "pallet_babe",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "InvalidEquivocationProof",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "An equivocation proof provided as part of an equivocation report is invalid."
                  ]
                },
                {
                  "name": "InvalidKeyOwnershipProof",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "A key ownership proof provided as part of an equivocation report is invalid."
                  ]
                },
                {
                  "name": "DuplicateOffenceReport",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "A given equivocation report is valid but already previously reported."
                  ]
                },
                {
                  "name": "InvalidConfiguration",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Submitted configuration is invalid."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 521,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                0,
                6,
                44
              ]
            },
            "docs": []
          }
        },
        {
          "id": 522,
          "type": {
            "path": [
              "pallet_indices",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NotAssigned",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The index was not already assigned."
                  ]
                },
                {
                  "name": "NotOwner",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The index is assigned to another account."
                  ]
                },
                {
                  "name": "InUse",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The index was not available."
                  ]
                },
                {
                  "name": "NotTransfer",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The source and destination accounts are identical."
                  ]
                },
                {
                  "name": "Permanent",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The index is permanent and may not be freed/changed."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 523,
          "type": {
            "path": [
              "bounded_collections",
              "weak_bounded_vec",
              "WeakBoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 524
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 526,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 524,
          "type": {
            "path": [
              "pallet_balances",
              "types",
              "BalanceLock"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "id",
                  "type": 198,
                  "typeName": "LockIdentifier",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "reasons",
                  "type": 525,
                  "typeName": "Reasons",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 525,
          "type": {
            "path": [
              "pallet_balances",
              "types",
              "Reasons"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Fee",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Misc",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "All",
                  "fields": [],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 526,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 524
            },
            "docs": []
          }
        },
        {
          "id": 527,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 528
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 529,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 528,
          "type": {
            "path": [
              "pallet_balances",
              "types",
              "ReserveData"
            ],
            "params": [
              {
                "name": "ReserveIdentifier",
                "type": 198
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "id",
                  "type": 198,
                  "typeName": "ReserveIdentifier",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 529,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 528
            },
            "docs": []
          }
        },
        {
          "id": 530,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 531
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 532,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 531,
          "type": {
            "path": [
              "pallet_balances",
              "types",
              "IdAmount"
            ],
            "params": [
              {
                "name": "Id",
                "type": 34
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "id",
                  "type": 34,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 532,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 531
            },
            "docs": []
          }
        },
        {
          "id": 533,
          "type": {
            "path": [
              "pallet_balances",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "VestingBalance",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Vesting balance too high to send value."
                  ]
                },
                {
                  "name": "LiquidityRestrictions",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Account liquidity restrictions prevent withdrawal."
                  ]
                },
                {
                  "name": "InsufficientBalance",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Balance too low to send value."
                  ]
                },
                {
                  "name": "ExistentialDeposit",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Value too low to create account due to existential deposit."
                  ]
                },
                {
                  "name": "Expendability",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Transfer/payment would kill account."
                  ]
                },
                {
                  "name": "ExistingVestingSchedule",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "A vesting schedule already exists for this account."
                  ]
                },
                {
                  "name": "DeadAccount",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Beneficiary account must pre-exist."
                  ]
                },
                {
                  "name": "TooManyReserves",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Number of named reserves exceed `MaxReserves`."
                  ]
                },
                {
                  "name": "TooManyHolds",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Number of holds exceed `MaxHolds`."
                  ]
                },
                {
                  "name": "TooManyFreezes",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Number of freezes exceed `MaxFreezes`."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 534,
          "type": {
            "path": [
              "sp_arithmetic",
              "fixed_point",
              "FixedU128"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 6,
                  "typeName": "u128",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 535,
          "type": {
            "path": [
              "pallet_transaction_payment",
              "Releases"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "V1Ancient",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "V2",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 536,
          "type": {
            "path": [
              "pallet_staking",
              "StakingLedger"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "total",
                  "type": 60,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "active",
                  "type": 60,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "unlocking",
                  "type": 537,
                  "typeName": "BoundedVec<UnlockChunk<BalanceOf<T>>, T::MaxUnlockingChunks>",
                  "docs": []
                },
                {
                  "name": "claimed_rewards",
                  "type": 540,
                  "typeName": "BoundedVec<EraIndex, T::HistoryDepth>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 537,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 538
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 539,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 538,
          "type": {
            "path": [
              "pallet_staking",
              "UnlockChunk"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "value",
                  "type": 60,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "era",
                  "type": 91,
                  "typeName": "EraIndex",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 539,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 538
            },
            "docs": []
          }
        },
        {
          "id": 540,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 109,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 541,
          "type": {
            "path": [
              "pallet_staking",
              "Nominations"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "targets",
                  "type": 542,
                  "typeName": "BoundedVec<T::AccountId, T::MaxNominations>",
                  "docs": []
                },
                {
                  "name": "submitted_in",
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "suppressed",
                  "type": 44,
                  "typeName": "bool",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 542,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 104,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 543,
          "type": {
            "path": [
              "pallet_staking",
              "ActiveEraInfo"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "start",
                  "type": 544,
                  "typeName": "Option<u64>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 544,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 11
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 11,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 545,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                4,
                0
              ]
            },
            "docs": []
          }
        },
        {
          "id": 546,
          "type": {
            "path": [
              "pallet_staking",
              "EraRewardPoints"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "total",
                  "type": 4,
                  "typeName": "RewardPoint",
                  "docs": []
                },
                {
                  "name": "individual",
                  "type": 547,
                  "typeName": "BTreeMap<AccountId, RewardPoint>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 547,
          "type": {
            "path": [
              "BTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 0
              },
              {
                "name": "V",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 548,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 548,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 549
            },
            "docs": []
          }
        },
        {
          "id": 549,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                0,
                4
              ]
            },
            "docs": []
          }
        },
        {
          "id": 550,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 551
            },
            "docs": []
          }
        },
        {
          "id": 551,
          "type": {
            "path": [
              "pallet_staking",
              "UnappliedSlash"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "validator",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "own",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "others",
                  "type": 71,
                  "typeName": "Vec<(AccountId, Balance)>",
                  "docs": []
                },
                {
                  "name": "reporters",
                  "type": 104,
                  "typeName": "Vec<AccountId>",
                  "docs": []
                },
                {
                  "name": "payout",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 552,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                41,
                6
              ]
            },
            "docs": []
          }
        },
        {
          "id": 553,
          "type": {
            "path": [
              "pallet_staking",
              "slashing",
              "SlashingSpans"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "span_index",
                  "type": 4,
                  "typeName": "SpanIndex",
                  "docs": []
                },
                {
                  "name": "last_start",
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "last_nonzero_slash",
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "prior",
                  "type": 109,
                  "typeName": "Vec<EraIndex>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 554,
          "type": {
            "path": [
              "pallet_staking",
              "slashing",
              "SpanRecord"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "slashed",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "paid_out",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 555,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 556
            },
            "docs": []
          }
        },
        {
          "id": 556,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                4,
                44
              ]
            },
            "docs": []
          }
        },
        {
          "id": 557,
          "type": {
            "path": [
              "pallet_staking",
              "pallet",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NotController",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Not a controller account."
                  ]
                },
                {
                  "name": "NotStash",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Not a stash account."
                  ]
                },
                {
                  "name": "AlreadyBonded",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Stash is already bonded."
                  ]
                },
                {
                  "name": "AlreadyPaired",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Controller is already paired."
                  ]
                },
                {
                  "name": "EmptyTargets",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Targets cannot be empty."
                  ]
                },
                {
                  "name": "DuplicateIndex",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Duplicate index."
                  ]
                },
                {
                  "name": "InvalidSlashIndex",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Slash record index out of bounds."
                  ]
                },
                {
                  "name": "InsufficientBond",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Cannot have a validator or nominator role, with value less than the minimum defined by",
                    "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the",
                    "intention, `chill` first to remove one's role as validator/nominator."
                  ]
                },
                {
                  "name": "NoMoreChunks",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Can not schedule more unlock chunks."
                  ]
                },
                {
                  "name": "NoUnlockChunk",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Can not rebond without unlocking chunks."
                  ]
                },
                {
                  "name": "FundedTarget",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "Attempting to target a stash that still has funds."
                  ]
                },
                {
                  "name": "InvalidEraToReward",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "Invalid era to reward."
                  ]
                },
                {
                  "name": "InvalidNumberOfNominations",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Invalid number of nominations."
                  ]
                },
                {
                  "name": "NotSortedAndUnique",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "Items are not sorted and unique."
                  ]
                },
                {
                  "name": "AlreadyClaimed",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "Rewards for this era have already been claimed for this validator."
                  ]
                },
                {
                  "name": "IncorrectHistoryDepth",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "Incorrect previous history depth input provided."
                  ]
                },
                {
                  "name": "IncorrectSlashingSpans",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "Incorrect number of slashing spans provided."
                  ]
                },
                {
                  "name": "BadState",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "Internal state has become somehow corrupted and the operation cannot continue."
                  ]
                },
                {
                  "name": "TooManyTargets",
                  "fields": [],
                  "index": 18,
                  "docs": [
                    "Too many nomination targets supplied."
                  ]
                },
                {
                  "name": "BadTarget",
                  "fields": [],
                  "index": 19,
                  "docs": [
                    "A nomination target was supplied that was blocked or otherwise not a validator."
                  ]
                },
                {
                  "name": "CannotChillOther",
                  "fields": [],
                  "index": 20,
                  "docs": [
                    "The user has enough bond and thus cannot be chilled forcefully by an external person."
                  ]
                },
                {
                  "name": "TooManyNominators",
                  "fields": [],
                  "index": 21,
                  "docs": [
                    "There are too many nominators in the system. Governance needs to adjust the staking",
                    "settings to keep things safe for the runtime."
                  ]
                },
                {
                  "name": "TooManyValidators",
                  "fields": [],
                  "index": 22,
                  "docs": [
                    "There are too many validator candidates in the system. Governance needs to adjust the",
                    "staking settings to keep things safe for the runtime."
                  ]
                },
                {
                  "name": "CommissionTooLow",
                  "fields": [],
                  "index": 23,
                  "docs": [
                    "Commission is too low. Must be at least `MinCommission`."
                  ]
                },
                {
                  "name": "BoundNotMet",
                  "fields": [],
                  "index": 24,
                  "docs": [
                    "Some bound is not met."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 558,
          "type": {
            "path": [
              "sp_staking",
              "offence",
              "OffenceDetails"
            ],
            "params": [
              {
                "name": "Reporter",
                "type": 0
              },
              {
                "name": "Offender",
                "type": 58
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "offender",
                  "type": 58,
                  "typeName": "Offender",
                  "docs": []
                },
                {
                  "name": "reporters",
                  "type": 104,
                  "typeName": "Vec<Reporter>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 559,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                47,
                13
              ]
            },
            "docs": []
          }
        },
        {
          "id": 560,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 561
            },
            "docs": []
          }
        },
        {
          "id": 561,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                0,
                115
              ]
            },
            "docs": []
          }
        },
        {
          "id": 562,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                563,
                13
              ]
            },
            "docs": []
          }
        },
        {
          "id": 563,
          "type": {
            "path": [
              "sp_core",
              "crypto",
              "KeyTypeId"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 17,
                  "typeName": "[u8; 4]",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 564,
          "type": {
            "path": [
              "pallet_session",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "InvalidProof",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Invalid ownership proof."
                  ]
                },
                {
                  "name": "NoAssociatedValidatorId",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "No associated validator ID for account."
                  ]
                },
                {
                  "name": "DuplicatedKey",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Registered duplicate key."
                  ]
                },
                {
                  "name": "NoKeys",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "No keys are associated with this account."
                  ]
                },
                {
                  "name": "NoAccount",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Key setting account is not live, so it's impossible to associate keys."
                  ]
                }
              ]
            },
            "docs": [
              "Error for the session pallet."
            ]
          }
        },
        {
          "id": 565,
          "type": {
            "path": [
              "pallet_grandpa",
              "StoredState"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Live",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "PendingPause",
                  "fields": [
                    {
                      "name": "scheduled_at",
                      "type": 4,
                      "typeName": "N",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "N",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Paused",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "PendingResume",
                  "fields": [
                    {
                      "name": "scheduled_at",
                      "type": 4,
                      "typeName": "N",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "N",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 566,
          "type": {
            "path": [
              "pallet_grandpa",
              "StoredPendingChange"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              },
              {
                "name": "Limit"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "scheduled_at",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "next_authorities",
                  "type": 567,
                  "typeName": "BoundedAuthorityList<Limit>",
                  "docs": []
                },
                {
                  "name": "forced",
                  "type": 141,
                  "typeName": "Option<N>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 567,
          "type": {
            "path": [
              "bounded_collections",
              "weak_bounded_vec",
              "WeakBoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 51
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 50,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 568,
          "type": {
            "path": [
              "pallet_grandpa",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "PauseFailed",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Attempt to signal GRANDPA pause when the authority set isn't live",
                    "(either paused or already pending pause)."
                  ]
                },
                {
                  "name": "ResumeFailed",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Attempt to signal GRANDPA resume when the authority set isn't paused",
                    "(either live or already pending resume)."
                  ]
                },
                {
                  "name": "ChangePending",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Attempt to signal GRANDPA change with one already pending."
                  ]
                },
                {
                  "name": "TooSoon",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Cannot signal forced change so soon after last."
                  ]
                },
                {
                  "name": "InvalidKeyOwnershipProof",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "A key ownership proof provided as part of an equivocation report is invalid."
                  ]
                },
                {
                  "name": "InvalidEquivocationProof",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "An equivocation proof provided as part of an equivocation report is invalid."
                  ]
                },
                {
                  "name": "DuplicateOffenceReport",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "A given equivocation report is valid but already previously reported."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 569,
          "type": {
            "path": [
              "bounded_collections",
              "weak_bounded_vec",
              "WeakBoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 55
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 570,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 570,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 55
            },
            "docs": []
          }
        },
        {
          "id": 571,
          "type": {
            "path": [
              "frame_support",
              "traits",
              "misc",
              "WrapperOpaque"
            ],
            "params": [
              {
                "name": "T",
                "type": 572
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 91,
                  "docs": []
                },
                {
                  "type": 572,
                  "typeName": "T",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 572,
          "type": {
            "path": [
              "pallet_im_online",
              "BoundedOpaqueNetworkState"
            ],
            "params": [
              {
                "name": "PeerIdEncodingLimit"
              },
              {
                "name": "MultiAddrEncodingLimit"
              },
              {
                "name": "AddressesLimit"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "peer_id",
                  "type": 573,
                  "typeName": "WeakBoundedVec<u8, PeerIdEncodingLimit>",
                  "docs": []
                },
                {
                  "name": "external_addresses",
                  "type": 574,
                  "typeName": "WeakBoundedVec<WeakBoundedVec<u8, MultiAddrEncodingLimit>, AddressesLimit\n>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 573,
          "type": {
            "path": [
              "bounded_collections",
              "weak_bounded_vec",
              "WeakBoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 13,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 574,
          "type": {
            "path": [
              "bounded_collections",
              "weak_bounded_vec",
              "WeakBoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 573
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 575,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 575,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 573
            },
            "docs": []
          }
        },
        {
          "id": 576,
          "type": {
            "path": [
              "pallet_im_online",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "InvalidKey",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Non existent public key."
                  ]
                },
                {
                  "name": "DuplicatedHeartbeat",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Duplicated heartbeat."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 577,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 578
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 579,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 578,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                4,
                78,
                0
              ]
            },
            "docs": []
          }
        },
        {
          "id": 579,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 578
            },
            "docs": []
          }
        },
        {
          "id": 580,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                581,
                6
              ]
            },
            "docs": []
          }
        },
        {
          "id": 581,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 104,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 582,
          "type": {
            "path": [
              "pallet_democracy",
              "types",
              "ReferendumInfo"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "Proposal",
                "type": 78
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Ongoing",
                  "fields": [
                    {
                      "type": 583,
                      "typeName": "ReferendumStatus<BlockNumber, Proposal, Balance>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Finished",
                  "fields": [
                    {
                      "name": "approved",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 583,
          "type": {
            "path": [
              "pallet_democracy",
              "types",
              "ReferendumStatus"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "Proposal",
                "type": 78
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "end",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "proposal",
                  "type": 78,
                  "typeName": "Proposal",
                  "docs": []
                },
                {
                  "name": "threshold",
                  "type": 64,
                  "typeName": "VoteThreshold",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "tally",
                  "type": 584,
                  "typeName": "Tally<Balance>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 584,
          "type": {
            "path": [
              "pallet_democracy",
              "types",
              "Tally"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "ayes",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "nays",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "turnout",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 585,
          "type": {
            "path": [
              "pallet_democracy",
              "vote",
              "Voting"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "MaxVotes"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Direct",
                  "fields": [
                    {
                      "name": "votes",
                      "type": 586,
                      "typeName": "BoundedVec<(ReferendumIndex, AccountVote<Balance>), MaxVotes>",
                      "docs": []
                    },
                    {
                      "name": "delegations",
                      "type": 589,
                      "typeName": "Delegations<Balance>",
                      "docs": []
                    },
                    {
                      "name": "prior",
                      "type": 590,
                      "typeName": "PriorLock<BlockNumber, Balance>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Delegating",
                  "fields": [
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "target",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "conviction",
                      "type": 140,
                      "typeName": "Conviction",
                      "docs": []
                    },
                    {
                      "name": "delegations",
                      "type": 589,
                      "typeName": "Delegations<Balance>",
                      "docs": []
                    },
                    {
                      "name": "prior",
                      "type": 590,
                      "typeName": "PriorLock<BlockNumber, Balance>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 586,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 587
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 588,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 587,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                4,
                65
              ]
            },
            "docs": []
          }
        },
        {
          "id": 588,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 587
            },
            "docs": []
          }
        },
        {
          "id": 589,
          "type": {
            "path": [
              "pallet_democracy",
              "types",
              "Delegations"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "votes",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "capital",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 590,
          "type": {
            "path": [
              "pallet_democracy",
              "vote",
              "PriorLock"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 591,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                78,
                64
              ]
            },
            "docs": []
          }
        },
        {
          "id": 592,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                4,
                581
              ]
            },
            "docs": []
          }
        },
        {
          "id": 593,
          "type": {
            "path": [
              "pallet_democracy",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "ValueLow",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Value too low"
                  ]
                },
                {
                  "name": "ProposalMissing",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Proposal does not exist"
                  ]
                },
                {
                  "name": "AlreadyCanceled",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Cannot cancel the same proposal twice"
                  ]
                },
                {
                  "name": "DuplicateProposal",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Proposal already made"
                  ]
                },
                {
                  "name": "ProposalBlacklisted",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Proposal still blacklisted"
                  ]
                },
                {
                  "name": "NotSimpleMajority",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Next external proposal not simple majority"
                  ]
                },
                {
                  "name": "InvalidHash",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Invalid hash"
                  ]
                },
                {
                  "name": "NoProposal",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "No external proposal"
                  ]
                },
                {
                  "name": "AlreadyVetoed",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Identity may not veto a proposal twice"
                  ]
                },
                {
                  "name": "ReferendumInvalid",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Vote given for invalid referendum"
                  ]
                },
                {
                  "name": "NoneWaiting",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "No proposals waiting"
                  ]
                },
                {
                  "name": "NotVoter",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The given account did not vote on the referendum."
                  ]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "The actor has no permission to conduct the action."
                  ]
                },
                {
                  "name": "AlreadyDelegating",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "The account is already delegating."
                  ]
                },
                {
                  "name": "InsufficientFunds",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "Too high a balance was provided that the account cannot afford."
                  ]
                },
                {
                  "name": "NotDelegating",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "The account is not currently delegating."
                  ]
                },
                {
                  "name": "VotesExist",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "The account currently has votes attached to it and the operation cannot succeed until",
                    "these are removed, either through `unvote` or `reap_vote`."
                  ]
                },
                {
                  "name": "InstantNotAllowed",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "The instant referendum origin is currently disallowed."
                  ]
                },
                {
                  "name": "Nonsense",
                  "fields": [],
                  "index": 18,
                  "docs": [
                    "Delegation to oneself makes no sense."
                  ]
                },
                {
                  "name": "WrongUpperBound",
                  "fields": [],
                  "index": 19,
                  "docs": [
                    "Invalid upper bound."
                  ]
                },
                {
                  "name": "MaxVotesReached",
                  "fields": [],
                  "index": 20,
                  "docs": [
                    "Maximum number of votes reached."
                  ]
                },
                {
                  "name": "TooMany",
                  "fields": [],
                  "index": 21,
                  "docs": [
                    "Maximum number of items reached."
                  ]
                },
                {
                  "name": "VotingPeriodLow",
                  "fields": [],
                  "index": 22,
                  "docs": [
                    "Voting period too low"
                  ]
                },
                {
                  "name": "PreimageNotExist",
                  "fields": [],
                  "index": 23,
                  "docs": [
                    "The preimage does not exist."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 594,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 12
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 480,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 595,
          "type": {
            "path": [
              "pallet_collective",
              "Votes"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": "threshold",
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": "ayes",
                  "type": 104,
                  "typeName": "Vec<AccountId>",
                  "docs": []
                },
                {
                  "name": "nays",
                  "type": 104,
                  "typeName": "Vec<AccountId>",
                  "docs": []
                },
                {
                  "name": "end",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 596,
          "type": {
            "path": [
              "pallet_collective",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NotMember",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Account is not a member"
                  ]
                },
                {
                  "name": "DuplicateProposal",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Duplicate proposals not allowed"
                  ]
                },
                {
                  "name": "ProposalMissing",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Proposal must exist"
                  ]
                },
                {
                  "name": "WrongIndex",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Mismatched index"
                  ]
                },
                {
                  "name": "DuplicateVote",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Duplicate vote ignored"
                  ]
                },
                {
                  "name": "AlreadyInitialized",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Members are already initialized!"
                  ]
                },
                {
                  "name": "TooEarly",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The close call was made too early, before the end of the voting."
                  ]
                },
                {
                  "name": "TooManyProposals",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "There can only be a maximum of `MaxProposals` active proposals."
                  ]
                },
                {
                  "name": "WrongProposalWeight",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The given weight bound for the proposal was too low."
                  ]
                },
                {
                  "name": "WrongProposalLength",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The given length bound for the proposal was too low."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 597,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 12
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 480,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 598,
          "type": {
            "path": [
              "pallet_collective",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NotMember",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Account is not a member"
                  ]
                },
                {
                  "name": "DuplicateProposal",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Duplicate proposals not allowed"
                  ]
                },
                {
                  "name": "ProposalMissing",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Proposal must exist"
                  ]
                },
                {
                  "name": "WrongIndex",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Mismatched index"
                  ]
                },
                {
                  "name": "DuplicateVote",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Duplicate vote ignored"
                  ]
                },
                {
                  "name": "AlreadyInitialized",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Members are already initialized!"
                  ]
                },
                {
                  "name": "TooEarly",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The close call was made too early, before the end of the voting."
                  ]
                },
                {
                  "name": "TooManyProposals",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "There can only be a maximum of `MaxProposals` active proposals."
                  ]
                },
                {
                  "name": "WrongProposalWeight",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The given weight bound for the proposal was too low."
                  ]
                },
                {
                  "name": "WrongProposalLength",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The given length bound for the proposal was too low."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 599,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 600
            },
            "docs": []
          }
        },
        {
          "id": 600,
          "type": {
            "path": [
              "pallet_elections_phragmen",
              "SeatHolder"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "stake",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 601,
          "type": {
            "path": [
              "pallet_elections_phragmen",
              "Voter"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "votes",
                  "type": 104,
                  "typeName": "Vec<AccountId>",
                  "docs": []
                },
                {
                  "name": "stake",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 602,
          "type": {
            "path": [
              "pallet_elections_phragmen",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "UnableToVote",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Cannot vote when no candidates or members exist."
                  ]
                },
                {
                  "name": "NoVotes",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Must vote for at least one candidate."
                  ]
                },
                {
                  "name": "TooManyVotes",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Cannot vote more than candidates."
                  ]
                },
                {
                  "name": "MaximumVotesExceeded",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Cannot vote more than maximum allowed."
                  ]
                },
                {
                  "name": "LowBalance",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Cannot vote with stake less than minimum balance."
                  ]
                },
                {
                  "name": "UnableToPayBond",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Voter can not pay voting bond."
                  ]
                },
                {
                  "name": "MustBeVoter",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Must be a voter."
                  ]
                },
                {
                  "name": "DuplicatedCandidate",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Duplicated candidate submission."
                  ]
                },
                {
                  "name": "TooManyCandidates",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Too many candidates have been created."
                  ]
                },
                {
                  "name": "MemberSubmit",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Member cannot re-submit candidacy."
                  ]
                },
                {
                  "name": "RunnerUpSubmit",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "Runner cannot re-submit candidacy."
                  ]
                },
                {
                  "name": "InsufficientCandidateFunds",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "Candidate does not have enough funds."
                  ]
                },
                {
                  "name": "NotMember",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Not a member."
                  ]
                },
                {
                  "name": "InvalidWitnessData",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "The provided count of number of candidates is incorrect."
                  ]
                },
                {
                  "name": "InvalidVoteCount",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "The provided count of number of votes is incorrect."
                  ]
                },
                {
                  "name": "InvalidRenouncing",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "The renouncing origin presented a wrong `Renouncing` parameter."
                  ]
                },
                {
                  "name": "InvalidReplacement",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "Prediction regarding replacement after member removal is wrong."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 603,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 104,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 604,
          "type": {
            "path": [
              "pallet_membership",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "AlreadyMember",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Already a member."
                  ]
                },
                {
                  "name": "NotMember",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Not a member."
                  ]
                },
                {
                  "name": "TooManyMembers",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Too many members."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 605,
          "type": {
            "path": [
              "pallet_treasury",
              "Proposal"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "proposer",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "bond",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 606,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 109,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 607,
          "type": {
            "path": [
              "sp_arithmetic",
              "per_things",
              "Permill"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 608,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 6
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 6,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 609,
          "type": {
            "path": [
              "frame_support",
              "PalletId"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 198,
                  "typeName": "[u8; 8]",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 610,
          "type": {
            "path": [
              "pallet_treasury",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "InsufficientProposersBalance",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Proposer's balance is too low."
                  ]
                },
                {
                  "name": "InvalidIndex",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "No proposal or bounty at that index."
                  ]
                },
                {
                  "name": "TooManyApprovals",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Too many approvals in the queue."
                  ]
                },
                {
                  "name": "InsufficientPermission",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The spend origin is valid but the amount it is allowed to spend is lower than the",
                    "amount to be spent."
                  ]
                },
                {
                  "name": "ProposalNotApproved",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Proposal has not been approved."
                  ]
                }
              ]
            },
            "docs": [
              "Error for the treasury pallet."
            ]
          }
        },
        {
          "id": 611,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                0,
                77
              ]
            },
            "docs": []
          }
        },
        {
          "id": 612,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "vote",
              "Voting"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "PollIndex",
                "type": 4
              },
              {
                "name": "MaxVotes"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Casting",
                  "fields": [
                    {
                      "type": 613,
                      "typeName": "Casting<Balance, BlockNumber, PollIndex, MaxVotes>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Delegating",
                  "fields": [
                    {
                      "type": 619,
                      "typeName": "Delegating<Balance, AccountId, BlockNumber>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 613,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "vote",
              "Casting"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "PollIndex",
                "type": 4
              },
              {
                "name": "MaxVotes"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "votes",
                  "type": 614,
                  "typeName": "BoundedVec<(PollIndex, AccountVote<Balance>), MaxVotes>",
                  "docs": []
                },
                {
                  "name": "delegations",
                  "type": 617,
                  "typeName": "Delegations<Balance>",
                  "docs": []
                },
                {
                  "name": "prior",
                  "type": 618,
                  "typeName": "PriorLock<BlockNumber, Balance>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 614,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 615
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 616,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 615,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                4,
                151
              ]
            },
            "docs": []
          }
        },
        {
          "id": 616,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 615
            },
            "docs": []
          }
        },
        {
          "id": 617,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "types",
              "Delegations"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "votes",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "capital",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 618,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "vote",
              "PriorLock"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 619,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "vote",
              "Delegating"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "balance",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "conviction",
                  "type": 153,
                  "typeName": "Conviction",
                  "docs": []
                },
                {
                  "name": "delegations",
                  "type": 617,
                  "typeName": "Delegations<Balance>",
                  "docs": []
                },
                {
                  "name": "prior",
                  "type": 618,
                  "typeName": "PriorLock<BlockNumber, Balance>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 620,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 621
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 622,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 621,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                77,
                6
              ]
            },
            "docs": []
          }
        },
        {
          "id": 622,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 621
            },
            "docs": []
          }
        },
        {
          "id": 623,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NotOngoing",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Poll is not ongoing."
                  ]
                },
                {
                  "name": "NotVoter",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The given account did not vote on the poll."
                  ]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The actor has no permission to conduct the action."
                  ]
                },
                {
                  "name": "NoPermissionYet",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The actor has no permission to conduct the action right now but will do in the future."
                  ]
                },
                {
                  "name": "AlreadyDelegating",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The account is already delegating."
                  ]
                },
                {
                  "name": "AlreadyVoting",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The account currently has votes attached to it and the operation cannot succeed until",
                    "these are removed, either through `unvote` or `reap_vote`."
                  ]
                },
                {
                  "name": "InsufficientFunds",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Too high a balance was provided that the account cannot afford."
                  ]
                },
                {
                  "name": "NotDelegating",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "The account is not currently delegating."
                  ]
                },
                {
                  "name": "Nonsense",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Delegation to oneself makes no sense."
                  ]
                },
                {
                  "name": "MaxVotesReached",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Maximum number of votes reached."
                  ]
                },
                {
                  "name": "ClassNeeded",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The class must be supplied since it is not easily determinable from the state."
                  ]
                },
                {
                  "name": "BadClass",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The class ID supplied is invalid."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 624,
          "type": {
            "path": [
              "pallet_referenda",
              "types",
              "ReferendumInfo"
            ],
            "params": [
              {
                "name": "TrackId",
                "type": 77
              },
              {
                "name": "RuntimeOrigin",
                "type": 156
              },
              {
                "name": "Moment",
                "type": 4
              },
              {
                "name": "Call",
                "type": 78
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "Tally",
                "type": 440
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "ScheduleAddress",
                "type": 31
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Ongoing",
                  "fields": [
                    {
                      "type": 625,
                      "typeName": "ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Approved",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "type": 627,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "type": 627,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Rejected",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "type": 627,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "type": 627,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Cancelled",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "type": 627,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "type": 627,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "TimedOut",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "Moment",
                      "docs": []
                    },
                    {
                      "type": 627,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    },
                    {
                      "type": 627,
                      "typeName": "Option<Deposit<AccountId, Balance>>",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Killed",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "Moment",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 625,
          "type": {
            "path": [
              "pallet_referenda",
              "types",
              "ReferendumStatus"
            ],
            "params": [
              {
                "name": "TrackId",
                "type": 77
              },
              {
                "name": "RuntimeOrigin",
                "type": 156
              },
              {
                "name": "Moment",
                "type": 4
              },
              {
                "name": "Call",
                "type": 78
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "Tally",
                "type": 440
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "ScheduleAddress",
                "type": 31
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "track",
                  "type": 77,
                  "typeName": "TrackId",
                  "docs": []
                },
                {
                  "name": "origin",
                  "type": 156,
                  "typeName": "RuntimeOrigin",
                  "docs": []
                },
                {
                  "name": "proposal",
                  "type": 78,
                  "typeName": "Call",
                  "docs": []
                },
                {
                  "name": "enactment",
                  "type": 172,
                  "typeName": "DispatchTime<Moment>",
                  "docs": []
                },
                {
                  "name": "submitted",
                  "type": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "submission_deposit",
                  "type": 626,
                  "typeName": "Deposit<AccountId, Balance>",
                  "docs": []
                },
                {
                  "name": "decision_deposit",
                  "type": 627,
                  "typeName": "Option<Deposit<AccountId, Balance>>",
                  "docs": []
                },
                {
                  "name": "deciding",
                  "type": 628,
                  "typeName": "Option<DecidingStatus<Moment>>",
                  "docs": []
                },
                {
                  "name": "tally",
                  "type": 440,
                  "typeName": "Tally",
                  "docs": []
                },
                {
                  "name": "in_queue",
                  "type": 44,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "alarm",
                  "type": 630,
                  "typeName": "Option<(Moment, ScheduleAddress)>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 626,
          "type": {
            "path": [
              "pallet_referenda",
              "types",
              "Deposit"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 627,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 626
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 626,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 628,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 629
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 629,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 629,
          "type": {
            "path": [
              "pallet_referenda",
              "types",
              "DecidingStatus"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "since",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "confirming",
                  "type": 141,
                  "typeName": "Option<BlockNumber>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 630,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 631
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 631,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 631,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                4,
                31
              ]
            },
            "docs": []
          }
        },
        {
          "id": 632,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 633
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 634,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 633,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                4,
                6
              ]
            },
            "docs": []
          }
        },
        {
          "id": 634,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 633
            },
            "docs": []
          }
        },
        {
          "id": 635,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 636
            },
            "docs": []
          }
        },
        {
          "id": 636,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                77,
                637
              ]
            },
            "docs": []
          }
        },
        {
          "id": 637,
          "type": {
            "path": [
              "pallet_referenda",
              "types",
              "TrackInfo"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "Moment",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "name",
                  "type": 483,
                  "typeName": "&'static str",
                  "docs": []
                },
                {
                  "name": "max_deciding",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "decision_deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "prepare_period",
                  "type": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "decision_period",
                  "type": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "confirm_period",
                  "type": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "min_enactment_period",
                  "type": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": "min_approval",
                  "type": 638,
                  "typeName": "Curve",
                  "docs": []
                },
                {
                  "name": "min_support",
                  "type": 638,
                  "typeName": "Curve",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 638,
          "type": {
            "path": [
              "pallet_referenda",
              "types",
              "Curve"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "LinearDecreasing",
                  "fields": [
                    {
                      "name": "length",
                      "type": 41,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "floor",
                      "type": 41,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "ceil",
                      "type": 41,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "SteppedDecreasing",
                  "fields": [
                    {
                      "name": "begin",
                      "type": 41,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "end",
                      "type": 41,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "step",
                      "type": 41,
                      "typeName": "Perbill",
                      "docs": []
                    },
                    {
                      "name": "period",
                      "type": 41,
                      "typeName": "Perbill",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Reciprocal",
                  "fields": [
                    {
                      "name": "factor",
                      "type": 639,
                      "typeName": "FixedI64",
                      "docs": []
                    },
                    {
                      "name": "x_offset",
                      "type": 639,
                      "typeName": "FixedI64",
                      "docs": []
                    },
                    {
                      "name": "y_offset",
                      "type": 639,
                      "typeName": "FixedI64",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 639,
          "type": {
            "path": [
              "sp_arithmetic",
              "fixed_point",
              "FixedI64"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 640,
                  "typeName": "i64",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 640,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "primitive",
              "value": {
                "tag": "i64"
              }
            },
            "docs": []
          }
        },
        {
          "id": 641,
          "type": {
            "path": [
              "pallet_referenda",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NotOngoing",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Referendum is not ongoing."
                  ]
                },
                {
                  "name": "HasDeposit",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Referendum's decision deposit is already paid."
                  ]
                },
                {
                  "name": "BadTrack",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The track identifier given was invalid."
                  ]
                },
                {
                  "name": "Full",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "There are already a full complement of referenda in progress for this track."
                  ]
                },
                {
                  "name": "QueueEmpty",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The queue of the track is empty."
                  ]
                },
                {
                  "name": "BadReferendum",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The referendum index provided is invalid in this context."
                  ]
                },
                {
                  "name": "NothingToDo",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "There was nothing to do in the advancement."
                  ]
                },
                {
                  "name": "NoTrack",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "No track exists for the proposal origin."
                  ]
                },
                {
                  "name": "Unfinished",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Any deposit cannot be refunded until after the decision is over."
                  ]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The deposit refunder is not the depositor."
                  ]
                },
                {
                  "name": "NoDeposit",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The deposit cannot be refunded since none was made."
                  ]
                },
                {
                  "name": "BadStatus",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The referendum status is invalid for this operation."
                  ]
                },
                {
                  "name": "PreimageNotExist",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "The preimage does not exist."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 642,
          "type": {
            "path": [
              "pallet_whitelist",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "UnavailablePreImage",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The preimage of the call hash could not be loaded."
                  ]
                },
                {
                  "name": "UndecodableCall",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The call could not be decoded."
                  ]
                },
                {
                  "name": "InvalidCallWeightWitness",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The weight of the decoded call was higher than the witness."
                  ]
                },
                {
                  "name": "CallIsNotWhitelisted",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The call was not whitelisted."
                  ]
                },
                {
                  "name": "CallAlreadyWhitelisted",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The call was already whitelisted; No-Op."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 643,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "claims",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "InvalidEthereumSignature",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Invalid Ethereum signature."
                  ]
                },
                {
                  "name": "SignerHasNoClaim",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Ethereum address has no claim."
                  ]
                },
                {
                  "name": "SenderHasNoClaim",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Account ID sending transaction has no claim."
                  ]
                },
                {
                  "name": "PotUnderflow",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "There's not enough in the pot to pay out some unvested amount. Generally implies a logic",
                    "error."
                  ]
                },
                {
                  "name": "InvalidStatement",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "A needed statement was not included."
                  ]
                },
                {
                  "name": "VestedBalanceExists",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The account already has a vested balance."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 644,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 183
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 645,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 645,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 183
            },
            "docs": []
          }
        },
        {
          "id": 646,
          "type": {
            "path": [
              "pallet_vesting",
              "Releases"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "V0",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "V1",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 647,
          "type": {
            "path": [
              "pallet_vesting",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NotVesting",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The account given is not vesting."
                  ]
                },
                {
                  "name": "AtMaxVestingSchedules",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The account already has `MaxVestingSchedules` count of schedules and thus",
                    "cannot add another one. Consider merging existing schedules in order to add another."
                  ]
                },
                {
                  "name": "AmountLow",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Amount being transferred is too low to create a vesting schedule."
                  ]
                },
                {
                  "name": "ScheduleIndexOutOfBounds",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "An index was out of bounds of the vesting schedules."
                  ]
                },
                {
                  "name": "InvalidScheduleParams",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Failed to create a new schedule because some parameter was invalid."
                  ]
                }
              ]
            },
            "docs": [
              "Error for the vesting pallet."
            ]
          }
        },
        {
          "id": 648,
          "type": {
            "path": [
              "pallet_utility",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "TooManyCalls",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Too many calls batched."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 649,
          "type": {
            "path": [
              "pallet_identity",
              "types",
              "Registration"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "MaxJudgements"
              },
              {
                "name": "MaxAdditionalFields"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "judgements",
                  "type": 650,
                  "typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "info",
                  "type": 187,
                  "typeName": "IdentityInfo<MaxAdditionalFields>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 650,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 651
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 652,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 651,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                4,
                226
              ]
            },
            "docs": []
          }
        },
        {
          "id": 652,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 651
            },
            "docs": []
          }
        },
        {
          "id": 653,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                6,
                654
              ]
            },
            "docs": []
          }
        },
        {
          "id": 654,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 104,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 655,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 656
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 658,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 656,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 657
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 657,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 657,
          "type": {
            "path": [
              "pallet_identity",
              "types",
              "RegistrarInfo"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "fee",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "fields",
                  "type": 224,
                  "typeName": "IdentityFields",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 658,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 656
            },
            "docs": []
          }
        },
        {
          "id": 659,
          "type": {
            "path": [
              "pallet_identity",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "TooManySubAccounts",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Too many subs-accounts."
                  ]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Account isn't found."
                  ]
                },
                {
                  "name": "NotNamed",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Account isn't named."
                  ]
                },
                {
                  "name": "EmptyIndex",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Empty index."
                  ]
                },
                {
                  "name": "FeeChanged",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Fee is changed."
                  ]
                },
                {
                  "name": "NoIdentity",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "No identity found."
                  ]
                },
                {
                  "name": "StickyJudgement",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Sticky judgement."
                  ]
                },
                {
                  "name": "JudgementGiven",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Judgement given."
                  ]
                },
                {
                  "name": "InvalidJudgement",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Invalid judgement."
                  ]
                },
                {
                  "name": "InvalidIndex",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The index is invalid."
                  ]
                },
                {
                  "name": "InvalidTarget",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The target is invalid."
                  ]
                },
                {
                  "name": "TooManyFields",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "Too many additional fields."
                  ]
                },
                {
                  "name": "TooManyRegistrars",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Maximum amount of registrars reached. Cannot add any more."
                  ]
                },
                {
                  "name": "AlreadyClaimed",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "Account ID is already named."
                  ]
                },
                {
                  "name": "NotSub",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "Sender is not a sub-account."
                  ]
                },
                {
                  "name": "NotOwned",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "Sub-account isn't owned by sender."
                  ]
                },
                {
                  "name": "JudgementForDifferentIdentity",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "The provided judgement was for a different identity."
                  ]
                },
                {
                  "name": "JudgementPaymentFailed",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "Error that occurs when there is an issue paying for judgement."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 660,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                661,
                6
              ]
            },
            "docs": []
          }
        },
        {
          "id": 661,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 662
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 663,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 662,
          "type": {
            "path": [
              "pallet_proxy",
              "ProxyDefinition"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "ProxyType",
                "type": 229
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 229,
                  "typeName": "ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 663,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 662
            },
            "docs": []
          }
        },
        {
          "id": 664,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                665,
                6
              ]
            },
            "docs": []
          }
        },
        {
          "id": 665,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 666
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 667,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 666,
          "type": {
            "path": [
              "pallet_proxy",
              "Announcement"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Hash",
                "type": 12
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "real",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 12,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": "height",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 667,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 666
            },
            "docs": []
          }
        },
        {
          "id": 668,
          "type": {
            "path": [
              "pallet_proxy",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "TooMany",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "There are too many proxies registered or too many announcements pending."
                  ]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Proxy registration not found."
                  ]
                },
                {
                  "name": "NotProxy",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Sender is not a proxy of the account to be proxied."
                  ]
                },
                {
                  "name": "Unproxyable",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "A call which is incompatible with the proxy type's filter was attempted."
                  ]
                },
                {
                  "name": "Duplicate",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Account is already a proxy."
                  ]
                },
                {
                  "name": "NoPermission",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Call may not be made by proxy because it may escalate its privileges."
                  ]
                },
                {
                  "name": "Unannounced",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Announcement, if made at all, was made too recently."
                  ]
                },
                {
                  "name": "NoSelfProxy",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Cannot add self as proxy."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 669,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                0,
                1
              ]
            },
            "docs": []
          }
        },
        {
          "id": 670,
          "type": {
            "path": [
              "pallet_multisig",
              "Multisig"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "MaxApprovals"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "when",
                  "type": 232,
                  "typeName": "Timepoint<BlockNumber>",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "depositor",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "approvals",
                  "type": 671,
                  "typeName": "BoundedVec<AccountId, MaxApprovals>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 671,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 104,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 672,
          "type": {
            "path": [
              "pallet_multisig",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "MinimumThreshold",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Threshold must be 2 or greater."
                  ]
                },
                {
                  "name": "AlreadyApproved",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Call is already approved by this signatory."
                  ]
                },
                {
                  "name": "NoApprovalsNeeded",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Call doesn't need any (more) approvals."
                  ]
                },
                {
                  "name": "TooFewSignatories",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "There are too few signatories in the list."
                  ]
                },
                {
                  "name": "TooManySignatories",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "There are too many signatories in the list."
                  ]
                },
                {
                  "name": "SignatoriesOutOfOrder",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The signatories were provided out of order; they should be ordered."
                  ]
                },
                {
                  "name": "SenderInSignatories",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The sender was contained in the other signatories; it shouldn't be."
                  ]
                },
                {
                  "name": "NotFound",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Multisig operation not found when attempting to cancel."
                  ]
                },
                {
                  "name": "NotOwner",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Only the account that originally created the multisig is able to cancel it."
                  ]
                },
                {
                  "name": "NoTimepoint",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "No timepoint was given, yet the multisig operation is already underway."
                  ]
                },
                {
                  "name": "WrongTimepoint",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "A different timepoint was given to the multisig operation that is underway."
                  ]
                },
                {
                  "name": "UnexpectedTimepoint",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "A timepoint was given, yet no multisig operation is underway."
                  ]
                },
                {
                  "name": "MaxWeightTooLow",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "The maximum weight information provided was too low."
                  ]
                },
                {
                  "name": "AlreadyStored",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "The data to be stored is already stored."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 673,
          "type": {
            "path": [
              "pallet_bounties",
              "Bounty"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "proposer",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "fee",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "curator_deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "bond",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "status",
                  "type": 674,
                  "typeName": "BountyStatus<AccountId, BlockNumber>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 674,
          "type": {
            "path": [
              "pallet_bounties",
              "BountyStatus"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Proposed",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Approved",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Funded",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "CuratorProposed",
                  "fields": [
                    {
                      "name": "curator",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Active",
                  "fields": [
                    {
                      "name": "curator",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "update_due",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "PendingPayout",
                  "fields": [
                    {
                      "name": "curator",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "unlock_at",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 675,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 13,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 676,
          "type": {
            "path": [
              "pallet_bounties",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "InsufficientProposersBalance",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Proposer's balance is too low."
                  ]
                },
                {
                  "name": "InvalidIndex",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "No proposal or bounty at that index."
                  ]
                },
                {
                  "name": "ReasonTooBig",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The reason given is just too big."
                  ]
                },
                {
                  "name": "UnexpectedStatus",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The bounty status is unexpected."
                  ]
                },
                {
                  "name": "RequireCurator",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Require bounty curator."
                  ]
                },
                {
                  "name": "InvalidValue",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Invalid bounty value."
                  ]
                },
                {
                  "name": "InvalidFee",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Invalid bounty fee."
                  ]
                },
                {
                  "name": "PendingPayout",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "A bounty payout is pending.",
                    "To cancel the bounty, you must unassign and slash the curator."
                  ]
                },
                {
                  "name": "Premature",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The bounties cannot be claimed/closed because it's still in the countdown period."
                  ]
                },
                {
                  "name": "HasActiveChildBounty",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The bounty cannot be closed because it has active child bounties."
                  ]
                },
                {
                  "name": "TooManyQueued",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "Too many approvals are already queued."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 677,
          "type": {
            "path": [
              "pallet_child_bounties",
              "ChildBounty"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "parent_bounty",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "fee",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "curator_deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "status",
                  "type": 678,
                  "typeName": "ChildBountyStatus<AccountId, BlockNumber>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 678,
          "type": {
            "path": [
              "pallet_child_bounties",
              "ChildBountyStatus"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Added",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "CuratorProposed",
                  "fields": [
                    {
                      "name": "curator",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Active",
                  "fields": [
                    {
                      "name": "curator",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "PendingPayout",
                  "fields": [
                    {
                      "name": "curator",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "unlock_at",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 679,
          "type": {
            "path": [
              "pallet_child_bounties",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "ParentBountyNotActive",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The parent bounty is not in active state."
                  ]
                },
                {
                  "name": "InsufficientBountyBalance",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The bounty balance is not enough to add new child-bounty."
                  ]
                },
                {
                  "name": "TooManyChildBounties",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Number of child bounties exceeds limit `MaxActiveChildBountyCount`."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 680,
          "type": {
            "path": [
              "pallet_tips",
              "OpenTip"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "Hash",
                "type": 12
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "reason",
                  "type": 12,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "finder",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "closes",
                  "type": 141,
                  "typeName": "Option<BlockNumber>",
                  "docs": []
                },
                {
                  "name": "tips",
                  "type": 71,
                  "typeName": "Vec<(AccountId, Balance)>",
                  "docs": []
                },
                {
                  "name": "finders_fee",
                  "type": 44,
                  "typeName": "bool",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 681,
          "type": {
            "path": [
              "pallet_tips",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "ReasonTooBig",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The reason given is just too big."
                  ]
                },
                {
                  "name": "AlreadyKnown",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The tip was already found/started."
                  ]
                },
                {
                  "name": "UnknownTip",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The tip hash is unknown."
                  ]
                },
                {
                  "name": "NotFinder",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The account attempting to retract the tip is not the finder of the tip."
                  ]
                },
                {
                  "name": "StillOpen",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The tip cannot be claimed/closed because there are not enough tippers yet."
                  ]
                },
                {
                  "name": "Premature",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The tip cannot be claimed/closed because it's still in the countdown period."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 682,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "ReadySolution"
            ],
            "params": [
              {
                "name": "AccountId"
              },
              {
                "name": "MaxWinners"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "supports",
                  "type": 683,
                  "typeName": "BoundedSupports<AccountId, MaxWinners>",
                  "docs": []
                },
                {
                  "name": "score",
                  "type": 289,
                  "typeName": "ElectionScore",
                  "docs": []
                },
                {
                  "name": "compute",
                  "type": 456,
                  "typeName": "ElectionCompute",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 683,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 293
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 292,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 684,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "RoundSnapshot"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "DataProvider",
                "type": 685
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "voters",
                  "type": 686,
                  "typeName": "Vec<DataProvider>",
                  "docs": []
                },
                {
                  "name": "targets",
                  "type": 104,
                  "typeName": "Vec<AccountId>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 685,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                0,
                11,
                542
              ]
            },
            "docs": []
          }
        },
        {
          "id": 686,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 685
            },
            "docs": []
          }
        },
        {
          "id": 687,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 688
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 689,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 688,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                289,
                4,
                4
              ]
            },
            "docs": []
          }
        },
        {
          "id": 689,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 688
            },
            "docs": []
          }
        },
        {
          "id": 690,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "signed",
              "SignedSubmission"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "Solution",
                "type": 238
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "raw_solution",
                  "type": 237,
                  "typeName": "RawSolution<Solution>",
                  "docs": []
                },
                {
                  "name": "call_fee",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 691,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "PreDispatchEarlySubmission",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Submission was too early."
                  ]
                },
                {
                  "name": "PreDispatchWrongWinnerCount",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Wrong number of winners presented."
                  ]
                },
                {
                  "name": "PreDispatchWeakSubmission",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Submission was too weak, score-wise."
                  ]
                },
                {
                  "name": "SignedQueueFull",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The queue was full, and the solution was not better than any of the existing ones."
                  ]
                },
                {
                  "name": "SignedCannotPayDeposit",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The origin failed to pay the deposit."
                  ]
                },
                {
                  "name": "SignedInvalidWitness",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Witness data to dispatchable is invalid."
                  ]
                },
                {
                  "name": "SignedTooMuchWeight",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The signed submission consumes too much weight"
                  ]
                },
                {
                  "name": "OcwCallWrongEra",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "OCW submitted solution for wrong round"
                  ]
                },
                {
                  "name": "MissingSnapshotMetadata",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Snapshot metadata should exist but didn't."
                  ]
                },
                {
                  "name": "InvalidSubmissionIndex",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "`Self::insert_submission` returned an invalid index."
                  ]
                },
                {
                  "name": "CallNotAllowed",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The call is not allowed at this point."
                  ]
                },
                {
                  "name": "FallbackFailed",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The fallback failed"
                  ]
                },
                {
                  "name": "BoundNotMet",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Some bound not met"
                  ]
                },
                {
                  "name": "TooManyWinners",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "Submitted solution has too many winners"
                  ]
                }
              ]
            },
            "docs": [
              "Error of the pallet that can be returned in response to dispatches."
            ]
          }
        },
        {
          "id": 692,
          "type": {
            "path": [
              "pallet_bags_list",
              "list",
              "Node"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "id",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "prev",
                  "type": 144,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "next",
                  "type": 144,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "bag_upper",
                  "type": 11,
                  "typeName": "T::Score",
                  "docs": []
                },
                {
                  "name": "score",
                  "type": 11,
                  "typeName": "T::Score",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 693,
          "type": {
            "path": [
              "pallet_bags_list",
              "list",
              "Bag"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "head",
                  "type": 144,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "tail",
                  "type": 144,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 694,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 11
            },
            "docs": []
          }
        },
        {
          "id": 695,
          "type": {
            "path": [
              "pallet_bags_list",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              },
              {
                "name": "I"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "List",
                  "fields": [
                    {
                      "type": 696,
                      "typeName": "ListError",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": [
                    "A error in the list interface implementation."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 696,
          "type": {
            "path": [
              "pallet_bags_list",
              "list",
              "ListError"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Duplicate",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "NotHeavier",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "NotInSameBag",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "NodeNotFound",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 697,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "PoolMember"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "points",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "last_recorded_reward_counter",
                  "type": 534,
                  "typeName": "T::RewardCounter",
                  "docs": []
                },
                {
                  "name": "unbonding_eras",
                  "type": 698,
                  "typeName": "BoundedBTreeMap<EraIndex, BalanceOf<T>, T::MaxUnbonding>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 698,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_btree_map",
              "BoundedBTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 4
              },
              {
                "name": "V",
                "type": 6
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 699,
                  "typeName": "BTreeMap<K, V>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 699,
          "type": {
            "path": [
              "BTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 4
              },
              {
                "name": "V",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 634,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 700,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "BondedPoolInner"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "commission",
                  "type": 701,
                  "typeName": "Commission<T>",
                  "docs": []
                },
                {
                  "name": "member_counter",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "points",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "roles",
                  "type": 704,
                  "typeName": "PoolRoles<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "state",
                  "type": 298,
                  "typeName": "PoolState",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 701,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "Commission"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "current",
                  "type": 304,
                  "typeName": "Option<(Perbill, T::AccountId)>",
                  "docs": []
                },
                {
                  "name": "max",
                  "type": 702,
                  "typeName": "Option<Perbill>",
                  "docs": []
                },
                {
                  "name": "change_rate",
                  "type": 703,
                  "typeName": "Option<CommissionChangeRate<T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "throttle_from",
                  "type": 141,
                  "typeName": "Option<T::BlockNumber>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 702,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 41
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 41,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 703,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 306
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 306,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 704,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "PoolRoles"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "depositor",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "root",
                  "type": 144,
                  "typeName": "Option<AccountId>",
                  "docs": []
                },
                {
                  "name": "nominator",
                  "type": 144,
                  "typeName": "Option<AccountId>",
                  "docs": []
                },
                {
                  "name": "bouncer",
                  "type": 144,
                  "typeName": "Option<AccountId>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 705,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "RewardPool"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "last_recorded_reward_counter",
                  "type": 534,
                  "typeName": "T::RewardCounter",
                  "docs": []
                },
                {
                  "name": "last_recorded_total_payouts",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "total_rewards_claimed",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "total_commission_pending",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "total_commission_claimed",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 706,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "SubPools"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "no_era",
                  "type": 707,
                  "typeName": "UnbondPool<T>",
                  "docs": []
                },
                {
                  "name": "with_era",
                  "type": 708,
                  "typeName": "BoundedBTreeMap<EraIndex, UnbondPool<T>, TotalUnbondingPools<T>>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 707,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "UnbondPool"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "points",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "balance",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 708,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_btree_map",
              "BoundedBTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 4
              },
              {
                "name": "V",
                "type": 707
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 709,
                  "typeName": "BTreeMap<K, V>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 709,
          "type": {
            "path": [
              "BTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 4
              },
              {
                "name": "V",
                "type": 707
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 710,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 710,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 711
            },
            "docs": []
          }
        },
        {
          "id": 711,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                4,
                707
              ]
            },
            "docs": []
          }
        },
        {
          "id": 712,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 13,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 713,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "PoolNotFound",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "A (bonded) pool id does not exist."
                  ]
                },
                {
                  "name": "PoolMemberNotFound",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "An account is not a member."
                  ]
                },
                {
                  "name": "RewardPoolNotFound",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "A reward pool does not exist. In all cases this is a system logic error."
                  ]
                },
                {
                  "name": "SubPoolsNotFound",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "A sub pool does not exist."
                  ]
                },
                {
                  "name": "AccountBelongsToOtherPool",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "An account is already delegating in another pool. An account may only belong to one",
                    "pool at a time."
                  ]
                },
                {
                  "name": "FullyUnbonding",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The member is fully unbonded (and thus cannot access the bonded and reward pool",
                    "anymore to, for example, collect rewards)."
                  ]
                },
                {
                  "name": "MaxUnbondingLimit",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The member cannot unbond further chunks due to reaching the limit."
                  ]
                },
                {
                  "name": "CannotWithdrawAny",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "None of the funds can be withdrawn yet because the bonding duration has not passed."
                  ]
                },
                {
                  "name": "MinimumBondNotMet",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The amount does not meet the minimum bond to either join or create a pool.",
                    "",
                    "The depositor can never unbond to a value less than",
                    "`Pallet::depositor_min_bond`. The caller does not have nominating",
                    "permissions for the pool. Members can never unbond to a value below `MinJoinBond`."
                  ]
                },
                {
                  "name": "OverflowRisk",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The transaction could not be executed due to overflow risk for the pool."
                  ]
                },
                {
                  "name": "NotDestroying",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for",
                    "other members to be permissionlessly unbonded."
                  ]
                },
                {
                  "name": "NotNominator",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The caller does not have nominating permissions for the pool."
                  ]
                },
                {
                  "name": "NotKickerOrDestroying",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Either a) the caller cannot make a valid kick or b) the pool is not destroying."
                  ]
                },
                {
                  "name": "NotOpen",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "The pool is not open to join"
                  ]
                },
                {
                  "name": "MaxPools",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "The system is maxed out on pools."
                  ]
                },
                {
                  "name": "MaxPoolMembers",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "Too many members in the pool or system."
                  ]
                },
                {
                  "name": "CanNotChangeState",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "The pools state cannot be changed."
                  ]
                },
                {
                  "name": "DoesNotHavePermission",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "The caller does not have adequate permissions."
                  ]
                },
                {
                  "name": "MetadataExceedsMaxLen",
                  "fields": [],
                  "index": 18,
                  "docs": [
                    "Metadata exceeds [`Config::MaxMetadataLen`]"
                  ]
                },
                {
                  "name": "Defensive",
                  "fields": [
                    {
                      "type": 714,
                      "typeName": "DefensiveError",
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": [
                    "Some error occurred that should never happen. This should be reported to the",
                    "maintainers."
                  ]
                },
                {
                  "name": "PartialUnbondNotAllowedPermissionlessly",
                  "fields": [],
                  "index": 20,
                  "docs": [
                    "Partial unbonding now allowed permissionlessly."
                  ]
                },
                {
                  "name": "MaxCommissionRestricted",
                  "fields": [],
                  "index": 21,
                  "docs": [
                    "The pool's max commission cannot be set higher than the existing value."
                  ]
                },
                {
                  "name": "CommissionExceedsMaximum",
                  "fields": [],
                  "index": 22,
                  "docs": [
                    "The supplied commission exceeds the max allowed commission."
                  ]
                },
                {
                  "name": "CommissionChangeThrottled",
                  "fields": [],
                  "index": 23,
                  "docs": [
                    "Not enough blocks have surpassed since the last commission update."
                  ]
                },
                {
                  "name": "CommissionChangeRateNotAllowed",
                  "fields": [],
                  "index": 24,
                  "docs": [
                    "The submitted changes to commission change rate are not allowed."
                  ]
                },
                {
                  "name": "NoPendingCommission",
                  "fields": [],
                  "index": 25,
                  "docs": [
                    "There is no pending commission to claim."
                  ]
                },
                {
                  "name": "NoCommissionCurrentSet",
                  "fields": [],
                  "index": 26,
                  "docs": [
                    "No commission current has been set."
                  ]
                },
                {
                  "name": "PoolIdInUse",
                  "fields": [],
                  "index": 27,
                  "docs": [
                    "Pool id currently in use."
                  ]
                },
                {
                  "name": "InvalidPoolId",
                  "fields": [],
                  "index": 28,
                  "docs": [
                    "Pool id provided is not correct/usable."
                  ]
                },
                {
                  "name": "BondExtraRestricted",
                  "fields": [],
                  "index": 29,
                  "docs": [
                    "Bonding extra is restricted to the exact pending reward amount."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 714,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "pallet",
              "DefensiveError"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NotEnoughSpaceInUnbondPool",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "PoolNotFound",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "RewardPoolNotFound",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "SubPoolsNotFound",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "BondedStashKilledPrematurely",
                  "fields": [],
                  "index": 4,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 715,
          "type": {
            "path": [
              "pallet_fast_unstake",
              "types",
              "UnstakeRequest"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "stashes",
                  "type": 716,
                  "typeName": "BoundedVec<(T::AccountId, BalanceOf<T>), T::BatchSize>",
                  "docs": []
                },
                {
                  "name": "checked",
                  "type": 717,
                  "typeName": "BoundedVec<EraIndex, MaxChecking<T>>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 716,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 72
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 71,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 717,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 109,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 718,
          "type": {
            "path": [
              "pallet_fast_unstake",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NotController",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The provided Controller account was not found.",
                    "",
                    "This means that the given account is not bonded."
                  ]
                },
                {
                  "name": "AlreadyQueued",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The bonded account has already been queued."
                  ]
                },
                {
                  "name": "NotFullyBonded",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The bonded account has active unlocking chunks."
                  ]
                },
                {
                  "name": "NotQueued",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The provided un-staker is not in the `Queue`."
                  ]
                },
                {
                  "name": "AlreadyHead",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The provided un-staker is already in Head, and cannot deregister."
                  ]
                },
                {
                  "name": "CallNotAllowed",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The call is not allowed at this point because the pallet is not active."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 719,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "configuration",
              "HostConfiguration"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "max_code_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_head_data_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_upward_queue_count",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_upward_queue_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_upward_message_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_upward_message_num_per_candidate",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "hrmp_max_message_num_per_candidate",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "validation_upgrade_cooldown",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "validation_upgrade_delay",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "async_backing_params",
                  "type": 309,
                  "typeName": "AsyncBackingParams",
                  "docs": []
                },
                {
                  "name": "max_pov_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_downward_message_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "hrmp_max_parachain_outbound_channels",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "hrmp_max_parathread_outbound_channels",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "hrmp_sender_deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "hrmp_recipient_deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "hrmp_channel_max_capacity",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "hrmp_channel_max_total_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "hrmp_max_parachain_inbound_channels",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "hrmp_max_parathread_inbound_channels",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "hrmp_channel_max_message_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "executor_params",
                  "type": 310,
                  "typeName": "ExecutorParams",
                  "docs": []
                },
                {
                  "name": "code_retention_period",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "parathread_cores",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "parathread_retries",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "group_rotation_frequency",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "chain_availability_period",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "thread_availability_period",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "scheduling_lookahead",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_validators_per_core",
                  "type": 141,
                  "typeName": "Option<u32>",
                  "docs": []
                },
                {
                  "name": "max_validators",
                  "type": 141,
                  "typeName": "Option<u32>",
                  "docs": []
                },
                {
                  "name": "dispute_period",
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "dispute_post_conclusion_acceptance_period",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "no_show_slots",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "n_delay_tranches",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "zeroth_delay_tranche_width",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "needed_approvals",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "relay_vrf_modulo_samples",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "pvf_checking_enabled",
                  "type": 44,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "pvf_voting_ttl",
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "minimum_validation_upgrade_delay",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 720,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 721
            },
            "docs": []
          }
        },
        {
          "id": 721,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                4,
                719
              ]
            },
            "docs": []
          }
        },
        {
          "id": 722,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "configuration",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "InvalidNewValue",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The new value for a configuration parameter is invalid."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 723,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 324
            },
            "docs": []
          }
        },
        {
          "id": 724,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 116
            },
            "docs": []
          }
        },
        {
          "id": 725,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "inclusion",
              "AvailabilityBitfieldRecord"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "bitfield",
                  "type": 321,
                  "typeName": "AvailabilityBitfield",
                  "docs": []
                },
                {
                  "name": "submitted_at",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 726,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "inclusion",
              "CandidatePendingAvailability"
            ],
            "params": [
              {
                "name": "H",
                "type": 12
              },
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "core",
                  "type": 464,
                  "typeName": "CoreIndex",
                  "docs": []
                },
                {
                  "name": "hash",
                  "type": 345,
                  "typeName": "CandidateHash",
                  "docs": []
                },
                {
                  "name": "descriptor",
                  "type": 329,
                  "typeName": "CandidateDescriptor<H>",
                  "docs": []
                },
                {
                  "name": "availability_votes",
                  "type": 322,
                  "typeName": "BitVec<u8, BitOrderLsb0>",
                  "docs": []
                },
                {
                  "name": "backers",
                  "type": 322,
                  "typeName": "BitVec<u8, BitOrderLsb0>",
                  "docs": []
                },
                {
                  "name": "relay_parent_number",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "backed_in_number",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "backing_group",
                  "type": 465,
                  "typeName": "GroupIndex",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 727,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "inclusion",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "UnsortedOrDuplicateValidatorIndices",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Validator indices are out of order or contains duplicates."
                  ]
                },
                {
                  "name": "UnsortedOrDuplicateDisputeStatementSet",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Dispute statement sets are out of order or contain duplicates."
                  ]
                },
                {
                  "name": "UnsortedOrDuplicateBackedCandidates",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Backed candidates are out of order (core index) or contain duplicates."
                  ]
                },
                {
                  "name": "UnexpectedRelayParent",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "A different relay parent was provided compared to the on-chain stored one."
                  ]
                },
                {
                  "name": "WrongBitfieldSize",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Availability bitfield has unexpected size."
                  ]
                },
                {
                  "name": "BitfieldAllZeros",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Bitfield consists of zeros only."
                  ]
                },
                {
                  "name": "BitfieldDuplicateOrUnordered",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Multiple bitfields submitted by same validator or validators out of order by index."
                  ]
                },
                {
                  "name": "ValidatorIndexOutOfBounds",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Validator index out of bounds."
                  ]
                },
                {
                  "name": "InvalidBitfieldSignature",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Invalid signature"
                  ]
                },
                {
                  "name": "UnscheduledCandidate",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Candidate submitted but para not scheduled."
                  ]
                },
                {
                  "name": "CandidateScheduledBeforeParaFree",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "Candidate scheduled despite pending candidate already existing for the para."
                  ]
                },
                {
                  "name": "WrongCollator",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "Candidate included with the wrong collator."
                  ]
                },
                {
                  "name": "ScheduledOutOfOrder",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Scheduled cores out of order."
                  ]
                },
                {
                  "name": "HeadDataTooLarge",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "Head data exceeds the configured maximum."
                  ]
                },
                {
                  "name": "PrematureCodeUpgrade",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "Code upgrade prematurely."
                  ]
                },
                {
                  "name": "NewCodeTooLarge",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "Output code is too large"
                  ]
                },
                {
                  "name": "CandidateNotInParentContext",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "Candidate not in parent context."
                  ]
                },
                {
                  "name": "InvalidGroupIndex",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "Invalid group index in core assignment."
                  ]
                },
                {
                  "name": "InsufficientBacking",
                  "fields": [],
                  "index": 18,
                  "docs": [
                    "Insufficient (non-majority) backing."
                  ]
                },
                {
                  "name": "InvalidBacking",
                  "fields": [],
                  "index": 19,
                  "docs": [
                    "Invalid (bad signature, unknown validator, etc.) backing."
                  ]
                },
                {
                  "name": "NotCollatorSigned",
                  "fields": [],
                  "index": 20,
                  "docs": [
                    "Collator did not sign PoV."
                  ]
                },
                {
                  "name": "ValidationDataHashMismatch",
                  "fields": [],
                  "index": 21,
                  "docs": [
                    "The validation data hash does not match expected."
                  ]
                },
                {
                  "name": "IncorrectDownwardMessageHandling",
                  "fields": [],
                  "index": 22,
                  "docs": [
                    "The downward message queue is not processed correctly."
                  ]
                },
                {
                  "name": "InvalidUpwardMessages",
                  "fields": [],
                  "index": 23,
                  "docs": [
                    "At least one upward message sent does not pass the acceptance criteria."
                  ]
                },
                {
                  "name": "HrmpWatermarkMishandling",
                  "fields": [],
                  "index": 24,
                  "docs": [
                    "The candidate didn't follow the rules of HRMP watermark advancement."
                  ]
                },
                {
                  "name": "InvalidOutboundHrmp",
                  "fields": [],
                  "index": 25,
                  "docs": [
                    "The HRMP messages sent by the candidate is not valid."
                  ]
                },
                {
                  "name": "InvalidValidationCodeHash",
                  "fields": [],
                  "index": 26,
                  "docs": [
                    "The validation code hash of the candidate is not valid."
                  ]
                },
                {
                  "name": "ParaHeadMismatch",
                  "fields": [],
                  "index": 27,
                  "docs": [
                    "The `para_head` hash in the candidate descriptor doesn't match the hash of the actual para head in the",
                    "commitments."
                  ]
                },
                {
                  "name": "BitfieldReferencesFreedCore",
                  "fields": [],
                  "index": 28,
                  "docs": [
                    "A bitfield that references a freed core,",
                    "either intentionally or as part of a concluded",
                    "invalid dispute."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 728,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "ScrapedOnChainVotes"
            ],
            "params": [
              {
                "name": "H",
                "type": 12
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "session",
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "backing_validators_per_candidate",
                  "type": 729,
                  "typeName": "Vec<(CandidateReceipt<H>, Vec<(ValidatorIndex, ValidityAttestation)>)\n>",
                  "docs": []
                },
                {
                  "name": "disputes",
                  "type": 343,
                  "typeName": "MultiDisputeStatementSet",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 729,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 730
            },
            "docs": []
          }
        },
        {
          "id": 730,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                463,
                731
              ]
            },
            "docs": []
          }
        },
        {
          "id": 731,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 732
            },
            "docs": []
          }
        },
        {
          "id": 732,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                324,
                342
              ]
            },
            "docs": []
          }
        },
        {
          "id": 733,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras_inherent",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "TooManyInclusionInherents",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Inclusion inherent called more than once per block."
                  ]
                },
                {
                  "name": "InvalidParentHeader",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The hash of the submitted parent header doesn't correspond to the saved block hash of",
                    "the parent."
                  ]
                },
                {
                  "name": "CandidateConcludedInvalid",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Disputed candidate that was concluded invalid."
                  ]
                },
                {
                  "name": "InherentOverweight",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The data given to the inherent will result in an overweight block."
                  ]
                },
                {
                  "name": "DisputeStatementsUnsortedOrDuplicates",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The ordering of dispute statements was invalid."
                  ]
                },
                {
                  "name": "DisputeInvalid",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "A dispute statement was invalid."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 734,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 723
            },
            "docs": []
          }
        },
        {
          "id": 735,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "scheduler",
              "ParathreadClaimQueue"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "queue",
                  "type": 736,
                  "typeName": "Vec<QueuedParathread>",
                  "docs": []
                },
                {
                  "name": "next_core_offset",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 736,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 737
            },
            "docs": []
          }
        },
        {
          "id": 737,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "scheduler",
              "QueuedParathread"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "claim",
                  "type": 738,
                  "typeName": "ParathreadEntry",
                  "docs": []
                },
                {
                  "name": "core_offset",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 738,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "ParathreadEntry"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "claim",
                  "type": 739,
                  "typeName": "ParathreadClaim",
                  "docs": []
                },
                {
                  "name": "retries",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 739,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "ParathreadClaim"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 162,
                  "typeName": "Id",
                  "docs": []
                },
                {
                  "type": 330,
                  "typeName": "CollatorId",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 740,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 741
            },
            "docs": []
          }
        },
        {
          "id": 741,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 742
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 742,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 742,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "CoreOccupied"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Parathread",
                  "fields": [
                    {
                      "type": 738,
                      "typeName": "ParathreadEntry",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Parachain",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 743,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 162
            },
            "docs": []
          }
        },
        {
          "id": 744,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 745
            },
            "docs": []
          }
        },
        {
          "id": 745,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "scheduler",
              "CoreAssignment"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "core",
                  "type": 464,
                  "typeName": "CoreIndex",
                  "docs": []
                },
                {
                  "name": "para_id",
                  "type": 162,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "kind",
                  "type": 746,
                  "typeName": "AssignmentKind",
                  "docs": []
                },
                {
                  "name": "group_idx",
                  "type": 465,
                  "typeName": "GroupIndex",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 746,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "scheduler",
              "AssignmentKind"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Parachain",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Parathread",
                  "fields": [
                    {
                      "type": 330,
                      "typeName": "CollatorId",
                      "docs": []
                    },
                    {
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 747,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "PvfCheckActiveVoteState"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "votes_accept",
                  "type": 322,
                  "typeName": "BitVec<u8, BitOrderLsb0>",
                  "docs": []
                },
                {
                  "name": "votes_reject",
                  "type": 322,
                  "typeName": "BitVec<u8, BitOrderLsb0>",
                  "docs": []
                },
                {
                  "name": "age",
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "created_at",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "causes",
                  "type": 748,
                  "typeName": "Vec<PvfCheckCause<BlockNumber>>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 748,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 749
            },
            "docs": []
          }
        },
        {
          "id": 749,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "PvfCheckCause"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Onboarding",
                  "fields": [
                    {
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Upgrade",
                  "fields": [
                    {
                      "name": "id",
                      "type": 162,
                      "typeName": "ParaId",
                      "docs": []
                    },
                    {
                      "name": "relay_parent_number",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 750,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 332
            },
            "docs": []
          }
        },
        {
          "id": 751,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "ParaLifecycle"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Onboarding",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Parathread",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Parachain",
                  "fields": [],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "UpgradingParathread",
                  "fields": [],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "DowngradingParachain",
                  "fields": [],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "OffboardingParathread",
                  "fields": [],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "OffboardingParachain",
                  "fields": [],
                  "index": 6,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 752,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                162,
                4
              ]
            },
            "docs": []
          }
        },
        {
          "id": 753,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "ParaPastCodeMeta"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "upgrade_times",
                  "type": 754,
                  "typeName": "Vec<ReplacementTimes<N>>",
                  "docs": []
                },
                {
                  "name": "last_pruned",
                  "type": 141,
                  "typeName": "Option<N>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 754,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 755
            },
            "docs": []
          }
        },
        {
          "id": 755,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "ReplacementTimes"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "expected_at",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "activated_at",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 756,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 752
            },
            "docs": []
          }
        },
        {
          "id": 757,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "UpgradeGoAhead"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Abort",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "GoAhead",
                  "fields": [],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 758,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "UpgradeRestriction"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Present",
                  "fields": [],
                  "index": 0,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 759,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "ParaGenesisArgs"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "genesis_head",
                  "type": 340,
                  "typeName": "HeadData",
                  "docs": []
                },
                {
                  "name": "validation_code",
                  "type": 339,
                  "typeName": "ValidationCode",
                  "docs": []
                },
                {
                  "name": "para_kind",
                  "type": 44,
                  "typeName": "ParaKind",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 760,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NotRegistered",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Para is not registered in our system."
                  ]
                },
                {
                  "name": "CannotOnboard",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Para cannot be onboarded because it is already tracked by our system."
                  ]
                },
                {
                  "name": "CannotOffboard",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Para cannot be offboarded at this time."
                  ]
                },
                {
                  "name": "CannotUpgrade",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Para cannot be upgraded to a parachain."
                  ]
                },
                {
                  "name": "CannotDowngrade",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Para cannot be downgraded to a parathread."
                  ]
                },
                {
                  "name": "PvfCheckStatementStale",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The statement for PVF pre-checking is stale."
                  ]
                },
                {
                  "name": "PvfCheckStatementFuture",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The statement for PVF pre-checking is for a future session."
                  ]
                },
                {
                  "name": "PvfCheckValidatorIndexOutOfBounds",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Claimed validator index is out of bounds."
                  ]
                },
                {
                  "name": "PvfCheckInvalidSignature",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The signature for the PVF pre-checking is invalid."
                  ]
                },
                {
                  "name": "PvfCheckDoubleVote",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The given validator already has cast a vote."
                  ]
                },
                {
                  "name": "PvfCheckSubjectInvalid",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The given PVF does not exist at the moment of process a vote."
                  ]
                },
                {
                  "name": "CannotUpgradeCode",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "Parachain cannot currently schedule a code upgrade."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 761,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 762
            },
            "docs": []
          }
        },
        {
          "id": 762,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "initializer",
              "BufferedSessionChange"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "validators",
                  "type": 724,
                  "typeName": "Vec<ValidatorId>",
                  "docs": []
                },
                {
                  "name": "queued",
                  "type": 724,
                  "typeName": "Vec<ValidatorId>",
                  "docs": []
                },
                {
                  "name": "session_index",
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 763,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 764
            },
            "docs": []
          }
        },
        {
          "id": 764,
          "type": {
            "path": [
              "polkadot_core_primitives",
              "InboundDownwardMessage"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "sent_at",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "msg",
                  "type": 13,
                  "typeName": "DownwardMessage",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 765,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "hrmp",
              "HrmpOpenChannelRequest"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "confirmed",
                  "type": 44,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "_age",
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "sender_deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_total_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 766,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 355
            },
            "docs": []
          }
        },
        {
          "id": 767,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "hrmp",
              "HrmpChannel"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "max_capacity",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_total_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "msg_count",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "total_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "mqc_head",
                  "type": 142,
                  "typeName": "Option<Hash>",
                  "docs": []
                },
                {
                  "name": "sender_deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "recipient_deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 768,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 769
            },
            "docs": []
          }
        },
        {
          "id": 769,
          "type": {
            "path": [
              "polkadot_core_primitives",
              "InboundHrmpMessage"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "sent_at",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 13,
                  "typeName": "sp_std::vec::Vec<u8>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 770,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 771
            },
            "docs": []
          }
        },
        {
          "id": 771,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                4,
                743
              ]
            },
            "docs": []
          }
        },
        {
          "id": 772,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "hrmp",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "OpenHrmpChannelToSelf",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The sender tried to open a channel to themselves."
                  ]
                },
                {
                  "name": "OpenHrmpChannelInvalidRecipient",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The recipient is not a valid para."
                  ]
                },
                {
                  "name": "OpenHrmpChannelZeroCapacity",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The requested capacity is zero."
                  ]
                },
                {
                  "name": "OpenHrmpChannelCapacityExceedsLimit",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The requested capacity exceeds the global limit."
                  ]
                },
                {
                  "name": "OpenHrmpChannelZeroMessageSize",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The requested maximum message size is 0."
                  ]
                },
                {
                  "name": "OpenHrmpChannelMessageSizeExceedsLimit",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The open request requested the message size that exceeds the global limit."
                  ]
                },
                {
                  "name": "OpenHrmpChannelAlreadyExists",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The channel already exists"
                  ]
                },
                {
                  "name": "OpenHrmpChannelAlreadyRequested",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "There is already a request to open the same channel."
                  ]
                },
                {
                  "name": "OpenHrmpChannelLimitExceeded",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "The sender already has the maximum number of allowed outbound channels."
                  ]
                },
                {
                  "name": "AcceptHrmpChannelDoesntExist",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The channel from the sender to the origin doesn't exist."
                  ]
                },
                {
                  "name": "AcceptHrmpChannelAlreadyConfirmed",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The channel is already confirmed."
                  ]
                },
                {
                  "name": "AcceptHrmpChannelLimitExceeded",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The recipient already has the maximum number of allowed inbound channels."
                  ]
                },
                {
                  "name": "CloseHrmpChannelUnauthorized",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "The origin tries to close a channel where it is neither the sender nor the recipient."
                  ]
                },
                {
                  "name": "CloseHrmpChannelDoesntExist",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "The channel to be closed doesn't exist."
                  ]
                },
                {
                  "name": "CloseHrmpChannelAlreadyUnderway",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "The channel close request is already requested."
                  ]
                },
                {
                  "name": "CancelHrmpOpenChannelUnauthorized",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "Canceling is requested by neither the sender nor recipient of the open channel request."
                  ]
                },
                {
                  "name": "OpenHrmpChannelDoesntExist",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "The open request doesn't exist."
                  ]
                },
                {
                  "name": "OpenHrmpChannelAlreadyConfirmed",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "Cannot cancel an HRMP open channel request because it is already confirmed."
                  ]
                },
                {
                  "name": "WrongWitness",
                  "fields": [],
                  "index": 18,
                  "docs": [
                    "The provided witness data is wrong."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 773,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 117
            },
            "docs": []
          }
        },
        {
          "id": 774,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "SessionInfo"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "active_validator_indices",
                  "type": 723,
                  "typeName": "Vec<ValidatorIndex>",
                  "docs": []
                },
                {
                  "name": "random_seed",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                },
                {
                  "name": "dispute_period",
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                },
                {
                  "name": "validators",
                  "type": 775,
                  "typeName": "IndexedVec<ValidatorIndex, ValidatorId>",
                  "docs": []
                },
                {
                  "name": "discovery_keys",
                  "type": 776,
                  "typeName": "Vec<AuthorityDiscoveryId>",
                  "docs": []
                },
                {
                  "name": "assignment_keys",
                  "type": 773,
                  "typeName": "Vec<AssignmentId>",
                  "docs": []
                },
                {
                  "name": "validator_groups",
                  "type": 777,
                  "typeName": "IndexedVec<GroupIndex, Vec<ValidatorIndex>>",
                  "docs": []
                },
                {
                  "name": "n_cores",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "zeroth_delay_tranche_width",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "relay_vrf_modulo_samples",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "n_delay_tranches",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "no_show_slots",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "needed_approvals",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 775,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "IndexedVec"
            ],
            "params": [
              {
                "name": "K",
                "type": 324
              },
              {
                "name": "V",
                "type": 116
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 724,
                  "typeName": "Vec<V>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 776,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 118
            },
            "docs": []
          }
        },
        {
          "id": 777,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "IndexedVec"
            ],
            "params": [
              {
                "name": "K",
                "type": 465
              },
              {
                "name": "V",
                "type": 723
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 734,
                  "typeName": "Vec<V>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 778,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                4,
                345
              ]
            },
            "docs": []
          }
        },
        {
          "id": 779,
          "type": {
            "path": [
              "polkadot_primitives",
              "v4",
              "DisputeState"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "validators_for",
                  "type": 322,
                  "typeName": "BitVec<u8, bitvec::order::Lsb0>",
                  "docs": []
                },
                {
                  "name": "validators_against",
                  "type": 322,
                  "typeName": "BitVec<u8, bitvec::order::Lsb0>",
                  "docs": []
                },
                {
                  "name": "start",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "concluded_at",
                  "type": 141,
                  "typeName": "Option<N>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 780,
          "type": {
            "path": [
              "BTreeSet"
            ],
            "params": [
              {
                "name": "T",
                "type": 324
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 723,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 781,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "disputes",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "DuplicateDisputeStatementSets",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Duplicate dispute statement sets provided."
                  ]
                },
                {
                  "name": "AncientDisputeStatement",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Ancient dispute statement provided."
                  ]
                },
                {
                  "name": "ValidatorIndexOutOfBounds",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Validator index on statement is out of bounds for session."
                  ]
                },
                {
                  "name": "InvalidSignature",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Invalid signature on statement."
                  ]
                },
                {
                  "name": "DuplicateStatement",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Validator vote submitted more than once to dispute."
                  ]
                },
                {
                  "name": "SingleSidedDispute",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "A dispute where there are only votes on one side."
                  ]
                },
                {
                  "name": "MaliciousBacker",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "A dispute vote from a malicious backer."
                  ]
                },
                {
                  "name": "MissingBackingVotes",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "No backing votes were provides along dispute statements."
                  ]
                },
                {
                  "name": "UnconfirmedDispute",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Unconfirmed dispute statement sets provided."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 782,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "disputes",
              "slashing",
              "PendingSlashes"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "keys",
                  "type": 783,
                  "typeName": "BTreeMap<ValidatorIndex, ValidatorId>",
                  "docs": []
                },
                {
                  "name": "kind",
                  "type": 360,
                  "typeName": "SlashingOffenceKind",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 783,
          "type": {
            "path": [
              "BTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 324
              },
              {
                "name": "V",
                "type": 116
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 784,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 784,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 785
            },
            "docs": []
          }
        },
        {
          "id": 785,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                324,
                116
              ]
            },
            "docs": []
          }
        },
        {
          "id": 786,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "disputes",
              "slashing",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "InvalidKeyOwnershipProof",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The key ownership proof is invalid."
                  ]
                },
                {
                  "name": "InvalidSessionIndex",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The session index is too old or invalid."
                  ]
                },
                {
                  "name": "InvalidCandidateHash",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The candidate hash is invalid."
                  ]
                },
                {
                  "name": "InvalidValidatorIndex",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "There is no pending slash for the given validator index and time",
                    "slot."
                  ]
                },
                {
                  "name": "ValidatorIndexIdMismatch",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The validator index does not match the validator id."
                  ]
                },
                {
                  "name": "DuplicateSlashingReport",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The given slashing report is valid but already previously reported."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 787,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "paras_registrar",
              "ParaInfo"
            ],
            "params": [
              {
                "name": "Account",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "manager",
                  "type": 0,
                  "typeName": "Account",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "locked",
                  "type": 44,
                  "typeName": "bool",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 788,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "paras_registrar",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NotRegistered",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The ID is not registered."
                  ]
                },
                {
                  "name": "AlreadyRegistered",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The ID is already registered."
                  ]
                },
                {
                  "name": "NotOwner",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The caller is not the owner of this Id."
                  ]
                },
                {
                  "name": "CodeTooLarge",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Invalid para code size."
                  ]
                },
                {
                  "name": "HeadDataTooLarge",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Invalid para head data size."
                  ]
                },
                {
                  "name": "NotParachain",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Para is not a Parachain."
                  ]
                },
                {
                  "name": "NotParathread",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Para is not a Parathread."
                  ]
                },
                {
                  "name": "CannotDeregister",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Cannot deregister para"
                  ]
                },
                {
                  "name": "CannotDowngrade",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Cannot schedule downgrade of parachain to parathread"
                  ]
                },
                {
                  "name": "CannotUpgrade",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Cannot schedule upgrade of parathread to parachain"
                  ]
                },
                {
                  "name": "ParaLocked",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "Para is locked from manipulation by the manager. Must use parachain or relay chain governance."
                  ]
                },
                {
                  "name": "NotReserved",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The ID given for registration has not been reserved."
                  ]
                },
                {
                  "name": "EmptyCode",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "Registering parachain with empty code is not allowed."
                  ]
                },
                {
                  "name": "CannotSwap",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "Cannot perform a parachain slot / lifecycle swap. Check that the state of both paras are",
                    "correct for the swap to work."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 789,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 501
            },
            "docs": []
          }
        },
        {
          "id": 790,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "slots",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "ParaNotOnboarding",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The parachain ID is not onboarding."
                  ]
                },
                {
                  "name": "LeaseError",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "There was an error with the lease."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 791,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                0,
                162
              ]
            },
            "docs": []
          }
        },
        {
          "id": 792,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "array",
              "value": {
                "len": 36,
                "type": 793
              }
            },
            "docs": []
          }
        },
        {
          "id": 793,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 794
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 794,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 794,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                0,
                162,
                6
              ]
            },
            "docs": []
          }
        },
        {
          "id": 795,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "auctions",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "AuctionInProgress",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "This auction is already in progress."
                  ]
                },
                {
                  "name": "LeasePeriodInPast",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The lease period is in the past."
                  ]
                },
                {
                  "name": "ParaNotRegistered",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Para is not registered"
                  ]
                },
                {
                  "name": "NotCurrentAuction",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "Not a current auction."
                  ]
                },
                {
                  "name": "NotAuction",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "Not an auction."
                  ]
                },
                {
                  "name": "AuctionEnded",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "Auction has already ended."
                  ]
                },
                {
                  "name": "AlreadyLeasedOut",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "The para is already leased out for part of this range."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 796,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "crowdloan",
              "FundInfo"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "LeasePeriod",
                "type": 4
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "depositor",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "verifier",
                  "type": 366,
                  "typeName": "Option<MultiSigner>",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "raised",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "end",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "cap",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "last_contribution",
                  "type": 797,
                  "typeName": "LastContribution<BlockNumber>",
                  "docs": []
                },
                {
                  "name": "first_period",
                  "type": 4,
                  "typeName": "LeasePeriod",
                  "docs": []
                },
                {
                  "name": "last_period",
                  "type": 4,
                  "typeName": "LeasePeriod",
                  "docs": []
                },
                {
                  "name": "fund_index",
                  "type": 4,
                  "typeName": "FundIndex",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 797,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "crowdloan",
              "LastContribution"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Never",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "PreEnding",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Ending",
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 798,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "crowdloan",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "FirstPeriodInPast",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The current lease period is more than the first lease period."
                  ]
                },
                {
                  "name": "FirstPeriodTooFarInFuture",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "The first lease period needs to at least be less than 3 `max_value`."
                  ]
                },
                {
                  "name": "LastPeriodBeforeFirstPeriod",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "Last lease period must be greater than first lease period."
                  ]
                },
                {
                  "name": "LastPeriodTooFarInFuture",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The last lease period cannot be more than 3 periods after the first period."
                  ]
                },
                {
                  "name": "CannotEndInPast",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The campaign ends before the current block number. The end must be in the future."
                  ]
                },
                {
                  "name": "EndTooFarInFuture",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The end date for this crowdloan is not sensible."
                  ]
                },
                {
                  "name": "Overflow",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "There was an overflow."
                  ]
                },
                {
                  "name": "ContributionTooSmall",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "The contribution was below the minimum, `MinContribution`."
                  ]
                },
                {
                  "name": "InvalidParaId",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Invalid fund index."
                  ]
                },
                {
                  "name": "CapExceeded",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "Contributions exceed maximum amount."
                  ]
                },
                {
                  "name": "ContributionPeriodOver",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The contribution period has already ended."
                  ]
                },
                {
                  "name": "InvalidOrigin",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The origin of this call is invalid."
                  ]
                },
                {
                  "name": "NotParachain",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "This crowdloan does not correspond to a parachain."
                  ]
                },
                {
                  "name": "LeaseActive",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "This parachain lease is still active and retirement cannot yet begin."
                  ]
                },
                {
                  "name": "BidOrLeaseActive",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "This parachain's bid or lease is still active and withdraw cannot yet begin."
                  ]
                },
                {
                  "name": "FundNotEnded",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "The crowdloan has not yet ended."
                  ]
                },
                {
                  "name": "NoContributions",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "There are no contributions stored in this crowdloan."
                  ]
                },
                {
                  "name": "NotReadyToDissolve",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "The crowdloan is not ready to dissolve. Potentially still has a slot or in retirement period."
                  ]
                },
                {
                  "name": "InvalidSignature",
                  "fields": [],
                  "index": 18,
                  "docs": [
                    "Invalid signature."
                  ]
                },
                {
                  "name": "MemoTooLarge",
                  "fields": [],
                  "index": 19,
                  "docs": [
                    "The provided memo is too large."
                  ]
                },
                {
                  "name": "AlreadyInNewRaise",
                  "fields": [],
                  "index": 20,
                  "docs": [
                    "The fund is already in `NewRaise`"
                  ]
                },
                {
                  "name": "VrfDelayInProgress",
                  "fields": [],
                  "index": 21,
                  "docs": [
                    "No contributions allowed during the VRF delay"
                  ]
                },
                {
                  "name": "NoLeasePeriod",
                  "fields": [],
                  "index": 22,
                  "docs": [
                    "A lease period has not started yet, due to an offset in the starting block."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 799,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "QueryStatus"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Pending",
                  "fields": [
                    {
                      "name": "responder",
                      "type": 374,
                      "typeName": "VersionedMultiLocation",
                      "docs": []
                    },
                    {
                      "name": "maybe_match_querier",
                      "type": 800,
                      "typeName": "Option<VersionedMultiLocation>",
                      "docs": []
                    },
                    {
                      "name": "maybe_notify",
                      "type": 801,
                      "typeName": "Option<(u8, u8)>",
                      "docs": []
                    },
                    {
                      "name": "timeout",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "VersionNotifier",
                  "fields": [
                    {
                      "name": "origin",
                      "type": 374,
                      "typeName": "VersionedMultiLocation",
                      "docs": []
                    },
                    {
                      "name": "is_active",
                      "type": 44,
                      "typeName": "bool",
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Ready",
                  "fields": [
                    {
                      "name": "response",
                      "type": 803,
                      "typeName": "VersionedResponse",
                      "docs": []
                    },
                    {
                      "name": "at",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 800,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 374
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 374,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 801,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 802
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 802,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 802,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                2,
                2
              ]
            },
            "docs": []
          }
        },
        {
          "id": 803,
          "type": {
            "path": [
              "xcm",
              "VersionedResponse"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "V2",
                  "fields": [
                    {
                      "type": 392,
                      "typeName": "v2::Response",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "V3",
                  "fields": [
                    {
                      "type": 411,
                      "typeName": "v3::Response",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 804,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                4,
                374
              ]
            },
            "docs": []
          }
        },
        {
          "id": 805,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                11,
                9,
                4
              ]
            },
            "docs": []
          }
        },
        {
          "id": 806,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 807
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 808,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 807,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                374,
                4
              ]
            },
            "docs": []
          }
        },
        {
          "id": 808,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 807
            },
            "docs": []
          }
        },
        {
          "id": 809,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "VersionMigrationStage"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "MigrateSupportedVersion",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "MigrateVersionNotifiers",
                  "fields": [],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "NotifyCurrentTargets",
                  "fields": [
                    {
                      "type": 810,
                      "typeName": "Option<Vec<u8>>",
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "MigrateAndNotifyOldTargets",
                  "fields": [],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 810,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 13
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 13,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 811,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                4,
                0,
                812
              ]
            },
            "docs": []
          }
        },
        {
          "id": 812,
          "type": {
            "path": [
              "xcm",
              "VersionedAssetId"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "V3",
                  "fields": [
                    {
                      "type": 408,
                      "typeName": "v3::AssetId",
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 813,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "RemoteLockedFungibleRecord"
            ],
            "params": [
              {
                "name": "ConsumerIdentifier",
                "type": 34
              },
              {
                "name": "MaxConsumers"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "u128",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 374,
                  "typeName": "VersionedMultiLocation",
                  "docs": []
                },
                {
                  "name": "locker",
                  "type": 374,
                  "typeName": "VersionedMultiLocation",
                  "docs": []
                },
                {
                  "name": "consumers",
                  "type": 814,
                  "typeName": "BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 814,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 815
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 816,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 815,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                34,
                6
              ]
            },
            "docs": []
          }
        },
        {
          "id": 816,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 815
            },
            "docs": []
          }
        },
        {
          "id": 817,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 818
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 819,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 818,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                6,
                374
              ]
            },
            "docs": []
          }
        },
        {
          "id": 819,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "sequence",
              "value": 818
            },
            "docs": []
          }
        },
        {
          "id": 820,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Unreachable",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "The desired destination was unreachable, generally because there is a no way of routing",
                    "to it."
                  ]
                },
                {
                  "name": "SendFailure",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
                    "a lack of space for buffering the message."
                  ]
                },
                {
                  "name": "Filtered",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The message execution fails the filter."
                  ]
                },
                {
                  "name": "UnweighableMessage",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The message's weight could not be determined."
                  ]
                },
                {
                  "name": "DestinationNotInvertible",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The destination `MultiLocation` provided cannot be inverted."
                  ]
                },
                {
                  "name": "Empty",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "The assets to be sent are empty."
                  ]
                },
                {
                  "name": "CannotReanchor",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "Could not re-anchor the assets to declare the fees for the destination chain."
                  ]
                },
                {
                  "name": "TooManyAssets",
                  "fields": [],
                  "index": 7,
                  "docs": [
                    "Too many assets have been attempted for transfer."
                  ]
                },
                {
                  "name": "InvalidOrigin",
                  "fields": [],
                  "index": 8,
                  "docs": [
                    "Origin is invalid for sending."
                  ]
                },
                {
                  "name": "BadVersion",
                  "fields": [],
                  "index": 9,
                  "docs": [
                    "The version of the `Versioned` value used is not able to be interpreted."
                  ]
                },
                {
                  "name": "BadLocation",
                  "fields": [],
                  "index": 10,
                  "docs": [
                    "The given location could not be used (e.g. because it cannot be expressed in the",
                    "desired version of XCM)."
                  ]
                },
                {
                  "name": "NoSubscription",
                  "fields": [],
                  "index": 11,
                  "docs": [
                    "The referenced subscription could not be found."
                  ]
                },
                {
                  "name": "AlreadySubscribed",
                  "fields": [],
                  "index": 12,
                  "docs": [
                    "The location is invalid since it already has a subscription from us."
                  ]
                },
                {
                  "name": "InvalidAsset",
                  "fields": [],
                  "index": 13,
                  "docs": [
                    "Invalid asset for the operation."
                  ]
                },
                {
                  "name": "LowBalance",
                  "fields": [],
                  "index": 14,
                  "docs": [
                    "The owner does not own (all) of the asset that they wish to do the operation on."
                  ]
                },
                {
                  "name": "TooManyLocks",
                  "fields": [],
                  "index": 15,
                  "docs": [
                    "The asset owner has too many locks on the asset."
                  ]
                },
                {
                  "name": "AccountNotSovereign",
                  "fields": [],
                  "index": 16,
                  "docs": [
                    "The given account is not an identifiable sovereign account for any location."
                  ]
                },
                {
                  "name": "FeesNotMet",
                  "fields": [],
                  "index": 17,
                  "docs": [
                    "The operation required fees to be paid which the initiator could not meet."
                  ]
                },
                {
                  "name": "LockNotFound",
                  "fields": [],
                  "index": 18,
                  "docs": [
                    "A remote lock with the corresponding data could not be found."
                  ]
                },
                {
                  "name": "InUse",
                  "fields": [],
                  "index": 19,
                  "docs": [
                    "The unlock operation cannot succeed because there are still consumers of the lock."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 821,
          "type": {
            "path": [
              "pallet_message_queue",
              "BookState"
            ],
            "params": [
              {
                "name": "MessageOrigin",
                "type": 437
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "begin",
                  "type": 4,
                  "typeName": "PageIndex",
                  "docs": []
                },
                {
                  "name": "end",
                  "type": 4,
                  "typeName": "PageIndex",
                  "docs": []
                },
                {
                  "name": "count",
                  "type": 4,
                  "typeName": "PageIndex",
                  "docs": []
                },
                {
                  "name": "ready_neighbours",
                  "type": 822,
                  "typeName": "Option<Neighbours<MessageOrigin>>",
                  "docs": []
                },
                {
                  "name": "message_count",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "size",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 822,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 823
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "None",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Some",
                  "fields": [
                    {
                      "type": 823,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 823,
          "type": {
            "path": [
              "pallet_message_queue",
              "Neighbours"
            ],
            "params": [
              {
                "name": "MessageOrigin",
                "type": 437
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "prev",
                  "type": 437,
                  "typeName": "MessageOrigin",
                  "docs": []
                },
                {
                  "name": "next",
                  "type": 437,
                  "typeName": "MessageOrigin",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 824,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                437,
                4
              ]
            },
            "docs": []
          }
        },
        {
          "id": 825,
          "type": {
            "path": [
              "pallet_message_queue",
              "Page"
            ],
            "params": [
              {
                "name": "Size",
                "type": 4
              },
              {
                "name": "HeapSize"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "name": "remaining",
                  "type": 4,
                  "typeName": "Size",
                  "docs": []
                },
                {
                  "name": "remaining_size",
                  "type": 4,
                  "typeName": "Size",
                  "docs": []
                },
                {
                  "name": "first_index",
                  "type": 4,
                  "typeName": "Size",
                  "docs": []
                },
                {
                  "name": "first",
                  "type": 4,
                  "typeName": "Size",
                  "docs": []
                },
                {
                  "name": "last",
                  "type": 4,
                  "typeName": "Size",
                  "docs": []
                },
                {
                  "name": "heap",
                  "type": 826,
                  "typeName": "BoundedVec<u8, IntoU32<HeapSize, Size>>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 826,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 13,
                  "typeName": "Vec<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 827,
          "type": {
            "path": [
              "pallet_message_queue",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "NotReapable",
                  "fields": [],
                  "index": 0,
                  "docs": [
                    "Page is not reapable because it has items remaining to be processed and is not old",
                    "enough."
                  ]
                },
                {
                  "name": "NoPage",
                  "fields": [],
                  "index": 1,
                  "docs": [
                    "Page to be reaped does not exist."
                  ]
                },
                {
                  "name": "NoMessage",
                  "fields": [],
                  "index": 2,
                  "docs": [
                    "The referenced message could not be found."
                  ]
                },
                {
                  "name": "AlreadyProcessed",
                  "fields": [],
                  "index": 3,
                  "docs": [
                    "The message was already processed and cannot be processed again."
                  ]
                },
                {
                  "name": "Queued",
                  "fields": [],
                  "index": 4,
                  "docs": [
                    "The message is queued for future execution."
                  ]
                },
                {
                  "name": "InsufficientWeight",
                  "fields": [],
                  "index": 5,
                  "docs": [
                    "There is temporarily not enough weight to continue servicing messages."
                  ]
                },
                {
                  "name": "TemporarilyUnprocessable",
                  "fields": [],
                  "index": 6,
                  "docs": [
                    "This message is temporarily unprocessable.",
                    "",
                    "Such errors are expected, but not guaranteed, to resolve themselves eventually through",
                    "retrying."
                  ]
                }
              ]
            },
            "docs": [
              "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          }
        },
        {
          "id": 828,
          "type": {
            "path": [
              "sp_runtime",
              "generic",
              "unchecked_extrinsic",
              "UncheckedExtrinsic"
            ],
            "params": [
              {
                "name": "Address",
                "type": 100
              },
              {
                "name": "Call",
                "type": 79
              },
              {
                "name": "Signature",
                "type": 371
              },
              {
                "name": "Extra",
                "type": 829
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 13,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 829,
          "type": {
            "path": [],
            "params": [],
            "def": {
              "tag": "tuple",
              "value": [
                830,
                831,
                832,
                833,
                834,
                836,
                837,
                838,
                839
              ]
            },
            "docs": []
          }
        },
        {
          "id": 830,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_non_zero_sender",
              "CheckNonZeroSender"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": []
            },
            "docs": []
          }
        },
        {
          "id": 831,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_spec_version",
              "CheckSpecVersion"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": []
            },
            "docs": []
          }
        },
        {
          "id": 832,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_tx_version",
              "CheckTxVersion"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": []
            },
            "docs": []
          }
        },
        {
          "id": 833,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_genesis",
              "CheckGenesis"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": []
            },
            "docs": []
          }
        },
        {
          "id": 834,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_mortality",
              "CheckMortality"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 835,
                  "typeName": "Era",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 835,
          "type": {
            "path": [
              "sp_runtime",
              "generic",
              "era",
              "Era"
            ],
            "params": [],
            "def": {
              "tag": "variant",
              "value": [
                {
                  "name": "Immortal",
                  "fields": [],
                  "index": 0,
                  "docs": []
                },
                {
                  "name": "Mortal1",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 1,
                  "docs": []
                },
                {
                  "name": "Mortal2",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 2,
                  "docs": []
                },
                {
                  "name": "Mortal3",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 3,
                  "docs": []
                },
                {
                  "name": "Mortal4",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 4,
                  "docs": []
                },
                {
                  "name": "Mortal5",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 5,
                  "docs": []
                },
                {
                  "name": "Mortal6",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 6,
                  "docs": []
                },
                {
                  "name": "Mortal7",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 7,
                  "docs": []
                },
                {
                  "name": "Mortal8",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 8,
                  "docs": []
                },
                {
                  "name": "Mortal9",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 9,
                  "docs": []
                },
                {
                  "name": "Mortal10",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 10,
                  "docs": []
                },
                {
                  "name": "Mortal11",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 11,
                  "docs": []
                },
                {
                  "name": "Mortal12",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 12,
                  "docs": []
                },
                {
                  "name": "Mortal13",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 13,
                  "docs": []
                },
                {
                  "name": "Mortal14",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 14,
                  "docs": []
                },
                {
                  "name": "Mortal15",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 15,
                  "docs": []
                },
                {
                  "name": "Mortal16",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 16,
                  "docs": []
                },
                {
                  "name": "Mortal17",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 17,
                  "docs": []
                },
                {
                  "name": "Mortal18",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 18,
                  "docs": []
                },
                {
                  "name": "Mortal19",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 19,
                  "docs": []
                },
                {
                  "name": "Mortal20",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 20,
                  "docs": []
                },
                {
                  "name": "Mortal21",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 21,
                  "docs": []
                },
                {
                  "name": "Mortal22",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 22,
                  "docs": []
                },
                {
                  "name": "Mortal23",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 23,
                  "docs": []
                },
                {
                  "name": "Mortal24",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 24,
                  "docs": []
                },
                {
                  "name": "Mortal25",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 25,
                  "docs": []
                },
                {
                  "name": "Mortal26",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 26,
                  "docs": []
                },
                {
                  "name": "Mortal27",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 27,
                  "docs": []
                },
                {
                  "name": "Mortal28",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 28,
                  "docs": []
                },
                {
                  "name": "Mortal29",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 29,
                  "docs": []
                },
                {
                  "name": "Mortal30",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 30,
                  "docs": []
                },
                {
                  "name": "Mortal31",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 31,
                  "docs": []
                },
                {
                  "name": "Mortal32",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 32,
                  "docs": []
                },
                {
                  "name": "Mortal33",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 33,
                  "docs": []
                },
                {
                  "name": "Mortal34",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 34,
                  "docs": []
                },
                {
                  "name": "Mortal35",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 35,
                  "docs": []
                },
                {
                  "name": "Mortal36",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 36,
                  "docs": []
                },
                {
                  "name": "Mortal37",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 37,
                  "docs": []
                },
                {
                  "name": "Mortal38",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 38,
                  "docs": []
                },
                {
                  "name": "Mortal39",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 39,
                  "docs": []
                },
                {
                  "name": "Mortal40",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 40,
                  "docs": []
                },
                {
                  "name": "Mortal41",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 41,
                  "docs": []
                },
                {
                  "name": "Mortal42",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 42,
                  "docs": []
                },
                {
                  "name": "Mortal43",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 43,
                  "docs": []
                },
                {
                  "name": "Mortal44",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 44,
                  "docs": []
                },
                {
                  "name": "Mortal45",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 45,
                  "docs": []
                },
                {
                  "name": "Mortal46",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 46,
                  "docs": []
                },
                {
                  "name": "Mortal47",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 47,
                  "docs": []
                },
                {
                  "name": "Mortal48",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 48,
                  "docs": []
                },
                {
                  "name": "Mortal49",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 49,
                  "docs": []
                },
                {
                  "name": "Mortal50",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 50,
                  "docs": []
                },
                {
                  "name": "Mortal51",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 51,
                  "docs": []
                },
                {
                  "name": "Mortal52",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 52,
                  "docs": []
                },
                {
                  "name": "Mortal53",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 53,
                  "docs": []
                },
                {
                  "name": "Mortal54",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 54,
                  "docs": []
                },
                {
                  "name": "Mortal55",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 55,
                  "docs": []
                },
                {
                  "name": "Mortal56",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 56,
                  "docs": []
                },
                {
                  "name": "Mortal57",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 57,
                  "docs": []
                },
                {
                  "name": "Mortal58",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 58,
                  "docs": []
                },
                {
                  "name": "Mortal59",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 59,
                  "docs": []
                },
                {
                  "name": "Mortal60",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 60,
                  "docs": []
                },
                {
                  "name": "Mortal61",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 61,
                  "docs": []
                },
                {
                  "name": "Mortal62",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 62,
                  "docs": []
                },
                {
                  "name": "Mortal63",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 63,
                  "docs": []
                },
                {
                  "name": "Mortal64",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 64,
                  "docs": []
                },
                {
                  "name": "Mortal65",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 65,
                  "docs": []
                },
                {
                  "name": "Mortal66",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 66,
                  "docs": []
                },
                {
                  "name": "Mortal67",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 67,
                  "docs": []
                },
                {
                  "name": "Mortal68",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 68,
                  "docs": []
                },
                {
                  "name": "Mortal69",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 69,
                  "docs": []
                },
                {
                  "name": "Mortal70",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 70,
                  "docs": []
                },
                {
                  "name": "Mortal71",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 71,
                  "docs": []
                },
                {
                  "name": "Mortal72",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 72,
                  "docs": []
                },
                {
                  "name": "Mortal73",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 73,
                  "docs": []
                },
                {
                  "name": "Mortal74",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 74,
                  "docs": []
                },
                {
                  "name": "Mortal75",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 75,
                  "docs": []
                },
                {
                  "name": "Mortal76",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 76,
                  "docs": []
                },
                {
                  "name": "Mortal77",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 77,
                  "docs": []
                },
                {
                  "name": "Mortal78",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 78,
                  "docs": []
                },
                {
                  "name": "Mortal79",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 79,
                  "docs": []
                },
                {
                  "name": "Mortal80",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 80,
                  "docs": []
                },
                {
                  "name": "Mortal81",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 81,
                  "docs": []
                },
                {
                  "name": "Mortal82",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 82,
                  "docs": []
                },
                {
                  "name": "Mortal83",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 83,
                  "docs": []
                },
                {
                  "name": "Mortal84",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 84,
                  "docs": []
                },
                {
                  "name": "Mortal85",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 85,
                  "docs": []
                },
                {
                  "name": "Mortal86",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 86,
                  "docs": []
                },
                {
                  "name": "Mortal87",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 87,
                  "docs": []
                },
                {
                  "name": "Mortal88",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 88,
                  "docs": []
                },
                {
                  "name": "Mortal89",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 89,
                  "docs": []
                },
                {
                  "name": "Mortal90",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 90,
                  "docs": []
                },
                {
                  "name": "Mortal91",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 91,
                  "docs": []
                },
                {
                  "name": "Mortal92",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 92,
                  "docs": []
                },
                {
                  "name": "Mortal93",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 93,
                  "docs": []
                },
                {
                  "name": "Mortal94",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 94,
                  "docs": []
                },
                {
                  "name": "Mortal95",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 95,
                  "docs": []
                },
                {
                  "name": "Mortal96",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 96,
                  "docs": []
                },
                {
                  "name": "Mortal97",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 97,
                  "docs": []
                },
                {
                  "name": "Mortal98",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 98,
                  "docs": []
                },
                {
                  "name": "Mortal99",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 99,
                  "docs": []
                },
                {
                  "name": "Mortal100",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 100,
                  "docs": []
                },
                {
                  "name": "Mortal101",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 101,
                  "docs": []
                },
                {
                  "name": "Mortal102",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 102,
                  "docs": []
                },
                {
                  "name": "Mortal103",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 103,
                  "docs": []
                },
                {
                  "name": "Mortal104",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 104,
                  "docs": []
                },
                {
                  "name": "Mortal105",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 105,
                  "docs": []
                },
                {
                  "name": "Mortal106",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 106,
                  "docs": []
                },
                {
                  "name": "Mortal107",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 107,
                  "docs": []
                },
                {
                  "name": "Mortal108",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 108,
                  "docs": []
                },
                {
                  "name": "Mortal109",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 109,
                  "docs": []
                },
                {
                  "name": "Mortal110",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 110,
                  "docs": []
                },
                {
                  "name": "Mortal111",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 111,
                  "docs": []
                },
                {
                  "name": "Mortal112",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 112,
                  "docs": []
                },
                {
                  "name": "Mortal113",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 113,
                  "docs": []
                },
                {
                  "name": "Mortal114",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 114,
                  "docs": []
                },
                {
                  "name": "Mortal115",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 115,
                  "docs": []
                },
                {
                  "name": "Mortal116",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 116,
                  "docs": []
                },
                {
                  "name": "Mortal117",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 117,
                  "docs": []
                },
                {
                  "name": "Mortal118",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 118,
                  "docs": []
                },
                {
                  "name": "Mortal119",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 119,
                  "docs": []
                },
                {
                  "name": "Mortal120",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 120,
                  "docs": []
                },
                {
                  "name": "Mortal121",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 121,
                  "docs": []
                },
                {
                  "name": "Mortal122",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 122,
                  "docs": []
                },
                {
                  "name": "Mortal123",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 123,
                  "docs": []
                },
                {
                  "name": "Mortal124",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 124,
                  "docs": []
                },
                {
                  "name": "Mortal125",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 125,
                  "docs": []
                },
                {
                  "name": "Mortal126",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 126,
                  "docs": []
                },
                {
                  "name": "Mortal127",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 127,
                  "docs": []
                },
                {
                  "name": "Mortal128",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 128,
                  "docs": []
                },
                {
                  "name": "Mortal129",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 129,
                  "docs": []
                },
                {
                  "name": "Mortal130",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 130,
                  "docs": []
                },
                {
                  "name": "Mortal131",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 131,
                  "docs": []
                },
                {
                  "name": "Mortal132",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 132,
                  "docs": []
                },
                {
                  "name": "Mortal133",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 133,
                  "docs": []
                },
                {
                  "name": "Mortal134",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 134,
                  "docs": []
                },
                {
                  "name": "Mortal135",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 135,
                  "docs": []
                },
                {
                  "name": "Mortal136",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 136,
                  "docs": []
                },
                {
                  "name": "Mortal137",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 137,
                  "docs": []
                },
                {
                  "name": "Mortal138",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 138,
                  "docs": []
                },
                {
                  "name": "Mortal139",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 139,
                  "docs": []
                },
                {
                  "name": "Mortal140",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 140,
                  "docs": []
                },
                {
                  "name": "Mortal141",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 141,
                  "docs": []
                },
                {
                  "name": "Mortal142",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 142,
                  "docs": []
                },
                {
                  "name": "Mortal143",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 143,
                  "docs": []
                },
                {
                  "name": "Mortal144",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 144,
                  "docs": []
                },
                {
                  "name": "Mortal145",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 145,
                  "docs": []
                },
                {
                  "name": "Mortal146",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 146,
                  "docs": []
                },
                {
                  "name": "Mortal147",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 147,
                  "docs": []
                },
                {
                  "name": "Mortal148",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 148,
                  "docs": []
                },
                {
                  "name": "Mortal149",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 149,
                  "docs": []
                },
                {
                  "name": "Mortal150",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 150,
                  "docs": []
                },
                {
                  "name": "Mortal151",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 151,
                  "docs": []
                },
                {
                  "name": "Mortal152",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 152,
                  "docs": []
                },
                {
                  "name": "Mortal153",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 153,
                  "docs": []
                },
                {
                  "name": "Mortal154",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 154,
                  "docs": []
                },
                {
                  "name": "Mortal155",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 155,
                  "docs": []
                },
                {
                  "name": "Mortal156",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 156,
                  "docs": []
                },
                {
                  "name": "Mortal157",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 157,
                  "docs": []
                },
                {
                  "name": "Mortal158",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 158,
                  "docs": []
                },
                {
                  "name": "Mortal159",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 159,
                  "docs": []
                },
                {
                  "name": "Mortal160",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 160,
                  "docs": []
                },
                {
                  "name": "Mortal161",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 161,
                  "docs": []
                },
                {
                  "name": "Mortal162",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 162,
                  "docs": []
                },
                {
                  "name": "Mortal163",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 163,
                  "docs": []
                },
                {
                  "name": "Mortal164",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 164,
                  "docs": []
                },
                {
                  "name": "Mortal165",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 165,
                  "docs": []
                },
                {
                  "name": "Mortal166",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 166,
                  "docs": []
                },
                {
                  "name": "Mortal167",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 167,
                  "docs": []
                },
                {
                  "name": "Mortal168",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 168,
                  "docs": []
                },
                {
                  "name": "Mortal169",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 169,
                  "docs": []
                },
                {
                  "name": "Mortal170",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 170,
                  "docs": []
                },
                {
                  "name": "Mortal171",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 171,
                  "docs": []
                },
                {
                  "name": "Mortal172",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 172,
                  "docs": []
                },
                {
                  "name": "Mortal173",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 173,
                  "docs": []
                },
                {
                  "name": "Mortal174",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 174,
                  "docs": []
                },
                {
                  "name": "Mortal175",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 175,
                  "docs": []
                },
                {
                  "name": "Mortal176",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 176,
                  "docs": []
                },
                {
                  "name": "Mortal177",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 177,
                  "docs": []
                },
                {
                  "name": "Mortal178",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 178,
                  "docs": []
                },
                {
                  "name": "Mortal179",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 179,
                  "docs": []
                },
                {
                  "name": "Mortal180",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 180,
                  "docs": []
                },
                {
                  "name": "Mortal181",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 181,
                  "docs": []
                },
                {
                  "name": "Mortal182",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 182,
                  "docs": []
                },
                {
                  "name": "Mortal183",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 183,
                  "docs": []
                },
                {
                  "name": "Mortal184",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 184,
                  "docs": []
                },
                {
                  "name": "Mortal185",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 185,
                  "docs": []
                },
                {
                  "name": "Mortal186",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 186,
                  "docs": []
                },
                {
                  "name": "Mortal187",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 187,
                  "docs": []
                },
                {
                  "name": "Mortal188",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 188,
                  "docs": []
                },
                {
                  "name": "Mortal189",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 189,
                  "docs": []
                },
                {
                  "name": "Mortal190",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 190,
                  "docs": []
                },
                {
                  "name": "Mortal191",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 191,
                  "docs": []
                },
                {
                  "name": "Mortal192",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 192,
                  "docs": []
                },
                {
                  "name": "Mortal193",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 193,
                  "docs": []
                },
                {
                  "name": "Mortal194",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 194,
                  "docs": []
                },
                {
                  "name": "Mortal195",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 195,
                  "docs": []
                },
                {
                  "name": "Mortal196",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 196,
                  "docs": []
                },
                {
                  "name": "Mortal197",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 197,
                  "docs": []
                },
                {
                  "name": "Mortal198",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 198,
                  "docs": []
                },
                {
                  "name": "Mortal199",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 199,
                  "docs": []
                },
                {
                  "name": "Mortal200",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 200,
                  "docs": []
                },
                {
                  "name": "Mortal201",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 201,
                  "docs": []
                },
                {
                  "name": "Mortal202",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 202,
                  "docs": []
                },
                {
                  "name": "Mortal203",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 203,
                  "docs": []
                },
                {
                  "name": "Mortal204",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 204,
                  "docs": []
                },
                {
                  "name": "Mortal205",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 205,
                  "docs": []
                },
                {
                  "name": "Mortal206",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 206,
                  "docs": []
                },
                {
                  "name": "Mortal207",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 207,
                  "docs": []
                },
                {
                  "name": "Mortal208",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 208,
                  "docs": []
                },
                {
                  "name": "Mortal209",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 209,
                  "docs": []
                },
                {
                  "name": "Mortal210",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 210,
                  "docs": []
                },
                {
                  "name": "Mortal211",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 211,
                  "docs": []
                },
                {
                  "name": "Mortal212",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 212,
                  "docs": []
                },
                {
                  "name": "Mortal213",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 213,
                  "docs": []
                },
                {
                  "name": "Mortal214",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 214,
                  "docs": []
                },
                {
                  "name": "Mortal215",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 215,
                  "docs": []
                },
                {
                  "name": "Mortal216",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 216,
                  "docs": []
                },
                {
                  "name": "Mortal217",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 217,
                  "docs": []
                },
                {
                  "name": "Mortal218",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 218,
                  "docs": []
                },
                {
                  "name": "Mortal219",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 219,
                  "docs": []
                },
                {
                  "name": "Mortal220",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 220,
                  "docs": []
                },
                {
                  "name": "Mortal221",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 221,
                  "docs": []
                },
                {
                  "name": "Mortal222",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 222,
                  "docs": []
                },
                {
                  "name": "Mortal223",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 223,
                  "docs": []
                },
                {
                  "name": "Mortal224",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 224,
                  "docs": []
                },
                {
                  "name": "Mortal225",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 225,
                  "docs": []
                },
                {
                  "name": "Mortal226",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 226,
                  "docs": []
                },
                {
                  "name": "Mortal227",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 227,
                  "docs": []
                },
                {
                  "name": "Mortal228",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 228,
                  "docs": []
                },
                {
                  "name": "Mortal229",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 229,
                  "docs": []
                },
                {
                  "name": "Mortal230",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 230,
                  "docs": []
                },
                {
                  "name": "Mortal231",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 231,
                  "docs": []
                },
                {
                  "name": "Mortal232",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 232,
                  "docs": []
                },
                {
                  "name": "Mortal233",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 233,
                  "docs": []
                },
                {
                  "name": "Mortal234",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 234,
                  "docs": []
                },
                {
                  "name": "Mortal235",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 235,
                  "docs": []
                },
                {
                  "name": "Mortal236",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 236,
                  "docs": []
                },
                {
                  "name": "Mortal237",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 237,
                  "docs": []
                },
                {
                  "name": "Mortal238",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 238,
                  "docs": []
                },
                {
                  "name": "Mortal239",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 239,
                  "docs": []
                },
                {
                  "name": "Mortal240",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 240,
                  "docs": []
                },
                {
                  "name": "Mortal241",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 241,
                  "docs": []
                },
                {
                  "name": "Mortal242",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 242,
                  "docs": []
                },
                {
                  "name": "Mortal243",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 243,
                  "docs": []
                },
                {
                  "name": "Mortal244",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 244,
                  "docs": []
                },
                {
                  "name": "Mortal245",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 245,
                  "docs": []
                },
                {
                  "name": "Mortal246",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 246,
                  "docs": []
                },
                {
                  "name": "Mortal247",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 247,
                  "docs": []
                },
                {
                  "name": "Mortal248",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 248,
                  "docs": []
                },
                {
                  "name": "Mortal249",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 249,
                  "docs": []
                },
                {
                  "name": "Mortal250",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 250,
                  "docs": []
                },
                {
                  "name": "Mortal251",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 251,
                  "docs": []
                },
                {
                  "name": "Mortal252",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 252,
                  "docs": []
                },
                {
                  "name": "Mortal253",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 253,
                  "docs": []
                },
                {
                  "name": "Mortal254",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 254,
                  "docs": []
                },
                {
                  "name": "Mortal255",
                  "fields": [
                    {
                      "type": 2,
                      "docs": []
                    }
                  ],
                  "index": 255,
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 836,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_nonce",
              "CheckNonce"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 91,
                  "typeName": "T::Index",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 837,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_weight",
              "CheckWeight"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": []
            },
            "docs": []
          }
        },
        {
          "id": 838,
          "type": {
            "path": [
              "pallet_transaction_payment",
              "ChargeTransactionPayment"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": [
                {
                  "type": 60,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ]
            },
            "docs": []
          }
        },
        {
          "id": 839,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "claims",
              "PrevalidateAttests"
            ],
            "params": [
              {
                "name": "T"
              }
            ],
            "def": {
              "tag": "composite",
              "value": []
            },
            "docs": []
          }
        },
        {
          "id": 840,
          "type": {
            "path": [
              "polkadot_runtime",
              "Runtime"
            ],
            "params": [],
            "def": {
              "tag": "composite",
              "value": []
            },
            "docs": []
          }
        }
      ],
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "items": [
              {
                "name": "Account",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  128
                ],
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 8
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 12
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 13
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 12
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 14
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 18
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 12,
                    "value": 481
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 482
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 44
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 44
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 479
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": 80,
          "events": 21,
          "constants": [
            {
              "name": "BlockWeights",
              "type": 484,
              "value": [
                7,
                56,
                255,
                253,
                104,
                2,
                0,
                11,
                0,
                32,
                74,
                169,
                209,
                1,
                19,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                2,
                80,
                170,
                25,
                0,
                1,
                11,
                0,
                60,
                117,
                144,
                88,
                1,
                19,
                163,
                112,
                61,
                10,
                215,
                163,
                112,
                189,
                1,
                11,
                0,
                152,
                247,
                62,
                93,
                1,
                19,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                191,
                1,
                0,
                0,
                2,
                80,
                170,
                25,
                0,
                1,
                11,
                0,
                196,
                199,
                250,
                204,
                1,
                19,
                163,
                112,
                61,
                10,
                215,
                163,
                112,
                253,
                1,
                11,
                0,
                32,
                74,
                169,
                209,
                1,
                19,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                1,
                7,
                0,
                136,
                82,
                106,
                116,
                19,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                64,
                2,
                80,
                170,
                25,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "type": 487,
              "value": [
                0,
                0,
                60,
                0,
                0,
                0,
                80,
                0,
                0,
                0,
                80,
                0
              ],
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "type": 4,
              "value": [
                0,
                16,
                0,
                0
              ],
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "type": 489,
              "value": [
                56,
                202,
                56,
                1,
                0,
                0,
                0,
                0,
                152,
                170,
                249,
                4,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "type": 490,
              "value": [
                32,
                112,
                111,
                108,
                107,
                97,
                100,
                111,
                116,
                60,
                112,
                97,
                114,
                105,
                116,
                121,
                45,
                112,
                111,
                108,
                107,
                97,
                100,
                111,
                116,
                0,
                0,
                0,
                0,
                214,
                36,
                0,
                0,
                0,
                0,
                0,
                0,
                68,
                223,
                106,
                203,
                104,
                153,
                7,
                96,
                155,
                4,
                0,
                0,
                0,
                55,
                227,
                151,
                252,
                124,
                145,
                245,
                228,
                2,
                0,
                0,
                0,
                64,
                254,
                58,
                212,
                1,
                248,
                149,
                154,
                6,
                0,
                0,
                0,
                23,
                166,
                188,
                13,
                0,
                98,
                174,
                179,
                1,
                0,
                0,
                0,
                24,
                239,
                88,
                163,
                182,
                123,
                167,
                112,
                1,
                0,
                0,
                0,
                210,
                188,
                152,
                151,
                238,
                208,
                143,
                21,
                3,
                0,
                0,
                0,
                247,
                139,
                39,
                139,
                229,
                63,
                69,
                76,
                2,
                0,
                0,
                0,
                175,
                44,
                2,
                151,
                162,
                62,
                109,
                61,
                4,
                0,
                0,
                0,
                73,
                234,
                175,
                27,
                84,
                138,
                12,
                176,
                2,
                0,
                0,
                0,
                145,
                213,
                223,
                24,
                176,
                210,
                207,
                88,
                2,
                0,
                0,
                0,
                237,
                153,
                197,
                172,
                178,
                94,
                237,
                245,
                3,
                0,
                0,
                0,
                203,
                202,
                37,
                227,
                159,
                20,
                35,
                135,
                2,
                0,
                0,
                0,
                104,
                122,
                212,
                74,
                211,
                127,
                3,
                194,
                1,
                0,
                0,
                0,
                171,
                60,
                5,
                114,
                41,
                31,
                235,
                139,
                1,
                0,
                0,
                0,
                188,
                157,
                137,
                144,
                79,
                91,
                146,
                63,
                1,
                0,
                0,
                0,
                55,
                200,
                187,
                19,
                80,
                169,
                162,
                168,
                4,
                0,
                0,
                0,
                243,
                255,
                20,
                213,
                171,
                82,
                112,
                89,
                3,
                0,
                0,
                0,
                24,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "type": 77,
              "value": [
                0,
                0
              ],
              "docs": [
                " The designated SS58 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "errors": 494,
          "index": 0
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "items": [
              {
                "name": "IncompleteSince",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0
                ],
                "docs": []
              },
              {
                "name": "Agenda",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 495
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Items to be executed, indexed by the block number that they should be executed on."
                ]
              },
              {
                "name": "Lookup",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 1,
                    "value": 31
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Lookup from a name to the block number and index of the task.",
                  "",
                  " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                  " identities."
                ]
              }
            ]
          },
          "calls": 84,
          "events": 30,
          "constants": [
            {
              "name": "MaximumWeight",
              "type": 9,
              "value": [
                11,
                0,
                128,
                110,
                135,
                116,
                1,
                19,
                204,
                204,
                204,
                204,
                204,
                204,
                204,
                204
              ],
              "docs": [
                " The maximum weight that may be scheduled per block for any dispatchables."
              ]
            },
            {
              "name": "MaxScheduledPerBlock",
              "type": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of scheduled calls in the queue for a single block.",
                "",
                " NOTE:",
                " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
                " higher limit under `runtime-benchmarks` feature."
              ]
            }
          ],
          "errors": 499,
          "index": 1
        },
        {
          "name": "Preimage",
          "storage": {
            "prefix": "Preimage",
            "items": [
              {
                "name": "StatusFor",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 12,
                    "value": 500
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The request status of a given hash."
                ]
              },
              {
                "name": "PreimageFor",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 502,
                    "value": 503
                  }
                },
                "fallback": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": 86,
          "events": 35,
          "constants": [],
          "errors": 504,
          "index": 10
        },
        {
          "name": "Babe",
          "storage": {
            "prefix": "Babe",
            "items": [
              {
                "name": "EpochIndex",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 11
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current epoch index."
                ]
              },
              {
                "name": "Authorities",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 505
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Current epoch authorities."
                ]
              },
              {
                "name": "GenesisSlot",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 93
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The slot at which the first epoch actually started. This is 0",
                  " until the first block of the chain."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 93
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current slot number."
                ]
              },
              {
                "name": "Randomness",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 1
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The epoch randomness for the *current* epoch.",
                  "",
                  " # Security",
                  "",
                  " This MUST NOT be used for gambling, as it can be influenced by a",
                  " malicious validator in the short term. It MAY be used in many",
                  " cryptographic protocols, however, so long as one remembers that this",
                  " (like everything else on-chain) it is public. For example, it can be",
                  " used where a number is needed that cannot have been chosen by an",
                  " adversary, for purposes such as public-coin zero-knowledge proofs."
                ]
              },
              {
                "name": "PendingEpochConfigChange",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 95
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Pending epoch configuration change that will be applied when the next epoch is enacted."
                ]
              },
              {
                "name": "NextRandomness",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 1
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Next epoch randomness."
                ]
              },
              {
                "name": "NextAuthorities",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 505
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Next epoch authorities."
                ]
              },
              {
                "name": "SegmentIndex",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Randomness under construction.",
                  "",
                  " We make a trade-off between storage accesses and list length.",
                  " We store the under-construction randomness in segments of up to",
                  " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                  "",
                  " Once a segment reaches this length, we begin the next one.",
                  " We reset all segments and return to `0` at the beginning of every",
                  " epoch."
                ]
              },
              {
                "name": "UnderConstruction",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 508
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
                ]
              },
              {
                "name": "Initialized",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 510
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Temporary value (cleared at block finalization) which is `Some`",
                  " if per-block initialization has already been called for current block."
                ]
              },
              {
                "name": "AuthorVrfRandomness",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 32
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " This field should always be populated during block processing unless",
                  " secondary plain slots are enabled (which don't contain a VRF output).",
                  "",
                  " It is set in `on_finalize`, before it will contain the value from the last block."
                ]
              },
              {
                "name": "EpochStart",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 31
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The block numbers when the last and current epoch have started, respectively `N-1` and",
                  " `N`.",
                  " NOTE: We track this is in order to annotate the block number when a given pool of",
                  " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
                  " slots, which may be skipped, the block numbers may not line up with the slot numbers."
                ]
              },
              {
                "name": "Lateness",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " How late the current block is compared to its parent.",
                  "",
                  " This entry is populated as part of block execution and is cleaned up",
                  " on block finalization. Querying this storage entry outside of block",
                  " execution context should always yield zero."
                ]
              },
              {
                "name": "EpochConfig",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 516
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The configuration for the current epoch. Should never be `None` as it is initialized in",
                  " genesis."
                ]
              },
              {
                "name": "NextEpochConfig",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 516
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The configuration for the next epoch, `None` if the config will not change",
                  " (you can fallback to `EpochConfig` instead in that case)."
                ]
              },
              {
                "name": "SkippedEpochs",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 517
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " A list of the last 100 skipped epochs and the corresponding session index",
                  " when the epoch was skipped.",
                  "",
                  " This is only used for validating equivocation proofs. An equivocation proof",
                  " must contains a key-ownership proof for a given session, therefore we need a",
                  " way to tie together sessions and epoch indices, i.e. we need to validate that",
                  " a validator was the owner of a given key on a given session, and what the",
                  " active epoch index was during that session."
                ]
              }
            ]
          },
          "calls": 87,
          "constants": [
            {
              "name": "EpochDuration",
              "type": 11,
              "value": [
                96,
                9,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of time, in slots, that each epoch should last.",
                " NOTE: Currently it is not possible to change the epoch duration after",
                " the chain has started. Attempting to do so will brick block production."
              ]
            },
            {
              "name": "ExpectedBlockTime",
              "type": 11,
              "value": [
                112,
                23,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The expected average block time at which BABE should be creating",
                " blocks. Since BABE is probabilistic it is not trivial to figure out",
                " what the expected average block time should be based on the slot",
                " duration and the security parameter `c` (where `1 - c` represents",
                " the probability of a slot being empty)."
              ]
            },
            {
              "name": "MaxAuthorities",
              "type": 4,
              "value": [
                160,
                134,
                1,
                0
              ],
              "docs": [
                " Max number of authorities allowed"
              ]
            }
          ],
          "errors": 520,
          "index": 2
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "items": [
              {
                "name": "Now",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 11
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 44
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": 98,
          "constants": [
            {
              "name": "MinimumPeriod",
              "type": 11,
              "value": [
                184,
                11,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "index": 3
        },
        {
          "name": "Indices",
          "storage": {
            "prefix": "Indices",
            "items": [
              {
                "name": "Accounts",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 4,
                    "value": 521
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The lookup from index to account."
                ]
              }
            ]
          },
          "calls": 99,
          "events": 36,
          "constants": [
            {
              "name": "Deposit",
              "type": 6,
              "value": [
                0,
                232,
                118,
                72,
                23,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The deposit needed for reserving an index."
              ]
            }
          ],
          "errors": 522,
          "index": 4
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 6
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "InactiveIssuance",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 6
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units of outstanding deactivated balance in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  128
                ],
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 0,
                    "value": 523
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 0,
                    "value": 527
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "Holds",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 0,
                    "value": 530
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Holds on account balances."
                ]
              },
              {
                "name": "Freezes",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 0,
                    "value": 530
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Freeze locks on account balances."
                ]
              }
            ]
          },
          "calls": 103,
          "events": 37,
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": 6,
              "value": [
                0,
                228,
                11,
                84,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
                "",
                " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
                " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
                " In case you have multiple sources of provider references, you may also get unexpected",
                " behaviour if you set this to zero.",
                "",
                " Bottom line: Do yourself a favour and make it at least one!"
              ]
            },
            {
              "name": "MaxLocks",
              "type": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "type": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            },
            {
              "name": "MaxHolds",
              "type": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of holds that can exist on an account at any time."
              ]
            },
            {
              "name": "MaxFreezes",
              "type": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of individual freeze locks that can exist on an account at any time."
              ]
            }
          ],
          "errors": 533,
          "index": 5
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "items": [
              {
                "name": "NextFeeMultiplier",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 534
                },
                "fallback": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 535
                },
                "fallback": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "events": 39,
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "type": 2,
              "value": [
                5
              ],
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            }
          ],
          "index": 32
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "items": [
              {
                "name": "Author",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 0
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Author of current block."
                ]
              }
            ]
          },
          "constants": [],
          "index": 6
        },
        {
          "name": "Staking",
          "storage": {
            "prefix": "Staking",
            "items": [
              {
                "name": "ValidatorCount",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The ideal number of active validators."
                ]
              },
              {
                "name": "MinimumValidatorCount",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Minimum number of staking participants before emergency conditions are imposed."
                ]
              },
              {
                "name": "Invulnerables",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 104
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                  " easy to initialize and the performance hit is minimal (we expect no more than four",
                  " invulnerables) and restricted to testnets."
                ]
              },
              {
                "name": "Bonded",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 0,
                    "value": 0
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Map from all locked \"stash\" accounts to the controller account.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "MinNominatorBond",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 6
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum active bond to become and maintain the role of a nominator."
                ]
              },
              {
                "name": "MinValidatorBond",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 6
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum active bond to become and maintain the role of a validator."
                ]
              },
              {
                "name": "MinimumActiveStake",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 6
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum active nominator stake of the last successful election."
                ]
              },
              {
                "name": "MinCommission",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 41
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum amount of commission that validators can set.",
                  "",
                  " If set to `0`, no limit exists."
                ]
              },
              {
                "name": "Ledger",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 0,
                    "value": 536
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."
                ]
              },
              {
                "name": "Payee",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 0,
                    "value": 106
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Where the reward payment should be made. Keyed by stash.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "Validators",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 0,
                    "value": 42
                  }
                },
                "fallback": [
                  0,
                  0
                ],
                "docs": [
                  " The map from (wannabe) validator stash key to the preferences of that validator.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "CounterForValidators",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "MaxValidatorsCount",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The maximum validator count before we stop allowing new validators to join.",
                  "",
                  " When this value is not set, no limits are enforced."
                ]
              },
              {
                "name": "Nominators",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 0,
                    "value": 541
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The map from nominator stash key to their nomination preferences, namely the validators that",
                  " they wish to support.",
                  "",
                  " Note that the keys of this storage map might become non-decodable in case the",
                  " [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators",
                  " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`",
                  " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable",
                  " nominators will effectively not-exist, until they re-submit their preferences such that it",
                  " is within the bounds of the newly set `Config::MaxNominations`.",
                  "",
                  " This implies that `::iter_keys().count()` and `::iter().count()` might return different",
                  " values for this map. Moreover, the main `::count()` is aligned with the former, namely the",
                  " number of keys that exist.",
                  "",
                  " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via",
                  " [`Call::chill_other`] dispatchable by anyone.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "CounterForNominators",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "MaxNominatorsCount",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The maximum nominator count before we stop allowing new validators to join.",
                  "",
                  " When this value is not set, no limits are enforced."
                ]
              },
              {
                "name": "CurrentEra",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The current era index.",
                  "",
                  " This is the latest planned era, depending on how the Session pallet queues the validator",
                  " set, it might be active or not."
                ]
              },
              {
                "name": "ActiveEra",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 543
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The active era information, it holds index and start.",
                  "",
                  " The active era is the era being currently rewarded. Validator set of this era must be",
                  " equal to [`SessionInterface::validators`]."
                ]
              },
              {
                "name": "ErasStartSessionIndex",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The session index at which the era start for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Note: This tracks the starting session (i.e. session index when era start being active)",
                  " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
                ]
              },
              {
                "name": "ErasStakers",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 545,
                    "value": 59
                  }
                },
                "fallback": [
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Exposure of validator at era.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasStakersClipped",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 545,
                    "value": 59
                  }
                },
                "fallback": [
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Clipped Exposure of validator at era.",
                  "",
                  " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                  " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
                  " (Note: the field `total` and `own` of the exposure remains unchanged).",
                  " This is used to limit the i/o cost for the nominator payout.",
                  "",
                  " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasValidatorPrefs",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 545,
                    "value": 42
                  }
                },
                "fallback": [
                  0,
                  0
                ],
                "docs": [
                  " Similar to `ErasStakers`, this holds the preferences of validators.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras."
                ]
              },
              {
                "name": "ErasValidatorReward",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 6
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The total validator era payout for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Eras that haven't finished yet or has been removed doesn't have reward."
                ]
              },
              {
                "name": "ErasRewardPoints",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 546
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Rewards for the last `HISTORY_DEPTH` eras.",
                  " If reward hasn't been set or has been removed then 0 reward is returned."
                ]
              },
              {
                "name": "ErasTotalStake",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 6
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total amount staked for the last `HISTORY_DEPTH` eras.",
                  " If total hasn't been set or has been removed then 0 stake is returned."
                ]
              },
              {
                "name": "ForceEra",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 45
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Mode of era forcing."
                ]
              },
              {
                "name": "SlashRewardFraction",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 41
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The percentage of the slash that is distributed to reporters.",
                  "",
                  " The rest of the slashed value is handled by the `Slash`."
                ]
              },
              {
                "name": "CanceledSlashPayout",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 6
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The amount of currency given to reporters of a slash event which was",
                  " canceled by extraordinary circumstances (e.g. governance)."
                ]
              },
              {
                "name": "UnappliedSlashes",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 550
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " All unapplied slashes that are queued for later."
                ]
              },
              {
                "name": "BondedEras",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 481
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " A mapping from still-bonded eras to the first session index of that era.",
                  "",
                  " Must contains information for eras for the range:",
                  " `[active_era - bounding_duration; active_era]`"
                ]
              },
              {
                "name": "ValidatorSlashInEra",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 545,
                    "value": 552
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " All slashing events on validators, mapped by era to the highest slash proportion",
                  " and slash value of the era."
                ]
              },
              {
                "name": "NominatorSlashInEra",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 545,
                    "value": 6
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " All slashing events on nominators, mapped by era to the highest slash value of the era."
                ]
              },
              {
                "name": "SlashingSpans",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 0,
                    "value": 553
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Slashing spans for stash accounts."
                ]
              },
              {
                "name": "SpanSlash",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 549,
                    "value": 554
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Records information about the maximum slash of a stash within a slashing span,",
                  " as well as how much reward has been paid out."
                ]
              },
              {
                "name": "CurrentPlannedSession",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The last planned session scheduled by the session pallet.",
                  "",
                  " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
                ]
              },
              {
                "name": "OffendingValidators",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 555
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Indices of validators that have offended in the active era and whether they are currently",
                  " disabled.",
                  "",
                  " This value should be a superset of disabled validators since not all offences lead to the",
                  " validator being disabled (if there was no slash). This is needed to track the percentage of",
                  " validators that have offended in the current era, ensuring a new era is forced if",
                  " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find",
                  " whether a given validator has previously offended using binary search. It gets cleared when",
                  " the era ends."
                ]
              },
              {
                "name": "ChillThreshold",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 108
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The threshold for when users can start calling `chill_other` for other validators /",
                  " nominators. The threshold is compared to the actual number of validators / nominators",
                  " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
                ]
              }
            ]
          },
          "calls": 105,
          "events": 40,
          "constants": [
            {
              "name": "MaxNominations",
              "type": 4,
              "value": [
                16,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of nominations per nominator."
              ]
            },
            {
              "name": "HistoryDepth",
              "type": 4,
              "value": [
                84,
                0,
                0,
                0
              ],
              "docs": [
                " Number of eras to keep in history.",
                "",
                " Following information is kept for eras in `[current_era -",
                " HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,",
                " `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,",
                " `ErasTotalStake`, `ErasStartSessionIndex`,",
                " `StakingLedger.claimed_rewards`.",
                "",
                " Must be more than the number of eras delayed by session.",
                " I.e. active era must always be in history. I.e. `active_era >",
                " current_era - history_depth` must be guaranteed.",
                "",
                " If migrating an existing pallet from storage value to config value,",
                " this should be set to same value or greater as in storage.",
                "",
                " Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`",
                " item `StakingLedger.claimed_rewards`. Setting this value lower than",
                " the existing value can lead to inconsistencies in the",
                " `StakingLedger` and will need to be handled properly in a migration.",
                " The test `reducing_history_depth_abrupt` shows this effect."
              ]
            },
            {
              "name": "SessionsPerEra",
              "type": 4,
              "value": [
                6,
                0,
                0,
                0
              ],
              "docs": [
                " Number of sessions per era."
              ]
            },
            {
              "name": "BondingDuration",
              "type": 4,
              "value": [
                28,
                0,
                0,
                0
              ],
              "docs": [
                " Number of eras that staked funds must remain bonded for."
              ]
            },
            {
              "name": "SlashDeferDuration",
              "type": 4,
              "value": [
                27,
                0,
                0,
                0
              ],
              "docs": [
                " Number of eras that slashes are deferred by, after computation.",
                "",
                " This should be less than the bonding duration. Set to 0 if slashes",
                " should be applied immediately, without opportunity for intervention."
              ]
            },
            {
              "name": "MaxNominatorRewardedPerValidator",
              "type": 4,
              "value": [
                0,
                2,
                0,
                0
              ],
              "docs": [
                " The maximum number of nominators rewarded for each validator.",
                "",
                " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can",
                " claim their reward. This used to limit the i/o cost for the nominator payout."
              ]
            },
            {
              "name": "MaxUnlockingChunks",
              "type": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of `unlocking` chunks a [`StakingLedger`] can",
                " have. Effectively determines how many unique eras a staker may be",
                " unbonding in.",
                "",
                " Note: `MaxUnlockingChunks` is used as the upper bound for the",
                " `BoundedVec` item `StakingLedger.unlocking`. Setting this value",
                " lower than the existing value can lead to inconsistencies in the",
                " `StakingLedger` and will need to be handled properly in a runtime",
                " migration. The test `reducing_max_unlocking_chunks_abrupt` shows",
                " this effect."
              ]
            }
          ],
          "errors": 557,
          "index": 7
        },
        {
          "name": "Offences",
          "storage": {
            "prefix": "Offences",
            "items": [
              {
                "name": "Reports",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 12,
                    "value": 558
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The primary structure that holds all offence records keyed by report identifiers."
                ]
              },
              {
                "name": "ConcurrentReportsIndex",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 559,
                    "value": 480
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " A vector of reports of the same kind that happened at the same time slot."
                ]
              }
            ]
          },
          "events": 46,
          "constants": [],
          "index": 8
        },
        {
          "name": "Historical",
          "constants": [],
          "index": 33
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "items": [
              {
                "name": "Validators",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 104
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The current set of validators."
                ]
              },
              {
                "name": "CurrentIndex",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current index of the session."
                ]
              },
              {
                "name": "QueuedChanged",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 44
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 560
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 109
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The vec is always kept sorted so that we can find whether a given validator is",
                  " disabled using binary search. It gets cleared when `on_session_ending` returns",
                  " a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 0,
                    "value": 115
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The next session keys for a validator."
                ]
              },
              {
                "name": "KeyOwner",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 562,
                    "value": 0
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                ]
              }
            ]
          },
          "calls": 114,
          "events": 48,
          "constants": [],
          "errors": 564,
          "index": 9
        },
        {
          "name": "Grandpa",
          "storage": {
            "prefix": "Grandpa",
            "items": [
              {
                "name": "State",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 565
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " State of the current authority set."
                ]
              },
              {
                "name": "PendingChange",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 566
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Pending change: (signaled at, scheduled change)."
                ]
              },
              {
                "name": "NextForced",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " next block number where we can force a change."
                ]
              },
              {
                "name": "Stalled",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 31
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " `true` if we are currently stalled."
                ]
              },
              {
                "name": "CurrentSetId",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 11
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of changes (both in terms of keys and underlying economic responsibilities)",
                  " in the \"set\" of Grandpa validators from genesis."
                ]
              },
              {
                "name": "SetIdSession",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 11,
                    "value": 4
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                  " members were responsible.",
                  "",
                  " This is only used for validating equivocation proofs. An equivocation proof must",
                  " contains a key-ownership proof for a given session, therefore we need a way to tie",
                  " together sessions and GRANDPA set ids, i.e. we need to validate that a validator",
                  " was the owner of a given key on a given session, and what the active set ID was",
                  " during that session.",
                  "",
                  " TWOX-NOTE: `SetId` is not under user control."
                ]
              }
            ]
          },
          "calls": 119,
          "events": 49,
          "constants": [
            {
              "name": "MaxAuthorities",
              "type": 4,
              "value": [
                160,
                134,
                1,
                0
              ],
              "docs": [
                " Max Authorities in use"
              ]
            },
            {
              "name": "MaxSetIdSessionEntries",
              "type": 11,
              "value": [
                168,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of entries to keep in the set id to session index mapping.",
                "",
                " Since the `SetIdSession` map is only used for validating equivocations this",
                " value should relate to the bonding duration of whatever staking system is",
                " being used (if any). If equivocation handling is not enabled then this value",
                " can be zero."
              ]
            }
          ],
          "errors": 568,
          "index": 11
        },
        {
          "name": "ImOnline",
          "storage": {
            "prefix": "ImOnline",
            "items": [
              {
                "name": "HeartbeatAfter",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The block number after which it's ok to send heartbeats in the current",
                  " session.",
                  "",
                  " At the beginning of each session we set this to a value that should fall",
                  " roughly in the middle of the session duration. The idea is to first wait for",
                  " the validators to produce a block in the current session, so that the",
                  " heartbeat later on will not be necessary.",
                  "",
                  " This value will only be used as a fallback if we fail to get a proper session",
                  " progress estimate from `NextSessionRotation`, as those estimates should be",
                  " more accurate then the value we calculate for `HeartbeatAfter`."
                ]
              },
              {
                "name": "Keys",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 569
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The current set of keys that may issue a heartbeat."
                ]
              },
              {
                "name": "ReceivedHeartbeats",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 31,
                    "value": 571
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to",
                  " `WrapperOpaque<BoundedOpaqueNetworkState>`."
                ]
              },
              {
                "name": "AuthoredBlocks",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 545,
                    "value": 4
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " For each session index, we keep a mapping of `ValidatorId<T>` to the",
                  " number of blocks authored by the given authority."
                ]
              }
            ]
          },
          "calls": 131,
          "events": 54,
          "constants": [
            {
              "name": "UnsignedPriority",
              "type": 11,
              "value": [
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255
              ],
              "docs": [
                " A configuration for base priority of unsigned transactions.",
                "",
                " This is exposed so that it can be tuned for particular runtime, when",
                " multiple pallets send unsigned transactions."
              ]
            }
          ],
          "errors": 576,
          "index": 12
        },
        {
          "name": "AuthorityDiscovery",
          "constants": [],
          "index": 13
        },
        {
          "name": "Democracy",
          "storage": {
            "prefix": "Democracy",
            "items": [
              {
                "name": "PublicPropCount",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of (public) proposals that have been made so far."
                ]
              },
              {
                "name": "PublicProps",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 577
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The public proposals. Unsorted. The second item is the proposal."
                ]
              },
              {
                "name": "DepositOf",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 580
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Those who have locked a deposit.",
                  "",
                  " TWOX-NOTE: Safe, as increasing integer keys are safe."
                ]
              },
              {
                "name": "ReferendumCount",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ]
              },
              {
                "name": "LowestUnbaked",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The lowest referendum index representing an unbaked referendum. Equal to",
                  " `ReferendumCount` if there isn't a unbaked referendum."
                ]
              },
              {
                "name": "ReferendumInfoOf",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 582
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Information concerning any given referendum.",
                  "",
                  " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."
                ]
              },
              {
                "name": "VotingOf",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 0,
                    "value": 585
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " All votes for a particular voter. We store the balance for the number of votes that we",
                  " have recorded. The second item is the total amount of delegations, that will be added.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
                ]
              },
              {
                "name": "LastTabledWasExternal",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 44
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " True if the last referendum tabled was submitted externally. False if it was a public",
                  " proposal."
                ]
              },
              {
                "name": "NextExternal",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 591
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The referendum to be tabled whenever it would be valid to table an external proposal.",
                  " This happens when a referendum needs to be tabled and one of two conditions are met:",
                  " - `LastTabledWasExternal` is `false`; or",
                  " - `PublicProps` is empty."
                ]
              },
              {
                "name": "Blacklist",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 12,
                    "value": 592
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                  " (until when it may not be resubmitted) and who vetoed it."
                ]
              },
              {
                "name": "Cancellations",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 12,
                    "value": 44
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Record of all proposals that have been subject to emergency cancellation."
                ]
              },
              {
                "name": "MetadataOf",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 67,
                    "value": 12
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " General information concerning any proposal or referendum.",
                  " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
                  " dump or IPFS hash of a JSON file.",
                  "",
                  " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                  " large preimages."
                ]
              }
            ]
          },
          "calls": 139,
          "events": 63,
          "constants": [
            {
              "name": "EnactmentPeriod",
              "type": 4,
              "value": [
                0,
                39,
                6,
                0
              ],
              "docs": [
                " The period between a proposal being approved and enacted.",
                "",
                " It should generally be a little more than the unstake period to ensure that",
                " voting stakers have an opportunity to remove themselves from the system in the case",
                " where they are on the losing side of a vote."
              ]
            },
            {
              "name": "LaunchPeriod",
              "type": 4,
              "value": [
                0,
                39,
                6,
                0
              ],
              "docs": [
                " How often (in blocks) new public referenda are launched."
              ]
            },
            {
              "name": "VotingPeriod",
              "type": 4,
              "value": [
                0,
                39,
                6,
                0
              ],
              "docs": [
                " How often (in blocks) to check for new votes."
              ]
            },
            {
              "name": "VoteLockingPeriod",
              "type": 4,
              "value": [
                0,
                39,
                6,
                0
              ],
              "docs": [
                " The minimum period of vote locking.",
                "",
                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                " those successful voters are locked into the consequences that their votes entail."
              ]
            },
            {
              "name": "MinimumDeposit",
              "type": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ]
            },
            {
              "name": "InstantAllowed",
              "type": 44,
              "value": [
                1
              ],
              "docs": [
                " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
                " want to set this permanently to `false`, others may want to condition it on things such",
                " as an upgrade having happened recently."
              ]
            },
            {
              "name": "FastTrackVotingPeriod",
              "type": 4,
              "value": [
                8,
                7,
                0,
                0
              ],
              "docs": [
                " Minimum voting period allowed for a fast-track referendum."
              ]
            },
            {
              "name": "CooloffPeriod",
              "type": 4,
              "value": [
                192,
                137,
                1,
                0
              ],
              "docs": [
                " Period in blocks where an external proposal may not be re-submitted after being vetoed."
              ]
            },
            {
              "name": "MaxVotes",
              "type": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of votes for an account.",
                "",
                " Also used to compute weight, an overly big value can",
                " lead to extrinsic with very big weight: see `delegate` for instance."
              ]
            },
            {
              "name": "MaxProposals",
              "type": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of public proposals that can exist at any time."
              ]
            },
            {
              "name": "MaxDeposits",
              "type": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of deposits a public proposal may have at any time."
              ]
            },
            {
              "name": "MaxBlacklisted",
              "type": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of items which can be blacklisted."
              ]
            }
          ],
          "errors": 593,
          "index": 14
        },
        {
          "name": "Council",
          "storage": {
            "prefix": "Council",
            "items": [
              {
                "name": "Proposals",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 594
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 12,
                    "value": 79
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 12,
                    "value": 595
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 104
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 0
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": 143,
          "events": 68,
          "constants": [
            {
              "name": "MaxProposalWeight",
              "type": 9,
              "value": [
                7,
                0,
                16,
                165,
                212,
                232,
                19,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                127
              ],
              "docs": [
                " The maximum weight of a dispatch call that can be proposed and executed."
              ]
            }
          ],
          "errors": 596,
          "index": 15
        },
        {
          "name": "TechnicalCommittee",
          "storage": {
            "prefix": "TechnicalCommittee",
            "items": [
              {
                "name": "Proposals",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 597
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 12,
                    "value": 79
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 12,
                    "value": 595
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 104
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 0
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": 145,
          "events": 69,
          "constants": [
            {
              "name": "MaxProposalWeight",
              "type": 9,
              "value": [
                7,
                0,
                16,
                165,
                212,
                232,
                19,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                127
              ],
              "docs": [
                " The maximum weight of a dispatch call that can be proposed and executed."
              ]
            }
          ],
          "errors": 598,
          "index": 16
        },
        {
          "name": "PhragmenElection",
          "storage": {
            "prefix": "PhragmenElection",
            "items": [
              {
                "name": "Members",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 599
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The current elected members.",
                  "",
                  " Invariant: Always sorted based on account id."
                ]
              },
              {
                "name": "RunnersUp",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 599
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The current reserved runners-up.",
                  "",
                  " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the",
                  " last (i.e. _best_) runner-up will be replaced."
                ]
              },
              {
                "name": "Candidates",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 71
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The present candidate list. A current member or runner-up can never enter this vector",
                  " and is always implicitly assumed to be a candidate.",
                  "",
                  " Second element is the deposit.",
                  "",
                  " Invariant: Always sorted based on account id."
                ]
              },
              {
                "name": "ElectionRounds",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total number of vote rounds that have happened, excluding the upcoming one."
                ]
              },
              {
                "name": "Voting",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 0,
                    "value": 601
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Votes and locked stake of a particular voter.",
                  "",
                  " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."
                ]
              }
            ]
          },
          "calls": 146,
          "events": 70,
          "constants": [
            {
              "name": "PalletId",
              "type": 198,
              "value": [
                112,
                104,
                114,
                101,
                108,
                101,
                99,
                116
              ],
              "docs": [
                " Identifier for the elections-phragmen pallet's lock"
              ]
            },
            {
              "name": "CandidacyBond",
              "type": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " How much should be locked up in order to submit one's candidacy."
              ]
            },
            {
              "name": "VotingBondBase",
              "type": 6,
              "value": [
                0,
                112,
                19,
                183,
                46,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Base deposit associated with voting.",
                "",
                " This should be sensibly high to economically ensure the pallet cannot be attacked by",
                " creating a gigantic number of votes."
              ]
            },
            {
              "name": "VotingBondFactor",
              "type": 6,
              "value": [
                0,
                208,
                18,
                19,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of bond that need to be locked for each vote (32 bytes)."
              ]
            },
            {
              "name": "DesiredMembers",
              "type": 4,
              "value": [
                13,
                0,
                0,
                0
              ],
              "docs": [
                " Number of members to elect."
              ]
            },
            {
              "name": "DesiredRunnersUp",
              "type": 4,
              "value": [
                20,
                0,
                0,
                0
              ],
              "docs": [
                " Number of runners_up to keep."
              ]
            },
            {
              "name": "TermDuration",
              "type": 4,
              "value": [
                192,
                137,
                1,
                0
              ],
              "docs": [
                " How long each seat is kept. This defines the next block number at which an election",
                " round will happen. If set to zero, no elections are ever triggered and the module will",
                " be in passive mode."
              ]
            },
            {
              "name": "MaxCandidates",
              "type": 4,
              "value": [
                232,
                3,
                0,
                0
              ],
              "docs": [
                " The maximum number of candidates in a phragmen election.",
                "",
                " Warning: This impacts the size of the election which is run onchain. Chose wisely, and",
                " consider how it will impact `T::WeightInfo::election_phragmen`.",
                "",
                " When this limit is reached no more candidates are accepted in the election."
              ]
            },
            {
              "name": "MaxVoters",
              "type": 4,
              "value": [
                16,
                39,
                0,
                0
              ],
              "docs": [
                " The maximum number of voters to allow in a phragmen election.",
                "",
                " Warning: This impacts the size of the election which is run onchain. Chose wisely, and",
                " consider how it will impact `T::WeightInfo::election_phragmen`.",
                "",
                " When the limit is reached the new voters are ignored."
              ]
            },
            {
              "name": "MaxVotesPerVoter",
              "type": 4,
              "value": [
                16,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum numbers of votes per voter.",
                "",
                " Warning: This impacts the size of the election which is run onchain. Chose wisely, and",
                " consider how it will impact `T::WeightInfo::election_phragmen`."
              ]
            }
          ],
          "errors": 602,
          "index": 17
        },
        {
          "name": "TechnicalMembership",
          "storage": {
            "prefix": "TechnicalMembership",
            "items": [
              {
                "name": "Members",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 603
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The current membership, stored as an ordered Vec."
                ]
              },
              {
                "name": "Prime",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 0
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The current prime member, if one exists."
                ]
              }
            ]
          },
          "calls": 148,
          "events": 73,
          "constants": [],
          "errors": 604,
          "index": 18
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "items": [
              {
                "name": "ProposalCount",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of proposals that have been made."
                ]
              },
              {
                "name": "Proposals",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 605
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Proposals that have been made."
                ]
              },
              {
                "name": "Deactivated",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 6
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The amount which has been reported as inactive to Currency."
                ]
              },
              {
                "name": "Approvals",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 606
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": 149,
          "events": 74,
          "constants": [
            {
              "name": "ProposalBond",
              "type": 607,
              "value": [
                80,
                195,
                0,
                0
              ],
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "type": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "ProposalBondMaximum",
              "type": 608,
              "value": [
                1,
                0,
                80,
                57,
                39,
                140,
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "type": 4,
              "value": [
                0,
                70,
                5,
                0
              ],
              "docs": [
                " Period between successive spends."
              ]
            },
            {
              "name": "Burn",
              "type": 607,
              "value": [
                16,
                39,
                0,
                0
              ],
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            },
            {
              "name": "PalletId",
              "type": 609,
              "value": [
                112,
                121,
                47,
                116,
                114,
                115,
                114,
                121
              ],
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxApprovals",
              "type": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of approvals that can wait in the spending queue.",
                "",
                " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
              ]
            }
          ],
          "errors": 610,
          "index": 19
        },
        {
          "name": "ConvictionVoting",
          "storage": {
            "prefix": "ConvictionVoting",
            "items": [
              {
                "name": "VotingFor",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 611,
                    "value": 612
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " All voting for a particular voter in a particular voting class. We store the balance for the",
                  " number of votes that we have recorded."
                ]
              },
              {
                "name": "ClassLocksFor",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 0,
                    "value": 620
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The voting classes which have a non-zero lock requirement and the lock amounts which they",
                  " require. The actual amount locked on behalf of this pallet should always be the maximum of",
                  " this list."
                ]
              }
            ]
          },
          "calls": 150,
          "events": 75,
          "constants": [
            {
              "name": "MaxVotes",
              "type": 4,
              "value": [
                0,
                2,
                0,
                0
              ],
              "docs": [
                " The maximum number of concurrent votes an account may have.",
                "",
                " Also used to compute weight, an overly large value can lead to extrinsics with large",
                " weight estimation: see `delegate` for instance."
              ]
            },
            {
              "name": "VoteLockingPeriod",
              "type": 4,
              "value": [
                192,
                137,
                1,
                0
              ],
              "docs": [
                " The minimum period of vote locking.",
                "",
                " It should be no shorter than enactment period to ensure that in the case of an approval,",
                " those successful voters are locked into the consequences that their votes entail."
              ]
            }
          ],
          "errors": 623,
          "index": 20
        },
        {
          "name": "Referenda",
          "storage": {
            "prefix": "Referenda",
            "items": [
              {
                "name": "ReferendumCount",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The next free referendum index, aka the number of referenda started so far."
                ]
              },
              {
                "name": "ReferendumInfoFor",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 4,
                    "value": 624
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Information concerning any given referendum."
                ]
              },
              {
                "name": "TrackQueue",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 77,
                    "value": 632
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                  " conviction-weighted approvals.",
                  "",
                  " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
                ]
              },
              {
                "name": "DecidingCount",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 77,
                    "value": 4
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of referenda being decided currently."
                ]
              },
              {
                "name": "MetadataOf",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 4,
                    "value": 12
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The metadata is a general information concerning the referendum.",
                  " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
                  " dump or IPFS hash of a JSON file.",
                  "",
                  " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                  " large preimages."
                ]
              }
            ]
          },
          "calls": 155,
          "events": 76,
          "constants": [
            {
              "name": "SubmissionDeposit",
              "type": 6,
              "value": [
                0,
                228,
                11,
                84,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ]
            },
            {
              "name": "MaxQueued",
              "type": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum size of the referendum queue for a single track."
              ]
            },
            {
              "name": "UndecidingTimeout",
              "type": 4,
              "value": [
                128,
                19,
                3,
                0
              ],
              "docs": [
                " The number of blocks after submission that a referendum must begin being decided by.",
                " Once this passes, then anyone may cancel the referendum."
              ]
            },
            {
              "name": "AlarmInterval",
              "type": 4,
              "value": [
                1,
                0,
                0,
                0
              ],
              "docs": [
                " Quantization level for the referendum wakeup scheduler. A higher number will result in",
                " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
                " automatic referendum status changes. Explicit servicing instructions are unaffected."
              ]
            },
            {
              "name": "Tracks",
              "type": 635,
              "value": [
                60,
                0,
                0,
                16,
                114,
                111,
                111,
                116,
                1,
                0,
                0,
                0,
                0,
                128,
                198,
                164,
                126,
                141,
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                0,
                39,
                6,
                0,
                64,
                56,
                0,
                0,
                64,
                56,
                0,
                0,
                2,
                144,
                215,
                62,
                13,
                0,
                0,
                0,
                0,
                87,
                67,
                222,
                19,
                0,
                0,
                0,
                0,
                84,
                67,
                222,
                19,
                0,
                0,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                101,
                205,
                29,
                1,
                0,
                72,
                119,
                104,
                105,
                116,
                101,
                108,
                105,
                115,
                116,
                101,
                100,
                95,
                99,
                97,
                108,
                108,
                101,
                114,
                100,
                0,
                0,
                0,
                0,
                64,
                122,
                16,
                243,
                90,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                44,
                1,
                0,
                0,
                0,
                39,
                6,
                0,
                100,
                0,
                0,
                0,
                100,
                0,
                0,
                0,
                2,
                236,
                151,
                37,
                16,
                0,
                0,
                0,
                0,
                123,
                87,
                60,
                23,
                0,
                0,
                0,
                0,
                66,
                57,
                47,
                18,
                0,
                0,
                0,
                0,
                2,
                14,
                0,
                132,
                0,
                0,
                0,
                0,
                0,
                214,
                230,
                31,
                1,
                0,
                0,
                0,
                0,
                57,
                98,
                121,
                2,
                0,
                0,
                0,
                0,
                10,
                0,
                52,
                115,
                116,
                97,
                107,
                105,
                110,
                103,
                95,
                97,
                100,
                109,
                105,
                110,
                10,
                0,
                0,
                0,
                0,
                32,
                61,
                136,
                121,
                45,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                0,
                39,
                6,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                11,
                0,
                36,
                116,
                114,
                101,
                97,
                115,
                117,
                114,
                101,
                114,
                10,
                0,
                0,
                0,
                0,
                160,
                114,
                78,
                24,
                9,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                0,
                39,
                6,
                0,
                8,
                7,
                0,
                0,
                64,
                56,
                0,
                0,
                2,
                144,
                215,
                62,
                13,
                0,
                0,
                0,
                0,
                87,
                67,
                222,
                19,
                0,
                0,
                0,
                0,
                84,
                67,
                222,
                19,
                0,
                0,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                0,
                0,
                0,
                0,
                101,
                205,
                29,
                12,
                0,
                44,
                108,
                101,
                97,
                115,
                101,
                95,
                97,
                100,
                109,
                105,
                110,
                10,
                0,
                0,
                0,
                0,
                32,
                61,
                136,
                121,
                45,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                0,
                39,
                6,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                13,
                0,
                64,
                102,
                101,
                108,
                108,
                111,
                119,
                115,
                104,
                105,
                112,
                95,
                97,
                100,
                109,
                105,
                110,
                10,
                0,
                0,
                0,
                0,
                32,
                61,
                136,
                121,
                45,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                0,
                39,
                6,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                14,
                0,
                52,
                103,
                101,
                110,
                101,
                114,
                97,
                108,
                95,
                97,
                100,
                109,
                105,
                110,
                10,
                0,
                0,
                0,
                0,
                32,
                61,
                136,
                121,
                45,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                0,
                39,
                6,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                2,
                144,
                215,
                62,
                13,
                0,
                0,
                0,
                0,
                87,
                67,
                222,
                19,
                0,
                0,
                0,
                0,
                84,
                67,
                222,
                19,
                0,
                0,
                0,
                0,
                2,
                89,
                162,
                244,
                2,
                0,
                0,
                0,
                0,
                163,
                41,
                107,
                5,
                0,
                0,
                0,
                0,
                46,
                107,
                74,
                253,
                255,
                255,
                255,
                255,
                15,
                0,
                52,
                97,
                117,
                99,
                116,
                105,
                111,
                110,
                95,
                97,
                100,
                109,
                105,
                110,
                10,
                0,
                0,
                0,
                0,
                32,
                61,
                136,
                121,
                45,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                0,
                39,
                6,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                2,
                144,
                215,
                62,
                13,
                0,
                0,
                0,
                0,
                87,
                67,
                222,
                19,
                0,
                0,
                0,
                0,
                84,
                67,
                222,
                19,
                0,
                0,
                0,
                0,
                2,
                89,
                162,
                244,
                2,
                0,
                0,
                0,
                0,
                163,
                41,
                107,
                5,
                0,
                0,
                0,
                0,
                46,
                107,
                74,
                253,
                255,
                255,
                255,
                255,
                20,
                0,
                80,
                114,
                101,
                102,
                101,
                114,
                101,
                110,
                100,
                117,
                109,
                95,
                99,
                97,
                110,
                99,
                101,
                108,
                108,
                101,
                114,
                232,
                3,
                0,
                0,
                0,
                64,
                122,
                16,
                243,
                90,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                192,
                137,
                1,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                21,
                0,
                68,
                114,
                101,
                102,
                101,
                114,
                101,
                110,
                100,
                117,
                109,
                95,
                107,
                105,
                108,
                108,
                101,
                114,
                232,
                3,
                0,
                0,
                0,
                64,
                99,
                82,
                191,
                198,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                176,
                4,
                0,
                0,
                0,
                39,
                6,
                0,
                8,
                7,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                30,
                0,
                48,
                115,
                109,
                97,
                108,
                108,
                95,
                116,
                105,
                112,
                112,
                101,
                114,
                200,
                0,
                0,
                0,
                0,
                228,
                11,
                84,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                10,
                0,
                0,
                0,
                192,
                137,
                1,
                0,
                100,
                0,
                0,
                0,
                10,
                0,
                0,
                0,
                0,
                73,
                145,
                73,
                21,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                249,
                186,
                24,
                0,
                0,
                0,
                0,
                0,
                42,
                77,
                49,
                0,
                0,
                0,
                0,
                0,
                107,
                89,
                231,
                255,
                255,
                255,
                255,
                255,
                31,
                0,
                40,
                98,
                105,
                103,
                95,
                116,
                105,
                112,
                112,
                101,
                114,
                100,
                0,
                0,
                0,
                0,
                232,
                118,
                72,
                23,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                100,
                0,
                0,
                0,
                192,
                137,
                1,
                0,
                88,
                2,
                0,
                0,
                100,
                0,
                0,
                0,
                0,
                73,
                145,
                73,
                21,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                105,
                79,
                63,
                0,
                0,
                0,
                0,
                0,
                53,
                150,
                125,
                0,
                0,
                0,
                0,
                0,
                229,
                52,
                193,
                255,
                255,
                255,
                255,
                255,
                32,
                0,
                52,
                115,
                109,
                97,
                108,
                108,
                95,
                115,
                112,
                101,
                110,
                100,
                101,
                114,
                50,
                0,
                0,
                0,
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                96,
                9,
                0,
                0,
                0,
                39,
                6,
                0,
                32,
                28,
                0,
                0,
                64,
                56,
                0,
                0,
                0,
                201,
                67,
                48,
                36,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                93,
                111,
                120,
                0,
                0,
                0,
                0,
                0,
                232,
                46,
                237,
                0,
                0,
                0,
                0,
                0,
                140,
                104,
                137,
                255,
                255,
                255,
                255,
                255,
                33,
                0,
                56,
                109,
                101,
                100,
                105,
                117,
                109,
                95,
                115,
                112,
                101,
                110,
                100,
                101,
                114,
                50,
                0,
                0,
                0,
                0,
                32,
                74,
                169,
                209,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                96,
                9,
                0,
                0,
                0,
                39,
                6,
                0,
                64,
                56,
                0,
                0,
                64,
                56,
                0,
                0,
                0,
                91,
                1,
                246,
                48,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                17,
                97,
                219,
                0,
                0,
                0,
                0,
                0,
                191,
                209,
                170,
                1,
                0,
                0,
                0,
                0,
                32,
                151,
                42,
                255,
                255,
                255,
                255,
                255,
                34,
                0,
                44,
                98,
                105,
                103,
                95,
                115,
                112,
                101,
                110,
                100,
                101,
                114,
                50,
                0,
                0,
                0,
                0,
                64,
                148,
                82,
                163,
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                96,
                9,
                0,
                0,
                0,
                39,
                6,
                0,
                128,
                112,
                0,
                0,
                64,
                56,
                0,
                0,
                0,
                0,
                202,
                154,
                59,
                0,
                101,
                205,
                29,
                0,
                202,
                154,
                59,
                2,
                65,
                60,
                176,
                1,
                0,
                0,
                0,
                0,
                117,
                93,
                52,
                3,
                0,
                0,
                0,
                0,
                69,
                209,
                101,
                254,
                255,
                255,
                255,
                255
              ],
              "docs": [
                " Information concerning the different referendum tracks."
              ]
            }
          ],
          "errors": 641,
          "index": 21
        },
        {
          "name": "Whitelist",
          "storage": {
            "prefix": "Whitelist",
            "items": [
              {
                "name": "WhitelistedCall",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 12,
                    "value": 34
                  }
                },
                "fallback": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": 173,
          "events": 441,
          "constants": [],
          "errors": 642,
          "index": 23
        },
        {
          "name": "Claims",
          "storage": {
            "prefix": "Claims",
            "items": [
              {
                "name": "Claims",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 177,
                    "value": 6
                  }
                },
                "fallback": [
                  0
                ],
                "docs": []
              },
              {
                "name": "Total",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 6
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "Vesting",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 177,
                    "value": 179
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Vesting schedule for a claim.",
                  " First balance is the total amount that should be held for vesting.",
                  " Second balance is how much should be unlocked per block.",
                  " The block number is when the vesting should start."
                ]
              },
              {
                "name": "Signing",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 177,
                    "value": 181
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The statement kind that must be signed, if any."
                ]
              },
              {
                "name": "Preclaims",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 0,
                    "value": 177
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Pre-claimed Ethereum accounts, by the Account ID that they are claimed to."
                ]
              }
            ]
          },
          "calls": 174,
          "events": 446,
          "constants": [
            {
              "name": "Prefix",
              "type": 13,
              "value": [
                132,
                80,
                97,
                121,
                32,
                68,
                79,
                84,
                115,
                32,
                116,
                111,
                32,
                116,
                104,
                101,
                32,
                80,
                111,
                108,
                107,
                97,
                100,
                111,
                116,
                32,
                97,
                99,
                99,
                111,
                117,
                110,
                116,
                58
              ],
              "docs": []
            }
          ],
          "errors": 643,
          "index": 24
        },
        {
          "name": "Vesting",
          "storage": {
            "prefix": "Vesting",
            "items": [
              {
                "name": "Vesting",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 0,
                    "value": 644
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Information regarding the vesting of a given account."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 646
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " New networks start with latest version, as determined by the genesis build."
                ]
              }
            ]
          },
          "calls": 182,
          "events": 447,
          "constants": [
            {
              "name": "MinVestedTransfer",
              "type": 6,
              "value": [
                0,
                228,
                11,
                84,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount transferred to call `vested_transfer`."
              ]
            },
            {
              "name": "MaxVestingSchedules",
              "type": 4,
              "value": [
                28,
                0,
                0,
                0
              ],
              "docs": []
            }
          ],
          "errors": 647,
          "index": 25
        },
        {
          "name": "Utility",
          "calls": 184,
          "events": 448,
          "constants": [
            {
              "name": "batched_calls_limit",
              "type": 4,
              "value": [
                170,
                42,
                0,
                0
              ],
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "errors": 648,
          "index": 26
        },
        {
          "name": "Identity",
          "storage": {
            "prefix": "Identity",
            "items": [
              {
                "name": "IdentityOf",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 0,
                    "value": 649
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Information that is pertinent to identify the entity behind an account.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "SuperOf",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 0,
                    "value": 223
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The super-identity of an alternative \"sub\" identity together with its name, within that",
                  " context. If the account is not some other account's sub-identity, then just `None`."
                ]
              },
              {
                "name": "SubsOf",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 0,
                    "value": 653
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Alternative \"sub\" identities of this account.",
                  "",
                  " The first item is the deposit, the second is a vector of the accounts.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "Registrars",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 655
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The set of registrars. Not expected to get very big as can only be added through a",
                  " special origin (likely a council motion).",
                  "",
                  " The index into this can be cast to `RegistrarIndex` to get a valid value."
                ]
              }
            ]
          },
          "calls": 186,
          "events": 449,
          "constants": [
            {
              "name": "BasicDeposit",
              "type": 6,
              "value": [
                0,
                125,
                181,
                42,
                47,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit for a registered identity"
              ]
            },
            {
              "name": "FieldDeposit",
              "type": 6,
              "value": [
                0,
                205,
                86,
                39,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit per additional field for a registered identity."
              ]
            },
            {
              "name": "SubAccountDeposit",
              "type": 6,
              "value": [
                128,
                248,
                132,
                176,
                46,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit for a registered subaccount. This should account for the fact",
                " that one storage item's value will increase by the size of an account ID, and there will",
                " be another trie item whose value is the size of an account ID plus 32 bytes."
              ]
            },
            {
              "name": "MaxSubAccounts",
              "type": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of sub-accounts allowed per identified account."
              ]
            },
            {
              "name": "MaxAdditionalFields",
              "type": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
                " required to access an identity, but can be pretty high."
              ]
            },
            {
              "name": "MaxRegistrars",
              "type": 4,
              "value": [
                20,
                0,
                0,
                0
              ],
              "docs": [
                " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
                " of, e.g., updating judgements."
              ]
            }
          ],
          "errors": 659,
          "index": 28
        },
        {
          "name": "Proxy",
          "storage": {
            "prefix": "Proxy",
            "items": [
              {
                "name": "Proxies",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 0,
                    "value": 660
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The set of account proxies. Maps the account which has delegated to the accounts",
                  " which are being delegated to, together with the amount held on deposit."
                ]
              },
              {
                "name": "Announcements",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 0,
                    "value": 664
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The announcements made by the proxy (key)."
                ]
              }
            ]
          },
          "calls": 227,
          "events": 450,
          "constants": [
            {
              "name": "ProxyDepositBase",
              "type": 6,
              "value": [
                0,
                132,
                178,
                149,
                46,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating a proxy.",
                "",
                " This is held for an additional storage item whose value size is",
                " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "ProxyDepositFactor",
              "type": 6,
              "value": [
                128,
                102,
                171,
                19,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per proxy added.",
                "",
                " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
                " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
                " into account `32 + proxy_type.encode().len()` bytes of data."
              ]
            },
            {
              "name": "MaxProxies",
              "type": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of proxies allowed for a single account."
              ]
            },
            {
              "name": "MaxPending",
              "type": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of time-delayed announcements that are allowed to be pending."
              ]
            },
            {
              "name": "AnnouncementDepositBase",
              "type": 6,
              "value": [
                0,
                132,
                178,
                149,
                46,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating an announcement.",
                "",
                " This is held when a new storage item holding a `Balance` is created (typically 16",
                " bytes)."
              ]
            },
            {
              "name": "AnnouncementDepositFactor",
              "type": 6,
              "value": [
                0,
                205,
                86,
                39,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per announcement made.",
                "",
                " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
                " into a pre-existing storage value."
              ]
            }
          ],
          "errors": 668,
          "index": 29
        },
        {
          "name": "Multisig",
          "storage": {
            "prefix": "Multisig",
            "items": [
              {
                "name": "Multisigs",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 669,
                    "value": 670
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The set of open multisig operations."
                ]
              }
            ]
          },
          "calls": 230,
          "events": 451,
          "constants": [
            {
              "name": "DepositBase",
              "type": 6,
              "value": [
                0,
                140,
                97,
                197,
                46,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The base amount of currency needed to reserve for creating a multisig execution or to",
                " store a dispatch call for later.",
                "",
                " This is held for an additional storage item whose value size is",
                " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                " `32 + sizeof(AccountId)` bytes."
              ]
            },
            {
              "name": "DepositFactor",
              "type": 6,
              "value": [
                0,
                208,
                18,
                19,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency needed per unit threshold when creating a multisig execution.",
                "",
                " This is held for adding 32 bytes more into a pre-existing storage value."
              ]
            },
            {
              "name": "MaxSignatories",
              "type": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of signatories allowed in the multisig."
              ]
            }
          ],
          "errors": 672,
          "index": 30
        },
        {
          "name": "Bounties",
          "storage": {
            "prefix": "Bounties",
            "items": [
              {
                "name": "BountyCount",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of bounty proposals that have been made."
                ]
              },
              {
                "name": "Bounties",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 673
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Bounties that have been made."
                ]
              },
              {
                "name": "BountyDescriptions",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 675
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The description of each bounty."
                ]
              },
              {
                "name": "BountyApprovals",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 606
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Bounty indices that have been approved but not yet funded."
                ]
              }
            ]
          },
          "calls": 233,
          "events": 452,
          "constants": [
            {
              "name": "BountyDepositBase",
              "type": 6,
              "value": [
                0,
                228,
                11,
                84,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit for placing a bounty proposal."
              ]
            },
            {
              "name": "BountyDepositPayoutDelay",
              "type": 4,
              "value": [
                0,
                194,
                1,
                0
              ],
              "docs": [
                " The delay period for which a bounty beneficiary need to wait before claim the payout."
              ]
            },
            {
              "name": "BountyUpdatePeriod",
              "type": 4,
              "value": [
                128,
                198,
                19,
                0
              ],
              "docs": [
                " Bounty duration in blocks."
              ]
            },
            {
              "name": "CuratorDepositMultiplier",
              "type": 607,
              "value": [
                32,
                161,
                7,
                0
              ],
              "docs": [
                " The curator deposit is calculated as a percentage of the curator fee.",
                "",
                " This deposit has optional upper and lower bounds with `CuratorDepositMax` and",
                " `CuratorDepositMin`."
              ]
            },
            {
              "name": "CuratorDepositMax",
              "type": 608,
              "value": [
                1,
                0,
                32,
                74,
                169,
                209,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "CuratorDepositMin",
              "type": 608,
              "value": [
                1,
                0,
                232,
                118,
                72,
                23,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "BountyValueMinimum",
              "type": 6,
              "value": [
                0,
                232,
                118,
                72,
                23,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum value for a bounty."
              ]
            },
            {
              "name": "DataDepositPerByte",
              "type": 6,
              "value": [
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit per byte within the tip report reason or bounty description."
              ]
            },
            {
              "name": "MaximumReasonLength",
              "type": 4,
              "value": [
                0,
                64,
                0,
                0
              ],
              "docs": [
                " Maximum acceptable reason length.",
                "",
                " Benchmarks depend on this value, be sure to update weights file when changing this value"
              ]
            }
          ],
          "errors": 676,
          "index": 34
        },
        {
          "name": "ChildBounties",
          "storage": {
            "prefix": "ChildBounties",
            "items": [
              {
                "name": "ChildBountyCount",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of total child bounties."
                ]
              },
              {
                "name": "ParentChildBounties",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of child bounties per parent bounty.",
                  " Map of parent bounty index to number of child bounties."
                ]
              },
              {
                "name": "ChildBounties",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 31,
                    "value": 677
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Child bounties that have been added."
                ]
              },
              {
                "name": "ChildBountyDescriptions",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 675
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The description of each child-bounty."
                ]
              },
              {
                "name": "ChildrenCuratorFees",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 6
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The cumulative child-bounty curator fee for each parent bounty."
                ]
              }
            ]
          },
          "calls": 234,
          "events": 453,
          "constants": [
            {
              "name": "MaxActiveChildBountyCount",
              "type": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of child bounties that can be added to a parent bounty."
              ]
            },
            {
              "name": "ChildBountyValueMinimum",
              "type": 6,
              "value": [
                0,
                228,
                11,
                84,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum value for a child-bounty."
              ]
            }
          ],
          "errors": 679,
          "index": 38
        },
        {
          "name": "Tips",
          "storage": {
            "prefix": "Tips",
            "items": [
              {
                "name": "Tips",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 12,
                    "value": 680
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
                  " This has the insecure enumerable hash function since the key itself is already",
                  " guaranteed to be a secure hash."
                ]
              },
              {
                "name": "Reasons",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 12,
                    "value": 13
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Simple preimage lookup from the reason's hash to the original data. Again, has an",
                  " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
                ]
              }
            ]
          },
          "calls": 235,
          "events": 454,
          "constants": [
            {
              "name": "MaximumReasonLength",
              "type": 4,
              "value": [
                0,
                64,
                0,
                0
              ],
              "docs": [
                " Maximum acceptable reason length.",
                "",
                " Benchmarks depend on this value, be sure to update weights file when changing this value"
              ]
            },
            {
              "name": "DataDepositPerByte",
              "type": 6,
              "value": [
                0,
                225,
                245,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit per byte within the tip report reason or bounty description."
              ]
            },
            {
              "name": "TipCountdown",
              "type": 4,
              "value": [
                64,
                56,
                0,
                0
              ],
              "docs": [
                " The period for which a tip remains open after is has achieved threshold tippers."
              ]
            },
            {
              "name": "TipFindersFee",
              "type": 108,
              "value": [
                20
              ],
              "docs": [
                " The percent of the final tip which goes to the original reporter of the tip."
              ]
            },
            {
              "name": "TipReportDepositBase",
              "type": 6,
              "value": [
                0,
                228,
                11,
                84,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount held on deposit for placing a tip report."
              ]
            }
          ],
          "errors": 681,
          "index": 35
        },
        {
          "name": "ElectionProviderMultiPhase",
          "storage": {
            "prefix": "ElectionProviderMultiPhase",
            "items": [
              {
                "name": "Round",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  1,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Internal counter for the number of rounds.",
                  "",
                  " This is useful for de-duplication of transactions submitted to the pool, and general",
                  " diagnostics of the pallet.",
                  "",
                  " This is merely incremented once per every time that an upstream `elect` is called."
                ]
              },
              {
                "name": "CurrentPhase",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 457
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Current phase."
                ]
              },
              {
                "name": "QueuedSolution",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 682
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Current best solution, signed or unsigned, queued to be returned upon `elect`.",
                  "",
                  " Always sorted by score."
                ]
              },
              {
                "name": "Snapshot",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 684
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Snapshot data of the round.",
                  "",
                  " This is created at the beginning of the signed phase and cleared upon calling `elect`."
                ]
              },
              {
                "name": "DesiredTargets",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Desired number of targets to elect for this round.",
                  "",
                  " Only exists when [`Snapshot`] is present."
                ]
              },
              {
                "name": "SnapshotMetadata",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 290
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The metadata of the [`RoundSnapshot`]",
                  "",
                  " Only exists when [`Snapshot`] is present."
                ]
              },
              {
                "name": "SignedSubmissionNextIndex",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The next index to be assigned to an incoming signed submission.",
                  "",
                  " Every accepted submission is assigned a unique index; that index is bound to that particular",
                  " submission for the duration of the election. On election finalization, the next index is",
                  " reset to 0.",
                  "",
                  " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
                  " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
                  " because iteration is slow. Instead, we store the value here."
                ]
              },
              {
                "name": "SignedSubmissionIndices",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 687
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a",
                  " value in `SignedSubmissions`.",
                  "",
                  " We never need to process more than a single signed submission at a time. Signed submissions",
                  " can be quite large, so we're willing to pay the cost of multiple database accesses to access",
                  " them one at a time instead of reading and decoding all of them at once."
                ]
              },
              {
                "name": "SignedSubmissionsMap",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 690
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Unchecked, signed solutions.",
                  "",
                  " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
                  " allowing us to keep only a single one in memory at a time.",
                  "",
                  " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
                  " affect; we shouldn't need a cryptographically secure hasher."
                ]
              },
              {
                "name": "MinimumUntrustedScore",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 289
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The minimum score that each 'untrusted' solution must attain in order to be considered",
                  " feasible.",
                  "",
                  " Can be set via `set_minimum_untrusted_score`."
                ]
              }
            ]
          },
          "calls": 236,
          "events": 455,
          "constants": [
            {
              "name": "UnsignedPhase",
              "type": 4,
              "value": [
                88,
                2,
                0,
                0
              ],
              "docs": [
                " Duration of the unsigned phase."
              ]
            },
            {
              "name": "SignedPhase",
              "type": 4,
              "value": [
                88,
                2,
                0,
                0
              ],
              "docs": [
                " Duration of the signed phase."
              ]
            },
            {
              "name": "BetterSignedThreshold",
              "type": 41,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount of improvement to the solution score that defines a solution as",
                " \"better\" in the Signed phase."
              ]
            },
            {
              "name": "BetterUnsignedThreshold",
              "type": 41,
              "value": [
                32,
                161,
                7,
                0
              ],
              "docs": [
                " The minimum amount of improvement to the solution score that defines a solution as",
                " \"better\" in the Unsigned phase."
              ]
            },
            {
              "name": "OffchainRepeat",
              "type": 4,
              "value": [
                18,
                0,
                0,
                0
              ],
              "docs": [
                " The repeat threshold of the offchain worker.",
                "",
                " For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
                " to submit the worker's solution."
              ]
            },
            {
              "name": "MinerTxPriority",
              "type": 11,
              "value": [
                101,
                102,
                102,
                102,
                102,
                102,
                102,
                230
              ],
              "docs": [
                " The priority of the unsigned transaction submitted in the unsigned-phase"
              ]
            },
            {
              "name": "SignedMaxSubmissions",
              "type": 4,
              "value": [
                16,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of signed submissions that can be queued.",
                "",
                " It is best to avoid adjusting this during an election, as it impacts downstream data",
                " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you",
                " update this value during an election, you _must_ ensure that",
                " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
                " attempts to submit new solutions may cause a runtime panic."
              ]
            },
            {
              "name": "SignedMaxWeight",
              "type": 9,
              "value": [
                11,
                200,
                60,
                119,
                39,
                86,
                1,
                19,
                163,
                112,
                61,
                10,
                215,
                163,
                112,
                189
              ],
              "docs": [
                " Maximum weight of a signed solution.",
                "",
                " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of",
                " this pallet), then [`MinerConfig::solution_weight`] is used to compare against",
                " this value."
              ]
            },
            {
              "name": "SignedMaxRefunds",
              "type": 4,
              "value": [
                4,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum amount of unchecked solutions to refund the call fee for."
              ]
            },
            {
              "name": "SignedRewardBase",
              "type": 6,
              "value": [
                0,
                228,
                11,
                84,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Base reward for a signed solution"
              ]
            },
            {
              "name": "SignedDepositBase",
              "type": 6,
              "value": [
                0,
                160,
                219,
                33,
                93,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Base deposit for a signed solution."
              ]
            },
            {
              "name": "SignedDepositByte",
              "type": 6,
              "value": [
                120,
                125,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Per-byte deposit for a signed solution."
              ]
            },
            {
              "name": "SignedDepositWeight",
              "type": 6,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Per-weight deposit for a signed solution."
              ]
            },
            {
              "name": "MaxElectingVoters",
              "type": 4,
              "value": [
                228,
                87,
                0,
                0
              ],
              "docs": [
                " The maximum number of electing voters to put in the snapshot. At the moment, snapshots",
                " are only over a single block, but once multi-block elections are introduced they will",
                " take place over multiple blocks."
              ]
            },
            {
              "name": "MaxElectableTargets",
              "type": 77,
              "value": [
                255,
                255
              ],
              "docs": [
                " The maximum number of electable targets to put in the snapshot."
              ]
            },
            {
              "name": "MaxWinners",
              "type": 4,
              "value": [
                176,
                4,
                0,
                0
              ],
              "docs": [
                " The maximum number of winners that can be elected by this `ElectionProvider`",
                " implementation.",
                "",
                " Note: This must always be greater or equal to `T::DataProvider::desired_targets()`."
              ]
            },
            {
              "name": "MinerMaxLength",
              "type": 4,
              "value": [
                0,
                0,
                54,
                0
              ],
              "docs": []
            },
            {
              "name": "MinerMaxWeight",
              "type": 9,
              "value": [
                11,
                200,
                60,
                119,
                39,
                86,
                1,
                19,
                163,
                112,
                61,
                10,
                215,
                163,
                112,
                189
              ],
              "docs": []
            },
            {
              "name": "MinerMaxVotesPerVoter",
              "type": 4,
              "value": [
                16,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "MinerMaxWinners",
              "type": 4,
              "value": [
                176,
                4,
                0,
                0
              ],
              "docs": []
            }
          ],
          "errors": 691,
          "index": 36
        },
        {
          "name": "VoterList",
          "storage": {
            "prefix": "VoterList",
            "items": [
              {
                "name": "ListNodes",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 0,
                    "value": 692
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " A single node, within some bag.",
                  "",
                  " Nodes store links forward and back within their respective bags."
                ]
              },
              {
                "name": "CounterForListNodes",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "ListBags",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 11,
                    "value": 693
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " A bag stored in storage.",
                  "",
                  " Stores a `Bag` struct, which stores head and tail pointers to itself."
                ]
              }
            ]
          },
          "calls": 295,
          "events": 459,
          "constants": [
            {
              "name": "BagThresholds",
              "type": 694,
              "value": [
                33,
                3,
                0,
                228,
                11,
                84,
                2,
                0,
                0,
                0,
                243,
                158,
                128,
                151,
                2,
                0,
                0,
                0,
                168,
                177,
                151,
                226,
                2,
                0,
                0,
                0,
                148,
                73,
                46,
                54,
                3,
                0,
                0,
                0,
                39,
                156,
                58,
                147,
                3,
                0,
                0,
                0,
                3,
                188,
                206,
                250,
                3,
                0,
                0,
                0,
                66,
                192,
                27,
                110,
                4,
                0,
                0,
                0,
                27,
                71,
                117,
                238,
                4,
                0,
                0,
                0,
                56,
                94,
                85,
                125,
                5,
                0,
                0,
                0,
                70,
                220,
                96,
                28,
                6,
                0,
                0,
                0,
                137,
                56,
                108,
                205,
                6,
                0,
                0,
                0,
                182,
                238,
                128,
                146,
                7,
                0,
                0,
                0,
                254,
                126,
                227,
                109,
                8,
                0,
                0,
                0,
                232,
                27,
                26,
                98,
                9,
                0,
                0,
                0,
                176,
                25,
                244,
                113,
                10,
                0,
                0,
                0,
                16,
                53,
                146,
                160,
                11,
                0,
                0,
                0,
                207,
                201,
                111,
                241,
                12,
                0,
                0,
                0,
                65,
                20,
                109,
                104,
                14,
                0,
                0,
                0,
                231,
                155,
                218,
                9,
                16,
                0,
                0,
                0,
                206,
                232,
                133,
                218,
                17,
                0,
                0,
                0,
                40,
                169,
                199,
                223,
                19,
                0,
                0,
                0,
                187,
                112,
                147,
                31,
                22,
                0,
                0,
                0,
                142,
                64,
                137,
                160,
                24,
                0,
                0,
                0,
                129,
                10,
                9,
                106,
                27,
                0,
                0,
                0,
                54,
                106,
                72,
                132,
                30,
                0,
                0,
                0,
                91,
                211,
                106,
                248,
                33,
                0,
                0,
                0,
                128,
                124,
                156,
                208,
                37,
                0,
                0,
                0,
                201,
                85,
                48,
                24,
                42,
                0,
                0,
                0,
                189,
                99,
                193,
                219,
                46,
                0,
                0,
                0,
                113,
                224,
                87,
                41,
                52,
                0,
                0,
                0,
                104,
                144,
                146,
                16,
                58,
                0,
                0,
                0,
                237,
                196,
                212,
                162,
                64,
                0,
                0,
                0,
                105,
                147,
                121,
                243,
                71,
                0,
                0,
                0,
                143,
                216,
                12,
                24,
                80,
                0,
                0,
                0,
                75,
                175,
                138,
                40,
                89,
                0,
                0,
                0,
                106,
                22,
                166,
                63,
                99,
                0,
                0,
                0,
                9,
                149,
                23,
                123,
                110,
                0,
                0,
                0,
                120,
                197,
                244,
                251,
                122,
                0,
                0,
                0,
                98,
                200,
                17,
                231,
                136,
                0,
                0,
                0,
                81,
                191,
                109,
                101,
                152,
                0,
                0,
                0,
                4,
                142,
                171,
                164,
                169,
                0,
                0,
                0,
                84,
                70,
                152,
                215,
                188,
                0,
                0,
                0,
                145,
                202,
                192,
                54,
                210,
                0,
                0,
                0,
                23,
                95,
                24,
                1,
                234,
                0,
                0,
                0,
                189,
                21,
                178,
                124,
                4,
                1,
                0,
                0,
                67,
                53,
                143,
                247,
                33,
                1,
                0,
                0,
                184,
                252,
                132,
                200,
                66,
                1,
                0,
                0,
                153,
                103,
                60,
                80,
                103,
                1,
                0,
                0,
                7,
                228,
                78,
                250,
                143,
                1,
                0,
                0,
                179,
                65,
                131,
                62,
                189,
                1,
                0,
                0,
                2,
                127,
                46,
                162,
                239,
                1,
                0,
                0,
                152,
                131,
                188,
                185,
                39,
                2,
                0,
                0,
                22,
                77,
                101,
                42,
                102,
                2,
                0,
                0,
                180,
                149,
                19,
                172,
                171,
                2,
                0,
                0,
                45,
                142,
                130,
                11,
                249,
                2,
                0,
                0,
                161,
                230,
                152,
                44,
                79,
                3,
                0,
                0,
                166,
                22,
                8,
                13,
                175,
                3,
                0,
                0,
                204,
                157,
                55,
                199,
                25,
                4,
                0,
                0,
                160,
                213,
                132,
                149,
                144,
                4,
                0,
                0,
                66,
                231,
                224,
                213,
                20,
                5,
                0,
                0,
                2,
                140,
                215,
                13,
                168,
                5,
                0,
                0,
                15,
                117,
                10,
                239,
                75,
                6,
                0,
                0,
                234,
                141,
                46,
                92,
                2,
                7,
                0,
                0,
                195,
                203,
                153,
                110,
                205,
                7,
                0,
                0,
                177,
                229,
                113,
                124,
                175,
                8,
                0,
                0,
                170,
                43,
                142,
                31,
                171,
                9,
                0,
                0,
                181,
                193,
                32,
                61,
                195,
                10,
                0,
                0,
                38,
                208,
                61,
                14,
                251,
                11,
                0,
                0,
                112,
                199,
                89,
                41,
                86,
                13,
                0,
                0,
                235,
                173,
                218,
                140,
                216,
                14,
                0,
                0,
                247,
                151,
                219,
                170,
                134,
                16,
                0,
                0,
                207,
                240,
                68,
                118,
                101,
                18,
                0,
                0,
                31,
                38,
                96,
                113,
                122,
                20,
                0,
                0,
                9,
                166,
                17,
                190,
                203,
                22,
                0,
                0,
                29,
                251,
                232,
                47,
                96,
                25,
                0,
                0,
                148,
                58,
                60,
                96,
                63,
                28,
                0,
                0,
                138,
                254,
                137,
                196,
                113,
                31,
                0,
                0,
                206,
                217,
                99,
                199,
                0,
                35,
                0,
                0,
                3,
                169,
                42,
                228,
                246,
                38,
                0,
                0,
                254,
                114,
                238,
                197,
                95,
                43,
                0,
                0,
                54,
                201,
                204,
                105,
                72,
                48,
                0,
                0,
                218,
                227,
                50,
                69,
                191,
                53,
                0,
                0,
                6,
                42,
                116,
                112,
                212,
                59,
                0,
                0,
                124,
                151,
                50,
                214,
                153,
                66,
                0,
                0,
                132,
                163,
                36,
                104,
                35,
                74,
                0,
                0,
                87,
                26,
                212,
                89,
                135,
                82,
                0,
                0,
                231,
                241,
                2,
                98,
                222,
                91,
                0,
                0,
                13,
                184,
                118,
                3,
                68,
                102,
                0,
                0,
                174,
                4,
                1,
                222,
                214,
                113,
                0,
                0,
                125,
                158,
                179,
                8,
                185,
                126,
                0,
                0,
                30,
                4,
                74,
                118,
                16,
                141,
                0,
                0,
                58,
                29,
                240,
                100,
                7,
                157,
                0,
                0,
                224,
                79,
                175,
                218,
                204,
                174,
                0,
                0,
                86,
                121,
                240,
                47,
                149,
                194,
                0,
                0,
                149,
                195,
                170,
                169,
                154,
                216,
                0,
                0,
                150,
                124,
                5,
                37,
                30,
                241,
                0,
                0,
                23,
                122,
                102,
                214,
                103,
                12,
                1,
                0,
                40,
                203,
                31,
                30,
                200,
                42,
                1,
                0,
                250,
                40,
                47,
                117,
                152,
                76,
                1,
                0,
                213,
                125,
                200,
                116,
                60,
                114,
                1,
                0,
                125,
                196,
                179,
                251,
                34,
                156,
                1,
                0,
                54,
                92,
                222,
                116,
                199,
                202,
                1,
                0,
                158,
                184,
                225,
                66,
                179,
                254,
                1,
                0,
                12,
                49,
                174,
                84,
                127,
                56,
                2,
                0,
                95,
                225,
                1,
                232,
                213,
                120,
                2,
                0,
                99,
                115,
                218,
                126,
                116,
                192,
                2,
                0,
                81,
                209,
                166,
                13,
                46,
                16,
                3,
                0,
                199,
                233,
                164,
                104,
                237,
                104,
                3,
                0,
                97,
                192,
                145,
                247,
                183,
                203,
                3,
                0,
                191,
                39,
                161,
                183,
                176,
                57,
                4,
                0,
                123,
                20,
                153,
                148,
                27,
                180,
                4,
                0,
                133,
                35,
                237,
                34,
                97,
                60,
                5,
                0,
                105,
                165,
                212,
                197,
                18,
                212,
                5,
                0,
                236,
                140,
                147,
                77,
                239,
                124,
                6,
                0,
                245,
                170,
                144,
                27,
                232,
                56,
                7,
                0,
                140,
                190,
                93,
                219,
                38,
                10,
                8,
                0,
                2,
                151,
                140,
                225,
                19,
                243,
                8,
                0,
                250,
                227,
                20,
                67,
                93,
                246,
                9,
                0,
                221,
                241,
                45,
                186,
                254,
                22,
                11,
                0,
                46,
                186,
                220,
                111,
                74,
                88,
                12,
                0,
                12,
                85,
                24,
                196,
                242,
                189,
                13,
                0,
                240,
                187,
                84,
                49,
                21,
                76,
                15,
                0,
                73,
                142,
                134,
                107,
                70,
                7,
                17,
                0,
                178,
                193,
                83,
                222,
                159,
                244,
                18,
                0,
                39,
                138,
                47,
                178,
                206,
                25,
                21,
                0,
                178,
                57,
                159,
                132,
                36,
                125,
                23,
                0,
                225,
                153,
                231,
                4,
                170,
                37,
                26,
                0,
                186,
                19,
                245,
                171,
                51,
                27,
                29,
                0,
                38,
                71,
                133,
                204,
                120,
                102,
                32,
                0,
                136,
                191,
                128,
                63,
                45,
                17,
                36,
                0,
                28,
                152,
                35,
                248,
                29,
                38,
                40,
                0,
                204,
                196,
                34,
                212,
                80,
                177,
                44,
                0,
                240,
                136,
                130,
                5,
                40,
                192,
                49,
                0,
                54,
                124,
                109,
                126,
                137,
                97,
                55,
                0,
                110,
                147,
                41,
                211,
                10,
                166,
                61,
                0,
                140,
                188,
                108,
                19,
                34,
                160,
                68,
                0,
                0,
                112,
                243,
                42,
                92,
                100,
                76,
                0,
                180,
                59,
                132,
                105,
                153,
                9,
                85,
                0,
                128,
                180,
                171,
                228,
                80,
                169,
                94,
                0,
                160,
                205,
                169,
                121,
                219,
                95,
                105,
                0,
                76,
                194,
                127,
                76,
                199,
                76,
                117,
                0,
                208,
                172,
                14,
                186,
                52,
                147,
                130,
                0,
                72,
                62,
                12,
                207,
                61,
                90,
                145,
                0,
                104,
                198,
                142,
                116,
                105,
                205,
                161,
                0,
                40,
                30,
                111,
                165,
                43,
                29,
                180,
                0,
                152,
                169,
                35,
                38,
                116,
                127,
                200,
                0,
                240,
                154,
                116,
                99,
                77,
                48,
                223,
                0,
                128,
                205,
                252,
                75,
                141,
                114,
                248,
                0,
                144,
                20,
                96,
                45,
                154,
                144,
                20,
                1,
                240,
                180,
                19,
                217,
                69,
                221,
                51,
                1,
                32,
                151,
                53,
                150,
                193,
                180,
                86,
                1,
                80,
                220,
                251,
                174,
                173,
                125,
                125,
                1,
                224,
                17,
                152,
                185,
                71,
                170,
                168,
                1,
                48,
                199,
                238,
                22,
                187,
                185,
                216,
                1,
                32,
                110,
                72,
                134,
                151,
                57,
                14,
                2,
                160,
                250,
                75,
                29,
                114,
                199,
                73,
                2,
                192,
                17,
                113,
                112,
                181,
                18,
                140,
                2,
                128,
                138,
                22,
                67,
                166,
                222,
                213,
                2,
                192,
                248,
                35,
                177,
                162,
                4,
                40,
                3,
                128,
                175,
                89,
                112,
                162,
                118,
                131,
                3,
                192,
                111,
                45,
                135,
                255,
                65,
                233,
                3,
                64,
                147,
                127,
                172,
                143,
                146,
                90,
                4,
                0,
                145,
                9,
                113,
                23,
                182,
                216,
                4,
                64,
                15,
                223,
                91,
                33,
                32,
                101,
                5,
                0,
                73,
                193,
                73,
                68,
                110,
                1,
                6,
                0,
                142,
                188,
                166,
                229,
                108,
                175,
                6,
                0,
                89,
                86,
                134,
                133,
                28,
                113,
                7,
                128,
                104,
                170,
                52,
                164,
                183,
                72,
                8,
                128,
                161,
                226,
                158,
                82,
                185,
                56,
                9,
                0,
                189,
                171,
                232,
                128,
                228,
                67,
                10,
                0,
                42,
                114,
                180,
                32,
                76,
                109,
                11,
                128,
                241,
                192,
                19,
                51,
                92,
                184,
                12,
                0,
                160,
                60,
                203,
                220,
                227,
                40,
                14,
                128,
                184,
                98,
                154,
                158,
                32,
                195,
                15,
                0,
                222,
                86,
                147,
                210,
                202,
                139,
                17,
                0,
                93,
                127,
                76,
                147,
                35,
                136,
                19,
                0,
                26,
                135,
                223,
                53,
                4,
                190,
                21,
                0,
                167,
                206,
                75,
                132,
                239,
                51,
                24,
                0,
                1,
                16,
                251,
                234,
                36,
                241,
                26,
                0,
                128,
                42,
                229,
                209,
                181,
                253,
                29,
                0,
                34,
                161,
                52,
                96,
                157,
                98,
                33,
                0,
                68,
                33,
                107,
                240,
                218,
                41,
                37,
                0,
                2,
                97,
                241,
                130,
                143,
                94,
                41,
                0,
                102,
                32,
                207,
                133,
                30,
                13,
                46,
                0,
                132,
                16,
                25,
                82,
                82,
                67,
                51,
                0,
                160,
                193,
                143,
                202,
                132,
                16,
                57,
                0,
                38,
                173,
                20,
                147,
                204,
                133,
                63,
                0,
                208,
                205,
                36,
                102,
                47,
                182,
                70,
                0,
                156,
                225,
                154,
                28,
                218,
                182,
                78,
                0,
                88,
                204,
                194,
                12,
                95,
                159,
                87,
                0,
                32,
                10,
                117,
                120,
                251,
                137,
                97,
                0,
                48,
                187,
                187,
                214,
                228,
                147,
                108,
                0,
                96,
                203,
                167,
                220,
                158,
                221,
                120,
                0,
                184,
                59,
                192,
                66,
                91,
                139,
                134,
                0,
                184,
                134,
                35,
                97,
                100,
                197,
                149,
                0,
                248,
                241,
                95,
                220,
                147,
                184,
                166,
                0,
                32,
                106,
                145,
                192,
                214,
                150,
                185,
                0,
                216,
                239,
                226,
                143,
                192,
                151,
                206,
                0,
                104,
                41,
                155,
                245,
                46,
                249,
                229,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255
              ],
              "docs": [
                " The list of thresholds separating the various bags.",
                "",
                " Ids are separated into unsorted bags according to their score. This specifies the",
                " thresholds separating the bags. An id's bag is the largest bag for which the id's score",
                " is less than or equal to its upper threshold.",
                "",
                " When ids are iterated, higher bags are iterated completely before lower bags. This means",
                " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower",
                " score, but peer ids within a particular bag are sorted in insertion order.",
                "",
                " # Expressing the constant",
                "",
                " This constant must be sorted in strictly increasing order. Duplicate items are not",
                " permitted.",
                "",
                " There is an implied upper limit of `Score::MAX`; that value does not need to be",
                " specified within the bag. For any two threshold lists, if one ends with",
                " `Score::MAX`, the other one does not, and they are otherwise equal, the two",
                " lists will behave identically.",
                "",
                " # Calculation",
                "",
                " It is recommended to generate the set of thresholds in a geometric series, such that",
                " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *",
                " constant_ratio).max(threshold[k] + 1)` for all `k`.",
                "",
                " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.",
                "",
                " # Examples",
                "",
                " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and",
                "   iteration is strictly in insertion order.",
                " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to",
                "   the procedure given above, then the constant ratio is equal to 2.",
                " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to",
                "   the procedure given above, then the constant ratio is approximately equal to 1.248.",
                " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall",
                "   into bag 0, an id with score 2 will fall into bag 1, etc.",
                "",
                " # Migration",
                "",
                " In the event that this list ever changes, a copy of the old bags list must be retained.",
                " With that `List::migrate` can be called, which will perform the appropriate migration."
              ]
            }
          ],
          "errors": 695,
          "index": 37
        },
        {
          "name": "NominationPools",
          "storage": {
            "prefix": "NominationPools",
            "items": [
              {
                "name": "MinJoinBond",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 6
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Minimum amount to bond to join a pool."
                ]
              },
              {
                "name": "MinCreateBond",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 6
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Minimum bond required to create a pool.",
                  "",
                  " This is the amount that the depositor must put as their initial stake in the pool, as an",
                  " indication of \"skin in the game\".",
                  "",
                  " This is the value that will always exist in the staking ledger of the pool bonded account",
                  " while all other accounts leave."
                ]
              },
              {
                "name": "MaxPools",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Maximum number of nomination pools that can exist. If `None`, then an unbounded number of",
                  " pools can exist."
                ]
              },
              {
                "name": "MaxPoolMembers",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Maximum number of members that can exist in the system. If `None`, then the count",
                  " members are not bound on a system wide basis."
                ]
              },
              {
                "name": "MaxPoolMembersPerPool",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Maximum number of members that may belong to pool. If `None`, then the count of",
                  " members is not bound on a per pool basis."
                ]
              },
              {
                "name": "GlobalMaxCommission",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 41
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The maximum commission that can be charged by a pool. Used on commission payouts to bound",
                  " pool commissions that are > `GlobalMaxCommission`, necessary if a future",
                  " `GlobalMaxCommission` is lower than some current pool commissions."
                ]
              },
              {
                "name": "PoolMembers",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 0,
                    "value": 697
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Active members.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "CounterForPoolMembers",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "BondedPools",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 700
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Storage for bonded pools."
                ]
              },
              {
                "name": "CounterForBondedPools",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "RewardPools",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 705
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Reward pools. This is where there rewards for each pool accumulate. When a members payout is",
                  " claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account."
                ]
              },
              {
                "name": "CounterForRewardPools",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "SubPoolsStorage",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 706
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Groups of unbonding pools. Each group of unbonding pools belongs to a",
                  " bonded pool, hence the name sub-pools. Keyed by the bonded pools account."
                ]
              },
              {
                "name": "CounterForSubPoolsStorage",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "Metadata",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 712
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Metadata for the pool."
                ]
              },
              {
                "name": "CounterForMetadata",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "LastPoolId",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Ever increasing number of all pools created so far."
                ]
              },
              {
                "name": "ReversePoolIdLookup",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " A reverse lookup from the pool's account id to its id.",
                  "",
                  " This is only used for slashing. In all other instances, the pool id is used, and the",
                  " accounts are deterministically derived from it."
                ]
              },
              {
                "name": "CounterForReversePoolIdLookup",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "ClaimPermissions",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 0,
                    "value": 303
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Map from a pool member account to their opted claim permission."
                ]
              }
            ]
          },
          "calls": 296,
          "events": 460,
          "constants": [
            {
              "name": "PalletId",
              "type": 609,
              "value": [
                112,
                121,
                47,
                110,
                111,
                112,
                108,
                115
              ],
              "docs": [
                " The nomination pool's pallet id."
              ]
            },
            {
              "name": "MaxPointsToBalance",
              "type": 2,
              "value": [
                10
              ],
              "docs": [
                " The maximum pool points-to-balance ratio that an `open` pool can have.",
                "",
                " This is important in the event slashing takes place and the pool's points-to-balance",
                " ratio becomes disproportional.",
                "",
                " Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations",
                " are a function of number of points, and by setting this value to e.g. 10, you ensure",
                " that the total number of points in the system are at most 10 times the total_issuance of",
                " the chain, in the absolute worse case.",
                "",
                " For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1.",
                " Such a scenario would also be the equivalent of the pool being 90% slashed."
              ]
            }
          ],
          "errors": 713,
          "index": 39
        },
        {
          "name": "FastUnstake",
          "storage": {
            "prefix": "FastUnstake",
            "items": [
              {
                "name": "Head",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 715
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The current \"head of the queue\" being unstaked."
                ]
              },
              {
                "name": "Queue",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 0,
                    "value": 6
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The map of all accounts wishing to be unstaked.",
                  "",
                  " Keeps track of `AccountId` wishing to unstake and it's corresponding deposit.",
                  "",
                  " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
                ]
              },
              {
                "name": "CounterForQueue",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "ErasToCheckPerBlock",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of eras to check per block.",
                  "",
                  " If set to 0, this pallet does absolutely nothing.",
                  "",
                  " Based on the amount of weight available at `on_idle`, up to this many eras of a single",
                  " nominator might be checked."
                ]
              }
            ]
          },
          "calls": 307,
          "events": 461,
          "constants": [
            {
              "name": "Deposit",
              "type": 6,
              "value": [
                0,
                228,
                11,
                84,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Deposit to take for unstaking, to make sure we're able to slash the it in order to cover",
                " the costs of resources on unsuccessful unstake."
              ]
            }
          ],
          "errors": 718,
          "index": 40
        },
        {
          "name": "ParachainsOrigin",
          "constants": [],
          "index": 50
        },
        {
          "name": "Configuration",
          "storage": {
            "prefix": "Configuration",
            "items": [
              {
                "name": "ActiveConfig",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 719
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  2,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  6,
                  0,
                  0,
                  0,
                  100,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  2,
                  0,
                  0,
                  0,
                  2,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The active configuration for the current session."
                ]
              },
              {
                "name": "PendingConfigs",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 720
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Pending configuration changes.",
                  "",
                  " This is a list of configuration changes, each with a session index at which it should",
                  " be applied.",
                  "",
                  " The list is sorted ascending by session index. Also, this list can only contain at most",
                  " 2 items: for the next session and for the `scheduled_session`."
                ]
              },
              {
                "name": "BypassConsistencyCheck",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 44
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " If this is set, then the configuration setters will bypass the consistency checks. This",
                  " is meant to be used only as the last resort."
                ]
              }
            ]
          },
          "calls": 308,
          "constants": [],
          "errors": 722,
          "index": 51
        },
        {
          "name": "ParasShared",
          "storage": {
            "prefix": "ParasShared",
            "items": [
              {
                "name": "CurrentSessionIndex",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current session index."
                ]
              },
              {
                "name": "ActiveValidatorIndices",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 723
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " All the validators actively participating in parachain consensus.",
                  " Indices are into the broader validator set."
                ]
              },
              {
                "name": "ActiveValidatorKeys",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 724
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The parachain attestation keys of the validators actively participating in parachain consensus.",
                  " This should be the same length as `ActiveValidatorIndices`."
                ]
              }
            ]
          },
          "calls": 315,
          "constants": [],
          "index": 52
        },
        {
          "name": "ParaInclusion",
          "storage": {
            "prefix": "ParaInclusion",
            "items": [
              {
                "name": "AvailabilityBitfields",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 324,
                    "value": 725
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The latest bitfield for each validator, referred to by their index in the validator set."
                ]
              },
              {
                "name": "PendingAvailability",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 726
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Candidates pending availability by `ParaId`."
                ]
              },
              {
                "name": "PendingAvailabilityCommitments",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 333
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The commitments of candidates pending availability, by `ParaId`."
                ]
              }
            ]
          },
          "calls": 316,
          "events": 462,
          "constants": [],
          "errors": 727,
          "index": 53
        },
        {
          "name": "ParaInherent",
          "storage": {
            "prefix": "ParaInherent",
            "items": [
              {
                "name": "Included",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 34
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Whether the paras inherent was included within this block.",
                  "",
                  " The `Option<()>` is effectively a `bool`, but it never hits storage in the `None` variant",
                  " due to the guarantees of FRAME's storage APIs.",
                  "",
                  " If this is `None` at the end of the block, we panic and render the block invalid."
                ]
              },
              {
                "name": "OnChainVotes",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 728
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Scraped on chain data for extracting resolved disputes as well as backing votes."
                ]
              }
            ]
          },
          "calls": 317,
          "constants": [],
          "errors": 733,
          "index": 54
        },
        {
          "name": "ParaScheduler",
          "storage": {
            "prefix": "ParaScheduler",
            "items": [
              {
                "name": "ValidatorGroups",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 734
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " All the validator groups. One for each core. Indices are into `ActiveValidators` - not the",
                  " broader set of Polkadot validators, but instead just the subset used for parachains during",
                  " this session.",
                  "",
                  " Bound: The number of cores is the sum of the numbers of parachains and parathread multiplexers.",
                  " Reasonably, 100-1000. The dominant factor is the number of validators: safe upper bound at 10k."
                ]
              },
              {
                "name": "ParathreadQueue",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 735
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " A queue of upcoming claims and which core they should be mapped onto.",
                  "",
                  " The number of queued claims is bounded at the `scheduling_lookahead`",
                  " multiplied by the number of parathread multiplexer cores. Reasonably, 10 * 50 = 500."
                ]
              },
              {
                "name": "AvailabilityCores",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 740
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " One entry for each availability core. Entries are `None` if the core is not currently occupied. Can be",
                  " temporarily `Some` if scheduled but not occupied.",
                  " The i'th parachain belongs to the i'th core, with the remaining cores all being",
                  " parathread-multiplexers.",
                  "",
                  " Bounded by the maximum of either of these two values:",
                  "   * The number of parachains and parathread multiplexers",
                  "   * The number of validators divided by `configuration.max_validators_per_core`."
                ]
              },
              {
                "name": "ParathreadClaimIndex",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 743
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " An index used to ensure that only one claim on a parathread exists in the queue or is",
                  " currently being handled by an occupied core.",
                  "",
                  " Bounded by the number of parathread cores and scheduling lookahead. Reasonably, 10 * 50 = 500."
                ]
              },
              {
                "name": "SessionStartBlock",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The block number where the session start occurred. Used to track how many group rotations have occurred.",
                  "",
                  " Note that in the context of parachains modules the session change is signaled during",
                  " the block and enacted at the end of the block (at the finalization stage, to be exact).",
                  " Thus for all intents and purposes the effect of the session change is observed at the",
                  " block following the session change, block number of which we save in this storage value."
                ]
              },
              {
                "name": "Scheduled",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 744
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Currently scheduled cores - free but up to be occupied.",
                  "",
                  " Bounded by the number of cores: one for each parachain and parathread multiplexer.",
                  "",
                  " The value contained here will not be valid after the end of a block. Runtime APIs should be used to determine scheduled cores/",
                  " for the upcoming block."
                ]
              }
            ]
          },
          "constants": [],
          "index": 55
        },
        {
          "name": "Paras",
          "storage": {
            "prefix": "Paras",
            "items": [
              {
                "name": "PvfActiveVoteMap",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 332,
                    "value": 747
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " All currently active PVF pre-checking votes.",
                  "",
                  " Invariant:",
                  " - There are no PVF pre-checking votes that exists in list but not in the set and vice versa."
                ]
              },
              {
                "name": "PvfActiveVoteList",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 750
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The list of all currently active PVF votes. Auxiliary to `PvfActiveVoteMap`."
                ]
              },
              {
                "name": "Parachains",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 743
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " All parachains. Ordered ascending by `ParaId`. Parathreads are not included.",
                  "",
                  " Consider using the [`ParachainsCache`] type of modifying."
                ]
              },
              {
                "name": "ParaLifecycles",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 751
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The current lifecycle of a all known Para IDs."
                ]
              },
              {
                "name": "Heads",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 340
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The head-data of every registered para."
                ]
              },
              {
                "name": "CurrentCodeHash",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 332
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The validation code hash of every live para.",
                  "",
                  " Corresponding code can be retrieved with [`CodeByHash`]."
                ]
              },
              {
                "name": "PastCodeHash",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 752,
                    "value": 332
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Actual past code hash, indicated by the para id as well as the block number at which it",
                  " became outdated.",
                  "",
                  " Corresponding code can be retrieved with [`CodeByHash`]."
                ]
              },
              {
                "name": "PastCodeMeta",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 753
                  }
                },
                "fallback": [
                  0,
                  0
                ],
                "docs": [
                  " Past code of parachains. The parachains themselves may not be registered anymore,",
                  " but we also keep their code on-chain for the same amount of time as outdated code",
                  " to keep it available for approval checkers."
                ]
              },
              {
                "name": "PastCodePruning",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 756
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Which paras have past code that needs pruning and the relay-chain block at which the code was replaced.",
                  " Note that this is the actual height of the included block, not the expected height at which the",
                  " code upgrade would be applied, although they may be equal.",
                  " This is to ensure the entire acceptance period is covered, not an offset acceptance period starting",
                  " from the time at which the parachain perceives a code upgrade as having occurred.",
                  " Multiple entries for a single para are permitted. Ordered ascending by block number."
                ]
              },
              {
                "name": "FutureCodeUpgrades",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 4
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The block number at which the planned code change is expected for a para.",
                  " The change will be applied after the first parablock for this ID included which executes",
                  " in the context of a relay chain block with a number >= `expected_at`."
                ]
              },
              {
                "name": "FutureCodeHash",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 332
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The actual future code hash of a para.",
                  "",
                  " Corresponding code can be retrieved with [`CodeByHash`]."
                ]
              },
              {
                "name": "UpgradeGoAheadSignal",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 757
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " This is used by the relay-chain to communicate to a parachain a go-ahead with in the upgrade procedure.",
                  "",
                  " This value is absent when there are no upgrades scheduled or during the time the relay chain",
                  " performs the checks. It is set at the first relay-chain block when the corresponding parachain",
                  " can switch its upgrade function. As soon as the parachain's block is included, the value",
                  " gets reset to `None`.",
                  "",
                  " NOTE that this field is used by parachains via merkle storage proofs, therefore changing",
                  " the format will require migration of parachains."
                ]
              },
              {
                "name": "UpgradeRestrictionSignal",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 758
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " This is used by the relay-chain to communicate that there are restrictions for performing",
                  " an upgrade for this parachain.",
                  "",
                  " This may be a because the parachain waits for the upgrade cooldown to expire. Another",
                  " potential use case is when we want to perform some maintenance (such as storage migration)",
                  " we could restrict upgrades to make the process simpler.",
                  "",
                  " NOTE that this field is used by parachains via merkle storage proofs, therefore changing",
                  " the format will require migration of parachains."
                ]
              },
              {
                "name": "UpgradeCooldowns",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 756
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The list of parachains that are awaiting for their upgrade restriction to cooldown.",
                  "",
                  " Ordered ascending by block number."
                ]
              },
              {
                "name": "UpcomingUpgrades",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 756
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The list of upcoming code upgrades. Each item is a pair of which para performs a code",
                  " upgrade and at which relay-chain block it is expected at.",
                  "",
                  " Ordered ascending by block number."
                ]
              },
              {
                "name": "ActionsQueue",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 743
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The actions to perform during the start of a specific session index."
                ]
              },
              {
                "name": "UpcomingParasGenesis",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 759
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Upcoming paras instantiation arguments.",
                  "",
                  " NOTE that after PVF pre-checking is enabled the para genesis arg will have it's code set",
                  " to empty. Instead, the code will be saved into the storage right away via `CodeByHash`."
                ]
              },
              {
                "name": "CodeByHashRefs",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 332,
                    "value": 4
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of reference on the validation code in [`CodeByHash`] storage."
                ]
              },
              {
                "name": "CodeByHash",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 332,
                    "value": 339
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Validation code stored by its hash.",
                  "",
                  " This storage is consistent with [`FutureCodeHash`], [`CurrentCodeHash`] and",
                  " [`PastCodeHash`]."
                ]
              }
            ]
          },
          "calls": 351,
          "events": 466,
          "constants": [
            {
              "name": "UnsignedPriority",
              "type": 11,
              "value": [
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255
              ],
              "docs": []
            }
          ],
          "errors": 760,
          "index": 56
        },
        {
          "name": "Initializer",
          "storage": {
            "prefix": "Initializer",
            "items": [
              {
                "name": "HasInitialized",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 34
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Whether the parachains modules have been initialized within this block.",
                  "",
                  " Semantically a `bool`, but this guarantees it should never hit the trie,",
                  " as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values.",
                  "",
                  " As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one of",
                  " them writes to the trie and one does not. This confusion makes `Option<()>` more suitable for",
                  " the semantics of this variable."
                ]
              },
              {
                "name": "BufferedSessionChanges",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 761
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Buffered session changes along with the block number at which they should be applied.",
                  "",
                  " Typically this will be empty or one element long. Apart from that this item never hits",
                  " the storage.",
                  "",
                  " However this is a `Vec` regardless to handle various edge cases that may occur at runtime",
                  " upgrade boundaries or if governance intervenes."
                ]
              }
            ]
          },
          "calls": 353,
          "constants": [],
          "index": 57
        },
        {
          "name": "Dmp",
          "storage": {
            "prefix": "Dmp",
            "items": [
              {
                "name": "DownwardMessageQueues",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 763
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The downward messages addressed for a certain para."
                ]
              },
              {
                "name": "DownwardMessageQueueHeads",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 12
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " A mapping that stores the downward message queue MQC head for each para.",
                  "",
                  " Each link in this chain has a form:",
                  " `(prev_head, B, H(M))`, where",
                  " - `prev_head`: is the previous head hash or zero if none.",
                  " - `B`: is the relay-chain block number in which a message was appended.",
                  " - `H(M)`: is the hash of the message being appended."
                ]
              },
              {
                "name": "DeliveryFeeFactor",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 534
                  }
                },
                "fallback": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number to multiply the base delivery fee by."
                ]
              }
            ]
          },
          "constants": [],
          "index": 58
        },
        {
          "name": "Hrmp",
          "storage": {
            "prefix": "Hrmp",
            "items": [
              {
                "name": "HrmpOpenChannelRequests",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 355,
                    "value": 765
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The set of pending HRMP open channel requests.",
                  "",
                  " The set is accompanied by a list for iteration.",
                  "",
                  " Invariant:",
                  " - There are no channels that exists in list but not in the set and vice versa."
                ]
              },
              {
                "name": "HrmpOpenChannelRequestsList",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 766
                },
                "fallback": [
                  0
                ],
                "docs": []
              },
              {
                "name": "HrmpOpenChannelRequestCount",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 4
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " This mapping tracks how many open channel requests are initiated by a given sender para.",
                  " Invariant: `HrmpOpenChannelRequests` should contain the same number of items that has",
                  " `(X, _)` as the number of `HrmpOpenChannelRequestCount` for `X`."
                ]
              },
              {
                "name": "HrmpAcceptedChannelRequestCount",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 4
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " This mapping tracks how many open channel requests were accepted by a given recipient para.",
                  " Invariant: `HrmpOpenChannelRequests` should contain the same number of items `(_, X)` with",
                  " `confirmed` set to true, as the number of `HrmpAcceptedChannelRequestCount` for `X`."
                ]
              },
              {
                "name": "HrmpCloseChannelRequests",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 355,
                    "value": 34
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " A set of pending HRMP close channel requests that are going to be closed during the session",
                  " change. Used for checking if a given channel is registered for closure.",
                  "",
                  " The set is accompanied by a list for iteration.",
                  "",
                  " Invariant:",
                  " - There are no channels that exists in list but not in the set and vice versa."
                ]
              },
              {
                "name": "HrmpCloseChannelRequestsList",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 766
                },
                "fallback": [
                  0
                ],
                "docs": []
              },
              {
                "name": "HrmpWatermarks",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 4
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The HRMP watermark associated with each para.",
                  " Invariant:",
                  " - each para `P` used here as a key should satisfy `Paras::is_valid_para(P)` within a session."
                ]
              },
              {
                "name": "HrmpChannels",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 355,
                    "value": 767
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " HRMP channel data associated with each para.",
                  " Invariant:",
                  " - each participant in the channel should satisfy `Paras::is_valid_para(P)` within a session."
                ]
              },
              {
                "name": "HrmpIngressChannelsIndex",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 743
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Ingress/egress indexes allow to find all the senders and receivers given the opposite side.",
                  " I.e.",
                  "",
                  " (a) ingress index allows to find all the senders for a given recipient.",
                  " (b) egress index allows to find all the recipients for a given sender.",
                  "",
                  " Invariants:",
                  " - for each ingress index entry for `P` each item `I` in the index should present in",
                  "   `HrmpChannels` as `(I, P)`.",
                  " - for each egress index entry for `P` each item `E` in the index should present in",
                  "   `HrmpChannels` as `(P, E)`.",
                  " - there should be no other dangling channels in `HrmpChannels`.",
                  " - the vectors are sorted."
                ]
              },
              {
                "name": "HrmpEgressChannelsIndex",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 743
                  }
                },
                "fallback": [
                  0
                ],
                "docs": []
              },
              {
                "name": "HrmpChannelContents",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 355,
                    "value": 768
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Storage for the messages for each channel.",
                  " Invariant: cannot be non-empty if the corresponding channel in `HrmpChannels` is `None`."
                ]
              },
              {
                "name": "HrmpChannelDigests",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 770
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Maintains a mapping that can be used to answer the question: What paras sent a message at",
                  " the given block number for a given receiver. Invariants:",
                  " - The inner `Vec<ParaId>` is never empty.",
                  " - The inner `Vec<ParaId>` cannot store two same `ParaId`.",
                  " - The outer vector is sorted ascending by block number and cannot store two items with the",
                  "   same block number."
                ]
              }
            ]
          },
          "calls": 354,
          "events": 467,
          "constants": [],
          "errors": 772,
          "index": 60
        },
        {
          "name": "ParaSessionInfo",
          "storage": {
            "prefix": "ParaSessionInfo",
            "items": [
              {
                "name": "AssignmentKeysUnsafe",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 773
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Assignment keys for the current session.",
                  " Note that this API is private due to it being prone to 'off-by-one' at session boundaries.",
                  " When in doubt, use `Sessions` API instead."
                ]
              },
              {
                "name": "EarliestStoredSession",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The earliest session for which previous session info is stored."
                ]
              },
              {
                "name": "Sessions",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 4,
                    "value": 774
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Session information in a rolling window.",
                  " Should have an entry in range `EarliestStoredSession..=CurrentSessionIndex`.",
                  " Does not have any entries before the session index in the first session change notification."
                ]
              },
              {
                "name": "AccountKeys",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 4,
                    "value": 104
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The validator account keys of the validators actively participating in parachain consensus."
                ]
              },
              {
                "name": "SessionExecutorParams",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 4,
                    "value": 310
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Executor parameter set for a given session index"
                ]
              }
            ]
          },
          "constants": [],
          "index": 61
        },
        {
          "name": "ParasDisputes",
          "storage": {
            "prefix": "ParasDisputes",
            "items": [
              {
                "name": "LastPrunedSession",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The last pruned session, if any. All data stored by this module",
                  " references sessions."
                ]
              },
              {
                "name": "Disputes",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 778,
                    "value": 779
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " All ongoing or concluded disputes for the last several sessions."
                ]
              },
              {
                "name": "BackersOnDisputes",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 778,
                    "value": 780
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Backing votes stored for each dispute.",
                  " This storage is used for slashing."
                ]
              },
              {
                "name": "Included",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 778,
                    "value": 4
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " All included blocks on the chain, as well as the block number in this chain that",
                  " should be reverted back to if the candidate is disputed and determined to be invalid."
                ]
              },
              {
                "name": "Frozen",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 141
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Whether the chain is frozen. Starts as `None`. When this is `Some`,",
                  " the chain will not accept any new parachain blocks for backing or inclusion,",
                  " and its value indicates the last valid block number in the chain.",
                  " It can only be set back to `None` by governance intervention."
                ]
              }
            ]
          },
          "calls": 356,
          "events": 468,
          "constants": [],
          "errors": 781,
          "index": 62
        },
        {
          "name": "ParasSlashing",
          "storage": {
            "prefix": "ParasSlashing",
            "items": [
              {
                "name": "UnappliedSlashes",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 778,
                    "value": 782
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Validators pending dispute slashes."
                ]
              },
              {
                "name": "ValidatorSetCounts",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " `ValidatorSetCount` per session."
                ]
              }
            ]
          },
          "calls": 357,
          "constants": [],
          "errors": 786,
          "index": 63
        },
        {
          "name": "Registrar",
          "storage": {
            "prefix": "Registrar",
            "items": [
              {
                "name": "PendingSwap",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 162
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Pending swap operations."
                ]
              },
              {
                "name": "Paras",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 787
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Amount held on deposit for each para and the original depositor.",
                  "",
                  " The given account ID is responsible for registering the code and initial head data, but may only do",
                  " so if it isn't yet registered. (After that, it's up to governance to do so.)"
                ]
              },
              {
                "name": "NextFreeParaId",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 162
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The next free `ParaId`."
                ]
              }
            ]
          },
          "calls": 361,
          "events": 471,
          "constants": [
            {
              "name": "ParaDeposit",
              "type": 6,
              "value": [
                0,
                16,
                165,
                212,
                232,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The deposit to be paid to run a parathread.",
                " This should include the cost for storing the genesis head and validation code."
              ]
            },
            {
              "name": "DataDepositPerByte",
              "type": 6,
              "value": [
                128,
                150,
                152,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The deposit to be paid per byte stored on chain."
              ]
            }
          ],
          "errors": 788,
          "index": 70
        },
        {
          "name": "Slots",
          "storage": {
            "prefix": "Slots",
            "items": [
              {
                "name": "Leases",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 789
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Amounts held on deposit for each (possibly future) leased parachain.",
                  "",
                  " The actual amount locked on its behalf by any account at any time is the maximum of the second values",
                  " of the items in this list whose first value is the account.",
                  "",
                  " The first item in the list is the amount locked for the current Lease Period. Following",
                  " items are for the subsequent lease periods.",
                  "",
                  " The default value (an empty list) implies that the parachain no longer exists (or never",
                  " existed) as far as this pallet is concerned.",
                  "",
                  " If a parachain doesn't exist *yet* but is scheduled to exist in the future, then it",
                  " will be left-padded with one or more `None`s to denote the fact that nothing is held on",
                  " deposit for the non-existent chain currently, but is held at some point in the future.",
                  "",
                  " It is illegal for a `None` value to trail in the list."
                ]
              }
            ]
          },
          "calls": 362,
          "events": 472,
          "constants": [
            {
              "name": "LeasePeriod",
              "type": 4,
              "value": [
                0,
                117,
                18,
                0
              ],
              "docs": [
                " The number of blocks over which a single period lasts."
              ]
            },
            {
              "name": "LeaseOffset",
              "type": 4,
              "value": [
                0,
                16,
                14,
                0
              ],
              "docs": [
                " The number of blocks to offset each lease period by."
              ]
            }
          ],
          "errors": 790,
          "index": 71
        },
        {
          "name": "Auctions",
          "storage": {
            "prefix": "Auctions",
            "items": [
              {
                "name": "AuctionCounter",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Number of auctions started so far."
                ]
              },
              {
                "name": "AuctionInfo",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 31
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Information relating to the current auction, if there is one.",
                  "",
                  " The first item in the tuple is the lease period index that the first of the four",
                  " contiguous lease periods on auction is for. The second is the block number when the",
                  " auction will \"begin to end\", i.e. the first block of the Ending Period of the auction."
                ]
              },
              {
                "name": "ReservedAmounts",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 791,
                    "value": 6
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Amounts currently reserved in the accounts of the bidders currently winning",
                  " (sub-)ranges."
                ]
              },
              {
                "name": "Winning",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 4,
                    "value": 792
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The winning bids for each of the 10 ranges at each sample in the final Ending Period of",
                  " the current auction. The map's key is the 0-based index into the Sample Size. The",
                  " first sample of the ending period is 0; the last is `Sample Size - 1`."
                ]
              }
            ]
          },
          "calls": 363,
          "events": 473,
          "constants": [
            {
              "name": "EndingPeriod",
              "type": 4,
              "value": [
                64,
                25,
                1,
                0
              ],
              "docs": [
                " The number of blocks over which an auction may be retroactively ended."
              ]
            },
            {
              "name": "SampleLength",
              "type": 4,
              "value": [
                20,
                0,
                0,
                0
              ],
              "docs": [
                " The length of each sample to take during the ending period.",
                "",
                " `EndingPeriod` / `SampleLength` = Total # of Samples"
              ]
            },
            {
              "name": "SlotRangeCount",
              "type": 4,
              "value": [
                36,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "LeasePeriodsPerSlot",
              "type": 4,
              "value": [
                8,
                0,
                0,
                0
              ],
              "docs": []
            }
          ],
          "errors": 795,
          "index": 72
        },
        {
          "name": "Crowdloan",
          "storage": {
            "prefix": "Crowdloan",
            "items": [
              {
                "name": "Funds",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 162,
                    "value": 796
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Info on all of the funds."
                ]
              },
              {
                "name": "NewRaise",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 743
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The funds that have had additional contributions during the last block. This is used",
                  " in order to determine which funds should submit new or updated bids."
                ]
              },
              {
                "name": "EndingsCount",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of auctions that have entered into their ending period so far."
                ]
              },
              {
                "name": "NextFundIndex",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Tracker for the next available fund index"
                ]
              }
            ]
          },
          "calls": 365,
          "events": 474,
          "constants": [
            {
              "name": "PalletId",
              "type": 609,
              "value": [
                112,
                121,
                47,
                99,
                102,
                117,
                110,
                100
              ],
              "docs": [
                " `PalletId` for the crowdloan pallet. An appropriate value could be `PalletId(*b\"py/cfund\")`"
              ]
            },
            {
              "name": "MinContribution",
              "type": 6,
              "value": [
                0,
                116,
                59,
                164,
                11,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount that may be contributed into a crowdloan. Should almost certainly be at",
                " least `ExistentialDeposit`."
              ]
            },
            {
              "name": "RemoveKeysLimit",
              "type": 4,
              "value": [
                232,
                3,
                0,
                0
              ],
              "docs": [
                " Max number of storage keys to remove per extrinsic call."
              ]
            }
          ],
          "errors": 798,
          "index": 73
        },
        {
          "name": "XcmPallet",
          "storage": {
            "prefix": "XcmPallet",
            "items": [
              {
                "name": "QueryCounter",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 11
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The latest available query index."
                ]
              },
              {
                "name": "Queries",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 11,
                    "value": 799
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The ongoing queries."
                ]
              },
              {
                "name": "AssetTraps",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Identity"
                      }
                    ],
                    "key": 12,
                    "value": 4
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The existing asset traps.",
                  "",
                  " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
                  " times this pair has been trapped (usually just 1 if it exists at all)."
                ]
              },
              {
                "name": "SafeXcmVersion",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 4
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                  " then the destinations whose XCM version is unknown are considered unreachable."
                ]
              },
              {
                "name": "SupportedVersion",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 804,
                    "value": 4
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The Latest versions that we know various locations support."
                ]
              },
              {
                "name": "VersionNotifiers",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 804,
                    "value": 11
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " All locations that we have requested version notifications from."
                ]
              },
              {
                "name": "VersionNotifyTargets",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 804,
                    "value": 805
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The target locations that are subscribed to our version changes, as well as the most recent",
                  " of our versions we informed them of."
                ]
              },
              {
                "name": "VersionDiscoveryQueue",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 806
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                  " the `u32` counter is the number of times that a send to the destination has been attempted,",
                  " which is used as a prioritization."
                ]
              },
              {
                "name": "CurrentMigration",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 809
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The current migration's stage, if any."
                ]
              },
              {
                "name": "RemoteLockedFungibles",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Blake2128Concat"
                      },
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 811,
                    "value": 813
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Fungible assets which we know are locked on a remote chain."
                ]
              },
              {
                "name": "LockedFungibles",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Blake2128Concat"
                      }
                    ],
                    "key": 0,
                    "value": 817
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Fungible assets which we know are locked on this chain."
                ]
              },
              {
                "name": "XcmExecutionSuspended",
                "modifier": 1,
                "type": {
                  "tag": "plain",
                  "value": 44
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " Global suspension state of the XCM executor."
                ]
              }
            ]
          },
          "calls": 373,
          "events": 475,
          "constants": [],
          "errors": 820,
          "index": 99
        },
        {
          "name": "MessageQueue",
          "storage": {
            "prefix": "MessageQueue",
            "items": [
              {
                "name": "BookStateFor",
                "modifier": 1,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 437,
                    "value": 821
                  }
                },
                "fallback": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The index of the first and last (non-empty) pages."
                ]
              },
              {
                "name": "ServiceHead",
                "modifier": 0,
                "type": {
                  "tag": "plain",
                  "value": 437
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The origin at which we should begin servicing."
                ]
              },
              {
                "name": "Pages",
                "modifier": 0,
                "type": {
                  "tag": "map",
                  "value": {
                    "hashers": [
                      {
                        "tag": "Twox64Concat"
                      },
                      {
                        "tag": "Twox64Concat"
                      }
                    ],
                    "key": 824,
                    "value": 825
                  }
                },
                "fallback": [
                  0
                ],
                "docs": [
                  " The map of page indices to pages."
                ]
              }
            ]
          },
          "calls": 436,
          "events": 477,
          "constants": [
            {
              "name": "HeapSize",
              "type": 4,
              "value": [
                0,
                0,
                1,
                0
              ],
              "docs": [
                " The size of the page; this implies the maximum message size which can be sent.",
                "",
                " A good value depends on the expected message sizes, their weights, the weight that is",
                " available for processing them and the maximal needed message size. The maximal message",
                " size is slightly lower than this as defined by [`MaxMessageLenOf`]."
              ]
            },
            {
              "name": "MaxStale",
              "type": 4,
              "value": [
                8,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of stale pages (i.e. of overweight messages) allowed before culling",
                " can happen. Once there are more stale pages than this, then historical pages may be",
                " dropped, even if they contain unprocessed overweight messages."
              ]
            },
            {
              "name": "ServiceWeight",
              "type": 444,
              "value": [
                1,
                7,
                0,
                160,
                219,
                33,
                93,
                19,
                51,
                51,
                51,
                51,
                51,
                51,
                51,
                51
              ],
              "docs": [
                " The amount of weight (if any) which should be provided to the message queue for",
                " servicing enqueued items.",
                "",
                " This may be legitimately `None` in the case that you will call",
                " `ServiceQueues::service_queues` manually."
              ]
            }
          ],
          "errors": 827,
          "index": 100
        }
      ],
      "extrinsic": {
        "type": 828,
        "version": 4,
        "signedExtensions": [
          {
            "identifier": "CheckNonZeroSender",
            "type": 830,
            "additionalSigned": 34
          },
          {
            "identifier": "CheckSpecVersion",
            "type": 831,
            "additionalSigned": 4
          },
          {
            "identifier": "CheckTxVersion",
            "type": 832,
            "additionalSigned": 4
          },
          {
            "identifier": "CheckGenesis",
            "type": 833,
            "additionalSigned": 12
          },
          {
            "identifier": "CheckMortality",
            "type": 834,
            "additionalSigned": 12
          },
          {
            "identifier": "CheckNonce",
            "type": 836,
            "additionalSigned": 34
          },
          {
            "identifier": "CheckWeight",
            "type": 837,
            "additionalSigned": 34
          },
          {
            "identifier": "ChargeTransactionPayment",
            "type": 838,
            "additionalSigned": 34
          },
          {
            "identifier": "PrevalidateAttests",
            "type": 839,
            "additionalSigned": 34
          }
        ]
      },
      "type": 840
    }
  }
}
